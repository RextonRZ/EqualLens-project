{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruizh\\\\OneDrive\\\\Desktop\\\\EqualLens-project-1\\\\equallens-project\\\\src\\\\components\\\\UploadMoreCVModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useReducer } from \"react\";\nimport \"../components/pages/UploadCV.css\"; // Reuse existing CSS\nimport \"./UploadMoreCVModal.css\"; // Import the modal-specific CSS\nimport \"../components/pageloading.css\";\n\n// File upload reducer to manage file upload state more efficiently\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileUploadReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_FILES':\n      return {\n        ...state,\n        selectedFiles: action.payload.updatedFiles,\n        uploadQueue: action.payload.newQueue,\n        processingFiles: true\n      };\n    case 'FILE_PROGRESS':\n      return {\n        ...state,\n        uploadProgress: {\n          ...state.uploadProgress,\n          [action.payload.fileName]: action.payload.progress\n        }\n      };\n    case 'PROCESS_NEXT':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'FILE_COMPLETE':\n      return {\n        ...state,\n        uploadQueue: state.uploadQueue.slice(1)\n      };\n    case 'QUEUE_COMPLETE':\n      return {\n        ...state,\n        isLoading: false,\n        processingFiles: false\n      };\n    case 'REMOVE_FILE':\n      const fileToRemove = state.selectedFiles[action.payload.index];\n      return {\n        ...state,\n        selectedFiles: state.selectedFiles.filter((_, i) => i !== action.payload.index),\n        uploadQueue: fileToRemove ? state.uploadQueue.filter(queueFile => queueFile.name !== fileToRemove.name) : state.uploadQueue,\n        uploadProgress: fileToRemove ?\n        // Remove the progress entry for this file\n        Object.fromEntries(Object.entries(state.uploadProgress).filter(([key]) => key !== fileToRemove.name)) : state.uploadProgress\n      };\n    case 'RESET':\n      return {\n        selectedFiles: [],\n        isLoading: false,\n        uploadProgress: {},\n        uploadQueue: [],\n        processingFiles: false\n      };\n    default:\n      return state;\n  }\n};\nconst LoadingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-animation\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"seesaw-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ball\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_c = LoadingAnimation;\nconst UploadMoreCVModal = ({\n  isOpen,\n  onClose,\n  jobId,\n  jobTitle,\n  onUploadComplete\n}) => {\n  _s();\n  // Use reducer for file upload state management\n  const [fileState, fileDispatch] = useReducer(fileUploadReducer, {\n    selectedFiles: [],\n    isLoading: false,\n    uploadProgress: {},\n    uploadQueue: [],\n    processingFiles: false\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef(null);\n  const uploadContainerRef = useRef(null);\n  const progressAnimationRef = useRef(null);\n\n  // API state variables\n  const [apiStatus, setApiStatus] = useState(\"idle\"); // idle, loading, success, error\n  const [submitProgress, setSubmitProgress] = useState(0); // Track overall submission progress\n\n  // Add state for managing success and error modals\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [uploadedCount, setUploadedCount] = useState(0);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  // Hide body scrolling when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'visible';\n    }\n    return () => {\n      document.body.style.overflow = 'visible';\n    };\n  }, [isOpen]);\n\n  // Clean up animation frame on component unmount\n  useEffect(() => {\n    return () => {\n      if (progressAnimationRef.current) {\n        cancelAnimationFrame(progressAnimationRef.current);\n        progressAnimationRef.current = null;\n      }\n    };\n  }, []);\n\n  // Process files and add to queue\n  const processFiles = useCallback(files => {\n    // If already processing files, don't allow new uploads\n    if (fileState.isLoading || fileState.processingFiles) {\n      alert(\"Please wait for the current file to complete uploading before adding new files.\");\n      return;\n    }\n    let updatedFiles = [...fileState.selectedFiles];\n    let newFiles = [];\n\n    // Process all files but upload one at a time\n    for (const fileToProcess of files) {\n      // Check file format\n      const extension = fileToProcess.name.split('.').pop().toLowerCase();\n      const validExtensions = ['pdf', 'doc', 'docx'];\n      if (!validExtensions.includes(extension)) {\n        alert(`${fileToProcess.name} is not a supported file type. Please upload PDF, DOC, or DOCX files only.`);\n        continue;\n      }\n\n      // Check if file with same name exists\n      const existingIndex = updatedFiles.findIndex(file => file.name === fileToProcess.name);\n      if (existingIndex !== -1) {\n        const confirmReplace = window.confirm(`A file named \"${fileToProcess.name}\" already exists. Do you want to replace it?`);\n        if (confirmReplace) {\n          // Replace the file in our updated array\n          updatedFiles[existingIndex] = fileToProcess;\n          // Mark this file to be added to the queue\n          newFiles.push(fileToProcess);\n        }\n      } else {\n        // New file, add it to both arrays\n        updatedFiles.push(fileToProcess);\n        newFiles.push(fileToProcess);\n      }\n    }\n    if (newFiles.length > 0) {\n      // Filter out any files from the queue that are being replaced\n      const newQueue = [...fileState.uploadQueue.filter(queueFile => !newFiles.some(newFile => newFile.name === queueFile.name)), ...newFiles];\n      fileDispatch({\n        type: 'ADD_FILES',\n        payload: {\n          updatedFiles,\n          newQueue\n        }\n      });\n    }\n  }, [fileState.selectedFiles, fileState.isLoading, fileState.processingFiles, fileState.uploadQueue]);\n\n  // Process upload queue sequentially\n  useEffect(() => {\n    if (fileState.uploadQueue.length === 0) {\n      if (fileState.processingFiles) {\n        fileDispatch({\n          type: 'QUEUE_COMPLETE'\n        });\n      }\n      return;\n    }\n\n    // Process one file at a time\n    const processNextFile = async () => {\n      fileDispatch({\n        type: 'PROCESS_NEXT'\n      });\n      const fileToProcess = fileState.uploadQueue[0];\n\n      // Initialize progress for this file\n      fileDispatch({\n        type: 'FILE_PROGRESS',\n        payload: {\n          fileName: fileToProcess.name,\n          progress: 0\n        }\n      });\n\n      // Simulate upload for current file\n      await new Promise(resolve => {\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += Math.random() * 15;\n          if (progress > 100) progress = 100;\n          fileDispatch({\n            type: 'FILE_PROGRESS',\n            payload: {\n              fileName: fileToProcess.name,\n              progress: Math.floor(progress)\n            }\n          });\n          if (progress === 100) {\n            clearInterval(interval);\n            setTimeout(() => {\n              resolve();\n            }, 500);\n          }\n        }, 200);\n      });\n\n      // Remove processed file from queue\n      fileDispatch({\n        type: 'FILE_COMPLETE'\n      });\n    };\n    processNextFile();\n  }, [fileState.uploadQueue, fileState.processingFiles]);\n  useEffect(() => {\n    const uploadContainer = uploadContainerRef.current;\n    if (uploadContainer) {\n      const handleLocalDragOver = event => {\n        event.preventDefault();\n        uploadContainer.classList.add('dragover');\n      };\n      const handleLocalDragLeave = () => {\n        uploadContainer.classList.remove('dragover');\n      };\n      const handleLocalDrop = () => {\n        uploadContainer.classList.remove('dragover');\n      };\n      uploadContainer.addEventListener('dragover', handleLocalDragOver);\n      uploadContainer.addEventListener('dragleave', handleLocalDragLeave);\n      uploadContainer.addEventListener('drop', handleLocalDrop);\n      return () => {\n        uploadContainer.removeEventListener('dragover', handleLocalDragOver);\n        uploadContainer.removeEventListener('dragleave', handleLocalDragLeave);\n        uploadContainer.removeEventListener('drop', handleLocalDrop);\n      };\n    }\n  }, []);\n  useEffect(() => {\n    // Only add document-level event listeners when modal is open\n    if (!isOpen) return;\n    const handleDocumentDragOver = event => {\n      event.preventDefault();\n      if (!isDragging && !fileState.isLoading && !fileState.processingFiles) {\n        setIsDragging(true);\n      }\n    };\n    const handleDocumentDragLeave = event => {\n      event.preventDefault();\n      if (event.clientX <= 0 || event.clientY <= 0 || event.clientX >= window.innerWidth || event.clientY >= window.innerHeight) {\n        setIsDragging(false);\n      }\n    };\n    const handleDocumentDrop = event => {\n      event.preventDefault();\n      setIsDragging(false);\n\n      // Prevent file drop during loading\n      if (fileState.isLoading || fileState.processingFiles) {\n        alert(\"Please wait for the current file to complete uploading before adding new files.\");\n        return;\n      }\n      const files = Array.from(event.dataTransfer.files);\n      if (files.length > 0) {\n        processFiles(files);\n      }\n    };\n    document.addEventListener('dragover', handleDocumentDragOver);\n    document.addEventListener('dragleave', handleDocumentDragLeave);\n    document.addEventListener('drop', handleDocumentDrop);\n    return () => {\n      document.removeEventListener('dragover', handleDocumentDragOver);\n      document.removeEventListener('dragleave', handleDocumentDragLeave);\n      document.removeEventListener('drop', handleDocumentDrop);\n    };\n  }, [isDragging, processFiles, fileState.isLoading, fileState.processingFiles, isOpen]);\n  const handleFileChange = event => {\n    const files = Array.from(event.target.files);\n    if (files.length > 0) {\n      processFiles(files);\n      // Reset the file input so the same file can be selected again\n      event.target.value = '';\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    // Only show dragover effect if not currently loading\n    if (!fileState.isLoading && !fileState.processingFiles) {\n      event.dataTransfer.dropEffect = 'copy';\n    } else {\n      // Use 'none' to indicate dropping is not allowed\n      event.dataTransfer.dropEffect = 'none';\n    }\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    setIsDragging(false);\n\n    // Prevent file drop during loading\n    if (fileState.isLoading || fileState.processingFiles) {\n      alert(\"Please wait for the current file to complete uploading before adding new files.\");\n      return;\n    }\n    const files = Array.from(event.dataTransfer.files);\n    if (files.length > 0) {\n      processFiles(files);\n    }\n  };\n  const handleFileInputKeyDown = e => {\n    // Activate file input on Enter or Space\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      fileInputRef.current.click();\n    }\n  };\n  const removeFile = index => {\n    fileDispatch({\n      type: 'REMOVE_FILE',\n      payload: {\n        index\n      }\n    });\n  };\n  const handleChooseFile = () => {\n    fileInputRef.current.click();\n  };\n  const getFileIcon = fileName => {\n    const extension = fileName.split('.').pop().toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-icon pdf-icon\",\n          children: \"PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 24\n        }, this);\n      case 'doc':\n      case 'docx':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-icon doc-icon\",\n          children: \"DOC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 24\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-icon default-icon\",\n          children: \"FILE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  const getFullPageOverlay = () => {\n    if (!isDragging) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fullpage-drop-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-icon-large pdf-icon-large\",\n            children: \"FILE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 25\n          }, this), fileState.selectedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"copy-badge\",\n            children: \"Copy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"drop-title\",\n          children: \"Drop files anywhere\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"drop-subtitle\",\n          children: \"Drop file(s) to upload it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this);\n  };\n\n  // API URL for backend\n  const API_URL = \"http://localhost:8000\";\n  const API_ENDPOINT = \"http://localhost:8000/api/jobs/upload-more-cv\"; // Ensure the correct endpoint is used\n\n  const handleUploadCV = async () => {\n    if (!fileState.selectedFiles || fileState.selectedFiles.length === 0) {\n      setErrorMessage(\"Please upload at least one CV file\");\n      setShowErrorModal(true);\n      return;\n    }\n    try {\n      // Cancel any existing animation frame\n      if (progressAnimationRef.current) {\n        cancelAnimationFrame(progressAnimationRef.current);\n        progressAnimationRef.current = null;\n      }\n      setApiStatus(\"loading\");\n      setSubmitProgress(0);\n\n      // Add a small delay to ensure loading animation starts properly\n      await new Promise(resolve => setTimeout(resolve, 400));\n\n      // Create form data with job ID\n      const formData = new FormData();\n      formData.append(\"job_id\", jobId);\n\n      // Add all files\n      fileState.selectedFiles.forEach(file => {\n        formData.append(\"files\", file);\n      });\n\n      // Simulate early progress before actual upload starts\n      setSubmitProgress(15);\n\n      // Function to simulate progress during waiting time\n      let lastUpdateTime = Date.now();\n      const simulateProgress = () => {\n        if (apiStatus !== \"loading\") return; // Stop if no longer loading\n\n        const now = Date.now();\n        if (now - lastUpdateTime >= 800) {\n          setSubmitProgress(prev => {\n            const newProgress = prev + Math.random() * 1.5;\n            return Math.min(newProgress, 90);\n          });\n          lastUpdateTime = now;\n        }\n        progressAnimationRef.current = requestAnimationFrame(simulateProgress);\n      };\n\n      // Start progress simulation\n      progressAnimationRef.current = requestAnimationFrame(simulateProgress);\n\n      // Send to backend API\n      const response = await fetch(API_ENDPOINT, {\n        method: 'POST',\n        body: formData\n      });\n\n      // Clear the progress simulation\n      if (progressAnimationRef.current) {\n        cancelAnimationFrame(progressAnimationRef.current);\n        progressAnimationRef.current = null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: \"Unknown error\"\n        }));\n        throw new Error(`Server responded with ${response.status}: ${errorData.detail || errorData.error || errorData.message || (await response.text())}`);\n      }\n      const responseData = await response.json();\n      console.log(\"Server response:\", responseData);\n\n      // Set the number of uploaded CVs for success message\n      setUploadedCount(responseData.applicationCount || fileState.selectedFiles.length);\n\n      // Set the final progress based on response\n      setSubmitProgress(100);\n\n      // Immediately close the modal with the uploaded count\n      setTimeout(() => {\n        // First close the modal\n        onClose();\n\n        // Then notify parent that upload is complete\n        if (onUploadComplete && responseData.applicationCount > 0) {\n          onUploadComplete(responseData.applicationCount || fileState.selectedFiles.length);\n        }\n      }, 200);\n    } catch (error) {\n      // Clear animation frame in case of error too\n      if (progressAnimationRef.current) {\n        cancelAnimationFrame(progressAnimationRef.current);\n        progressAnimationRef.current = null;\n      }\n      console.error(\"Error uploading CV:\", error);\n      setApiStatus(\"error\");\n      setErrorMessage(error.message || \"Error uploading CV. Please try again.\");\n      setShowErrorModal(true);\n\n      // Reset API status after a short delay\n      setTimeout(() => {\n        setApiStatus(\"idle\");\n        setSubmitProgress(0);\n      }, 1000);\n    }\n  };\n  const closeSuccessModal = () => {\n    setShowSuccessModal(false);\n    // Reset the form state\n    fileDispatch({\n      type: 'RESET'\n    });\n    setApiStatus(\"idle\");\n    setSubmitProgress(0);\n  };\n  const SuccessModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": \"success-modal-title\",\n    onClick: e => e.stopPropagation() // Prevent closing of success modal\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal success-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon success-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"success-modal-title\",\n        className: \"status-title\",\n        children: \"Upload Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [uploadedCount, \" CV\", uploadedCount !== 1 ? 's' : '', \" uploaded successfully\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: closeSuccessModal,\n          autoFocus: true,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 9\n  }, this);\n  const ErrorModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": \"error-modal-title\",\n    onClick: e => e.stopPropagation() // Prevent closing of error modal\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal error-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon error-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"15\",\n            y1: \"9\",\n            x2: \"9\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"9\",\n            y1: \"9\",\n            x2: \"15\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"error-modal-title\",\n        className: \"status-title\",\n        children: \"Upload Failed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: errorMessage || \"Please try again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowErrorModal(false),\n          autoFocus: true,\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 9\n  }, this);\n  const handleCancelClick = () => {\n    // If there are files selected, show confirmation dialog\n    if (fileState.selectedFiles.length > 0) {\n      setShowConfirmModal(true);\n    } else {\n      // No files, just close the modal\n      onClose();\n    }\n  };\n  const handleConfirmDiscard = () => {\n    setShowConfirmModal(false);\n    // Reset the form state\n    fileDispatch({\n      type: 'RESET'\n    });\n    // Close the modal\n    onClose();\n  };\n  const handleCancelDiscard = () => {\n    setShowConfirmModal(false);\n    // Stay in the modal, do nothing\n  };\n  const ConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Discard Files?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Are you sure you want to discard the file upload?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: handleCancelDiscard,\n          children: \"No, Keep Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: handleConfirmDiscard,\n          children: \"Yes, Discard Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 606,\n    columnNumber: 9\n  }, this);\n\n  // Add new function to handle overlay click\n  const handleOverlayClick = e => {\n    // Only proceed if not loading/processing files\n    if (!fileState.isLoading && !fileState.processingFiles) {\n      // If there are files selected, show confirmation dialog instead of closing directly\n      if (fileState.selectedFiles.length > 0) {\n        setShowConfirmModal(true);\n      } else {\n        // No files, just close the modal\n        onClose();\n      }\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: handleOverlayClick // Change from onClick={onClose} to onClick={handleOverlayClick}\n    ,\n    role: \"dialog\",\n    \"aria-labelledby\": \"modal-title\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [getFullPageOverlay(), apiStatus === \"loading\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"api-loading-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"api-loading-content\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Uploading files...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${submitProgress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"progress-text\",\n              children: [Math.round(submitProgress), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 21\n      }, this), showSuccessModal && /*#__PURE__*/_jsxDEV(SuccessModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 38\n      }, this), showErrorModal && /*#__PURE__*/_jsxDEV(ErrorModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 36\n      }, this), showConfirmModal && /*#__PURE__*/_jsxDEV(ConfirmModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"modal-title\",\n          className: \"modal-title\",\n          children: [\"Upload Candidate CVs for \", jobTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-close\",\n          onClick: onClose,\n          \"aria-label\": \"Close\",\n          disabled: fileState.isLoading || fileState.processingFiles,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-container\",\n          ref: uploadContainerRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-dropzone-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `upload-dropzone ${fileState.isLoading || fileState.processingFiles ? 'disabled-dropzone' : ''}`,\n                onDragOver: handleDragOver,\n                onDrop: handleDrop,\n                role: \"button\",\n                tabIndex: fileState.isLoading || fileState.processingFiles ? -1 : 0,\n                \"aria-label\": \"Upload files by dropping them here or press to select files\",\n                \"aria-disabled\": fileState.isLoading || fileState.processingFiles,\n                onKeyDown: handleFileInputKeyDown,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"upload-icon-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                    className: \"upload-icon\",\n                    fill: \"none\",\n                    stroke: \"currentColor\",\n                    viewBox: \"0 0 24 24\",\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      strokeLinecap: \"round\",\n                      strokeLinejoin: \"round\",\n                      strokeWidth: \"2\",\n                      d: \"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 710,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 709,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"upload-text\",\n                  children: fileState.isLoading || fileState.processingFiles ? \"Please wait for the current upload to complete\" : \"Drag and Drop files to upload\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: fileInputRef,\n                  type: \"file\",\n                  accept: \".pdf,.doc,.docx\",\n                  multiple: true,\n                  onChange: handleFileChange,\n                  className: \"hidden-input\",\n                  disabled: fileState.isLoading || fileState.processingFiles\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `browse-button ${fileState.isLoading || fileState.processingFiles ? 'disabled-button' : ''}`,\n                  onClick: handleChooseFile,\n                  disabled: fileState.isLoading || fileState.processingFiles,\n                  children: fileState.isLoading || fileState.processingFiles ? \"Upload in Progress...\" : \"Browse Files\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"upload-subtext\",\n                  children: \"Supports PDF, DOC, DOCX\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 736,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"files-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"files-title\",\n            id: \"uploaded-files-heading\",\n            children: \"Selected Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 25\n          }, this), fileState.selectedFiles.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-files\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"no-files-text\",\n              children: \"No files selected yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"files-list\",\n            role: \"list\",\n            \"aria-labelledby\": \"uploaded-files-heading\",\n            children: fileState.selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-item\",\n              role: \"listitem\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-content\",\n                children: [getFileIcon(file.name), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"file-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"file-header\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"file-name\",\n                      title: file.name,\n                      children: file.name.length > 80 ? file.name.substring(0, 80) + '...' : file.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 764,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => removeFile(index),\n                      className: \"delete-button\",\n                      \"aria-label\": `Remove file ${file.name}`,\n                      disabled: fileState.isLoading || fileState.processingFiles,\n                      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                        className: \"delete-icon\",\n                        fill: \"none\",\n                        stroke: \"currentColor\",\n                        viewBox: \"0 0 24 24\",\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        children: /*#__PURE__*/_jsxDEV(\"path\", {\n                          strokeLinecap: \"round\",\n                          strokeLinejoin: \"round\",\n                          strokeWidth: \"2\",\n                          d: \"M6 18L18 6M6 6l12 12\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 774,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 773,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 767,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 763,\n                    columnNumber: 49\n                  }, this), fileState.isLoading && fileState.uploadProgress[file.name] !== undefined && fileState.uploadProgress[file.name] < 100 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-bar-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"progress-bar\",\n                      style: {\n                        width: `${fileState.uploadProgress[file.name]}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 780,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"progress-text\",\n                      children: [fileState.uploadProgress[file.name], \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 781,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 779,\n                    columnNumber: 53\n                  }, this) : fileState.processingFiles && fileState.uploadProgress[file.name] === undefined && fileState.uploadQueue && fileState.uploadQueue.some(queueFile => queueFile.name === file.name) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"waiting-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"waiting-text\",\n                      children: \"Waiting to upload...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 785,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 784,\n                    columnNumber: 53\n                  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"file-size\",\n                    children: [(file.size / 1024).toFixed(1), \" KB\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 762,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 41\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-button secondary-button\",\n          onClick: handleCancelClick,\n          disabled: fileState.isLoading || fileState.processingFiles,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-button primary-button\",\n          onClick: handleUploadCV,\n          disabled: fileState.selectedFiles.length === 0 || fileState.isLoading || fileState.processingFiles,\n          children: [\"Upload CV\", fileState.selectedFiles.length !== 1 ? 's' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 646,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadMoreCVModal, \"bSgdWJwL02aFwVv2udQZZfjnv7Y=\");\n_c2 = UploadMoreCVModal;\nexport default UploadMoreCVModal;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingAnimation\");\n$RefreshReg$(_c2, \"UploadMoreCVModal\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useReducer","jsxDEV","_jsxDEV","fileUploadReducer","state","action","type","selectedFiles","payload","updatedFiles","uploadQueue","newQueue","processingFiles","uploadProgress","fileName","progress","isLoading","slice","fileToRemove","index","filter","_","i","queueFile","name","Object","fromEntries","entries","key","LoadingAnimation","className","children","_jsxFileName","lineNumber","columnNumber","_c","UploadMoreCVModal","isOpen","onClose","jobId","jobTitle","onUploadComplete","_s","fileState","fileDispatch","isDragging","setIsDragging","fileInputRef","uploadContainerRef","progressAnimationRef","apiStatus","setApiStatus","submitProgress","setSubmitProgress","showSuccessModal","setShowSuccessModal","showErrorModal","setShowErrorModal","errorMessage","setErrorMessage","uploadedCount","setUploadedCount","showConfirmModal","setShowConfirmModal","document","body","style","overflow","current","cancelAnimationFrame","processFiles","files","alert","newFiles","fileToProcess","extension","split","pop","toLowerCase","validExtensions","includes","existingIndex","findIndex","file","confirmReplace","window","confirm","push","length","some","newFile","processNextFile","Promise","resolve","interval","setInterval","Math","random","floor","clearInterval","setTimeout","uploadContainer","handleLocalDragOver","event","preventDefault","classList","add","handleLocalDragLeave","remove","handleLocalDrop","addEventListener","removeEventListener","handleDocumentDragOver","handleDocumentDragLeave","clientX","clientY","innerWidth","innerHeight","handleDocumentDrop","Array","from","dataTransfer","handleFileChange","target","value","handleDragOver","dropEffect","handleDrop","handleFileInputKeyDown","e","click","removeFile","handleChooseFile","getFileIcon","getFullPageOverlay","API_URL","API_ENDPOINT","handleUploadCV","formData","FormData","append","forEach","lastUpdateTime","Date","now","simulateProgress","prev","newProgress","min","requestAnimationFrame","response","fetch","method","ok","errorData","json","catch","error","Error","status","detail","message","text","responseData","console","log","applicationCount","closeSuccessModal","SuccessModal","role","onClick","stopPropagation","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","id","autoFocus","ErrorModal","cx","cy","r","x1","y1","x2","y2","handleCancelClick","handleConfirmDiscard","handleCancelDiscard","ConfirmModal","handleOverlayClick","width","round","disabled","ref","onDragOver","onDrop","tabIndex","onKeyDown","accept","multiple","onChange","map","title","substring","undefined","size","toFixed","_c2","$RefreshReg$"],"sources":["C:/Users/ruizh/OneDrive/Desktop/EqualLens-project-1/equallens-project/src/components/UploadMoreCVModal.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useReducer } from \"react\";\r\nimport \"../components/pages/UploadCV.css\"; // Reuse existing CSS\r\nimport \"./UploadMoreCVModal.css\"; // Import the modal-specific CSS\r\nimport \"../components/pageloading.css\";\r\n\r\n// File upload reducer to manage file upload state more efficiently\r\nconst fileUploadReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_FILES':\r\n            return {\r\n                ...state,\r\n                selectedFiles: action.payload.updatedFiles,\r\n                uploadQueue: action.payload.newQueue,\r\n                processingFiles: true\r\n            };\r\n        case 'FILE_PROGRESS':\r\n            return {\r\n                ...state,\r\n                uploadProgress: {\r\n                    ...state.uploadProgress,\r\n                    [action.payload.fileName]: action.payload.progress\r\n                }\r\n            };\r\n        case 'PROCESS_NEXT':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case 'FILE_COMPLETE':\r\n            return {\r\n                ...state,\r\n                uploadQueue: state.uploadQueue.slice(1)\r\n            };\r\n        case 'QUEUE_COMPLETE':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                processingFiles: false\r\n            };\r\n        case 'REMOVE_FILE':\r\n            const fileToRemove = state.selectedFiles[action.payload.index];\r\n            return {\r\n                ...state,\r\n                selectedFiles: state.selectedFiles.filter((_, i) => i !== action.payload.index),\r\n                uploadQueue: fileToRemove ? \r\n                    state.uploadQueue.filter(queueFile => queueFile.name !== fileToRemove.name) : \r\n                    state.uploadQueue,\r\n                uploadProgress: fileToRemove ? \r\n                    // Remove the progress entry for this file\r\n                    Object.fromEntries(\r\n                        Object.entries(state.uploadProgress).filter(([key]) => key !== fileToRemove.name)\r\n                    ) : \r\n                    state.uploadProgress\r\n            };\r\n        case 'RESET':\r\n            return {\r\n                selectedFiles: [],\r\n                isLoading: false,\r\n                uploadProgress: {},\r\n                uploadQueue: [],\r\n                processingFiles: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-animation\">\r\n            <div className=\"seesaw-container\">\r\n                <div className=\"bar\"></div>\r\n                <div className=\"ball\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst UploadMoreCVModal = ({ isOpen, onClose, jobId, jobTitle, onUploadComplete }) => {\r\n    // Use reducer for file upload state management\r\n    const [fileState, fileDispatch] = useReducer(fileUploadReducer, {\r\n        selectedFiles: [],\r\n        isLoading: false,\r\n        uploadProgress: {},\r\n        uploadQueue: [],\r\n        processingFiles: false\r\n    });\r\n  \r\n    const [isDragging, setIsDragging] = useState(false); \r\n    const fileInputRef = useRef(null);\r\n    const uploadContainerRef = useRef(null);\r\n    const progressAnimationRef = useRef(null);\r\n    \r\n    // API state variables\r\n    const [apiStatus, setApiStatus] = useState(\"idle\"); // idle, loading, success, error\r\n    const [submitProgress, setSubmitProgress] = useState(0); // Track overall submission progress\r\n    \r\n    // Add state for managing success and error modals\r\n    const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n    const [showErrorModal, setShowErrorModal] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [uploadedCount, setUploadedCount] = useState(0);\r\n\r\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n    \r\n    // Hide body scrolling when modal is open\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'visible';\r\n        }\r\n        \r\n        return () => {\r\n            document.body.style.overflow = 'visible';\r\n        };\r\n    }, [isOpen]);\r\n\r\n    // Clean up animation frame on component unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            if (progressAnimationRef.current) {\r\n                cancelAnimationFrame(progressAnimationRef.current);\r\n                progressAnimationRef.current = null;\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // Process files and add to queue\r\n    const processFiles = useCallback((files) => {\r\n        // If already processing files, don't allow new uploads\r\n        if (fileState.isLoading || fileState.processingFiles) {\r\n            alert(\"Please wait for the current file to complete uploading before adding new files.\");\r\n            return;\r\n        }\r\n        \r\n        let updatedFiles = [...fileState.selectedFiles];\r\n        let newFiles = [];\r\n        \r\n        // Process all files but upload one at a time\r\n        for (const fileToProcess of files) {\r\n            // Check file format\r\n            const extension = fileToProcess.name.split('.').pop().toLowerCase();\r\n            const validExtensions = ['pdf', 'doc', 'docx'];\r\n            \r\n            if (!validExtensions.includes(extension)) {\r\n                alert(`${fileToProcess.name} is not a supported file type. Please upload PDF, DOC, or DOCX files only.`);\r\n                continue;\r\n            }\r\n\r\n            // Check if file with same name exists\r\n            const existingIndex = updatedFiles.findIndex(file => file.name === fileToProcess.name);\r\n            \r\n            if (existingIndex !== -1) {\r\n                const confirmReplace = window.confirm(`A file named \"${fileToProcess.name}\" already exists. Do you want to replace it?`);\r\n                \r\n                if (confirmReplace) {\r\n                    // Replace the file in our updated array\r\n                    updatedFiles[existingIndex] = fileToProcess;\r\n                    // Mark this file to be added to the queue\r\n                    newFiles.push(fileToProcess);\r\n                }\r\n            } else {\r\n                // New file, add it to both arrays\r\n                updatedFiles.push(fileToProcess);\r\n                newFiles.push(fileToProcess);\r\n            }\r\n        }\r\n\r\n        if (newFiles.length > 0) {\r\n            // Filter out any files from the queue that are being replaced\r\n            const newQueue = [\r\n                ...fileState.uploadQueue.filter(queueFile => \r\n                    !newFiles.some(newFile => newFile.name === queueFile.name)\r\n                ),\r\n                ...newFiles\r\n            ];\r\n            \r\n            fileDispatch({\r\n                type: 'ADD_FILES',\r\n                payload: { \r\n                    updatedFiles, \r\n                    newQueue \r\n                }\r\n            });\r\n        }\r\n    }, [fileState.selectedFiles, fileState.isLoading, fileState.processingFiles, fileState.uploadQueue]);\r\n\r\n    // Process upload queue sequentially\r\n    useEffect(() => {\r\n        if (fileState.uploadQueue.length === 0) {\r\n            if (fileState.processingFiles) {\r\n                fileDispatch({ type: 'QUEUE_COMPLETE' });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Process one file at a time\r\n        const processNextFile = async () => {\r\n            fileDispatch({ type: 'PROCESS_NEXT' });\r\n            const fileToProcess = fileState.uploadQueue[0];\r\n            \r\n            // Initialize progress for this file\r\n            fileDispatch({\r\n                type: 'FILE_PROGRESS', \r\n                payload: { fileName: fileToProcess.name, progress: 0 }\r\n            });\r\n\r\n            // Simulate upload for current file\r\n            await new Promise(resolve => {\r\n                let progress = 0;\r\n                const interval = setInterval(() => {\r\n                    progress += Math.random() * 15;\r\n                    if (progress > 100) progress = 100;\r\n\r\n                    fileDispatch({\r\n                        type: 'FILE_PROGRESS',\r\n                        payload: { fileName: fileToProcess.name, progress: Math.floor(progress) }\r\n                    });\r\n\r\n                    if (progress === 100) {\r\n                        clearInterval(interval);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, 500);\r\n                    }\r\n                }, 200);\r\n            });\r\n\r\n            // Remove processed file from queue\r\n            fileDispatch({ type: 'FILE_COMPLETE' });\r\n        };\r\n\r\n        processNextFile();\r\n    }, [fileState.uploadQueue, fileState.processingFiles]);\r\n\r\n    useEffect(() => {\r\n        const uploadContainer = uploadContainerRef.current;\r\n        \r\n        if (uploadContainer) {\r\n            const handleLocalDragOver = (event) => {\r\n                event.preventDefault();\r\n                uploadContainer.classList.add('dragover');\r\n            };\r\n\r\n            const handleLocalDragLeave = () => {\r\n                uploadContainer.classList.remove('dragover');\r\n            };\r\n\r\n            const handleLocalDrop = () => {\r\n                uploadContainer.classList.remove('dragover');\r\n            };\r\n\r\n            uploadContainer.addEventListener('dragover', handleLocalDragOver);\r\n            uploadContainer.addEventListener('dragleave', handleLocalDragLeave);\r\n            uploadContainer.addEventListener('drop', handleLocalDrop);\r\n\r\n            return () => {\r\n                uploadContainer.removeEventListener('dragover', handleLocalDragOver);\r\n                uploadContainer.removeEventListener('dragleave', handleLocalDragLeave);\r\n                uploadContainer.removeEventListener('drop', handleLocalDrop);\r\n            };\r\n        }\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        // Only add document-level event listeners when modal is open\r\n        if (!isOpen) return;\r\n\r\n        const handleDocumentDragOver = (event) => {\r\n            event.preventDefault();\r\n            if (!isDragging && !fileState.isLoading && !fileState.processingFiles) {\r\n                setIsDragging(true);\r\n            }\r\n        };\r\n\r\n        const handleDocumentDragLeave = (event) => {\r\n            event.preventDefault();\r\n            \r\n            if (event.clientX <= 0 || event.clientY <= 0 || \r\n                event.clientX >= window.innerWidth || event.clientY >= window.innerHeight) {\r\n                setIsDragging(false);\r\n            }\r\n        };\r\n\r\n        const handleDocumentDrop = (event) => {\r\n            event.preventDefault();\r\n            setIsDragging(false);\r\n            \r\n            // Prevent file drop during loading\r\n            if (fileState.isLoading || fileState.processingFiles) {\r\n                alert(\"Please wait for the current file to complete uploading before adding new files.\");\r\n                return;\r\n            }\r\n            \r\n            const files = Array.from(event.dataTransfer.files);\r\n            if (files.length > 0) {\r\n                processFiles(files);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('dragover', handleDocumentDragOver);\r\n        document.addEventListener('dragleave', handleDocumentDragLeave);\r\n        document.addEventListener('drop', handleDocumentDrop);\r\n\r\n        return () => {\r\n            document.removeEventListener('dragover', handleDocumentDragOver);\r\n            document.removeEventListener('dragleave', handleDocumentDragLeave);\r\n            document.removeEventListener('drop', handleDocumentDrop);\r\n        };\r\n    }, [isDragging, processFiles, fileState.isLoading, fileState.processingFiles, isOpen]);\r\n\r\n    const handleFileChange = (event) => {\r\n        const files = Array.from(event.target.files);\r\n        if (files.length > 0) {\r\n            processFiles(files);\r\n            // Reset the file input so the same file can be selected again\r\n            event.target.value = '';\r\n        }\r\n    };\r\n\r\n    const handleDragOver = (event) => {\r\n        event.preventDefault();\r\n        // Only show dragover effect if not currently loading\r\n        if (!fileState.isLoading && !fileState.processingFiles) {\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        } else {\r\n            // Use 'none' to indicate dropping is not allowed\r\n            event.dataTransfer.dropEffect = 'none';\r\n        }\r\n    };\r\n\r\n    const handleDrop = (event) => {\r\n        event.preventDefault();\r\n        setIsDragging(false);\r\n        \r\n        // Prevent file drop during loading\r\n        if (fileState.isLoading || fileState.processingFiles) {\r\n            alert(\"Please wait for the current file to complete uploading before adding new files.\");\r\n            return;\r\n        }\r\n        \r\n        const files = Array.from(event.dataTransfer.files);\r\n        if (files.length > 0) {\r\n            processFiles(files);\r\n        }\r\n    };\r\n\r\n    const handleFileInputKeyDown = (e) => {\r\n        // Activate file input on Enter or Space\r\n        if (e.key === 'Enter' || e.key === ' ') {\r\n            e.preventDefault();\r\n            fileInputRef.current.click();\r\n        }\r\n    };\r\n\r\n    const removeFile = (index) => {\r\n        fileDispatch({\r\n            type: 'REMOVE_FILE',\r\n            payload: { index }\r\n        });\r\n    };\r\n\r\n    const handleChooseFile = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const getFileIcon = (fileName) => {\r\n        const extension = fileName.split('.').pop().toLowerCase();\r\n\r\n        switch (extension) {\r\n            case 'pdf':\r\n                return <div className=\"file-icon pdf-icon\">PDF</div>;\r\n            case 'doc':\r\n            case 'docx':\r\n                return <div className=\"file-icon doc-icon\">DOC</div>;\r\n            default:\r\n                return <div className=\"file-icon default-icon\">FILE</div>;\r\n        }\r\n    };\r\n\r\n    const getFullPageOverlay = () => {\r\n        if (!isDragging) return null;\r\n        \r\n        return (\r\n            <div className=\"fullpage-drop-overlay\">\r\n                <div className=\"drop-content\">\r\n                    <div className=\"file-preview\">\r\n                        <div className=\"file-icon-large pdf-icon-large\">FILE</div>\r\n                        {fileState.selectedFiles.length > 0 && <div className=\"copy-badge\">Copy</div>}\r\n                    </div>\r\n                    <h2 className=\"drop-title\">Drop files anywhere</h2>\r\n                    <p className=\"drop-subtitle\">Drop file(s) to upload it</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // API URL for backend\r\n    const API_URL = \"http://localhost:8000\";\r\n    const API_ENDPOINT = \"http://localhost:8000/api/jobs/upload-more-cv\"; // Ensure the correct endpoint is used\r\n\r\n    const handleUploadCV = async () => {\r\n        if (!fileState.selectedFiles || fileState.selectedFiles.length === 0) {\r\n            setErrorMessage(\"Please upload at least one CV file\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Cancel any existing animation frame\r\n            if (progressAnimationRef.current) {\r\n                cancelAnimationFrame(progressAnimationRef.current);\r\n                progressAnimationRef.current = null;\r\n            }\r\n            \r\n            setApiStatus(\"loading\");\r\n            setSubmitProgress(0);\r\n            \r\n            // Add a small delay to ensure loading animation starts properly\r\n            await new Promise(resolve => setTimeout(resolve, 400));\r\n            \r\n            // Create form data with job ID\r\n            const formData = new FormData();\r\n            formData.append(\"job_id\", jobId);\r\n\r\n            // Add all files\r\n            fileState.selectedFiles.forEach(file => {\r\n                formData.append(\"files\", file);\r\n            });\r\n            \r\n            // Simulate early progress before actual upload starts\r\n            setSubmitProgress(15);\r\n\r\n            // Function to simulate progress during waiting time\r\n            let lastUpdateTime = Date.now();\r\n            const simulateProgress = () => {\r\n                if (apiStatus !== \"loading\") return; // Stop if no longer loading\r\n                \r\n                const now = Date.now();\r\n                if (now - lastUpdateTime >= 800) {\r\n                    setSubmitProgress(prev => {\r\n                        const newProgress = prev + (Math.random() * 1.5);\r\n                        return Math.min(newProgress, 90);\r\n                    });\r\n                    lastUpdateTime = now;\r\n                }\r\n                progressAnimationRef.current = requestAnimationFrame(simulateProgress);\r\n            };\r\n            \r\n            // Start progress simulation\r\n            progressAnimationRef.current = requestAnimationFrame(simulateProgress);\r\n            \r\n            // Send to backend API\r\n            const response = await fetch(API_ENDPOINT, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n            \r\n            // Clear the progress simulation\r\n            if (progressAnimationRef.current) {\r\n                cancelAnimationFrame(progressAnimationRef.current);\r\n                progressAnimationRef.current = null;\r\n            }\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({ error: \"Unknown error\" }));\r\n                throw new Error(`Server responded with ${response.status}: ${errorData.detail || errorData.error || errorData.message || await response.text()}`);\r\n            }\r\n            \r\n            const responseData = await response.json();\r\n            console.log(\"Server response:\", responseData);\r\n            \r\n            // Set the number of uploaded CVs for success message\r\n            setUploadedCount(responseData.applicationCount || fileState.selectedFiles.length);\r\n            \r\n            // Set the final progress based on response\r\n            setSubmitProgress(100);\r\n            \r\n            // Immediately close the modal with the uploaded count\r\n            setTimeout(() => {\r\n                // First close the modal\r\n                onClose();\r\n                \r\n                // Then notify parent that upload is complete\r\n                if (onUploadComplete && responseData.applicationCount > 0) {\r\n                    onUploadComplete(responseData.applicationCount || fileState.selectedFiles.length);\r\n                }\r\n            }, 200);\r\n            \r\n        } catch (error) {\r\n            // Clear animation frame in case of error too\r\n            if (progressAnimationRef.current) {\r\n                cancelAnimationFrame(progressAnimationRef.current);\r\n                progressAnimationRef.current = null;\r\n            }\r\n            \r\n            console.error(\"Error uploading CV:\", error);\r\n            setApiStatus(\"error\");\r\n            setErrorMessage(error.message || \"Error uploading CV. Please try again.\");\r\n            setShowErrorModal(true);\r\n            \r\n            // Reset API status after a short delay\r\n            setTimeout(() => {\r\n                setApiStatus(\"idle\");\r\n                setSubmitProgress(0);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    const closeSuccessModal = () => {\r\n        setShowSuccessModal(false);\r\n        // Reset the form state\r\n        fileDispatch({ type: 'RESET' });\r\n        setApiStatus(\"idle\");\r\n        setSubmitProgress(0);\r\n    };\r\n\r\n    const SuccessModal = () => (\r\n        <div \r\n            className=\"status-modal-overlay\" \r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n            aria-labelledby=\"success-modal-title\"\r\n            onClick={(e) => e.stopPropagation()} // Prevent closing of success modal\r\n        >\r\n            <div className=\"status-modal success-modal\">\r\n                <div className=\"status-icon success-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h3 id=\"success-modal-title\" className=\"status-title\">Upload Complete!</h3>\r\n                <p className=\"status-description\">\r\n                    <strong>{uploadedCount} CV{uploadedCount !== 1 ? 's' : ''} uploaded successfully</strong>\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={closeSuccessModal}\r\n                        autoFocus\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const ErrorModal = () => (\r\n        <div \r\n            className=\"status-modal-overlay\"\r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n            aria-labelledby=\"error-modal-title\"\r\n            onClick={(e) => e.stopPropagation()} // Prevent closing of error modal\r\n        >\r\n            <div className=\"status-modal error-modal\">\r\n                <div className=\"status-icon error-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n                        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 id=\"error-modal-title\" className=\"status-title\">Upload Failed!</h3>\r\n                <p className=\"status-message\">{errorMessage || \"Please try again\"}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => setShowErrorModal(false)}\r\n                        autoFocus\r\n                    >\r\n                        Try Again\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const handleCancelClick = () => {\r\n        // If there are files selected, show confirmation dialog\r\n        if (fileState.selectedFiles.length > 0) {\r\n            setShowConfirmModal(true);\r\n        } else {\r\n            // No files, just close the modal\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const handleConfirmDiscard = () => {\r\n        setShowConfirmModal(false);\r\n        // Reset the form state\r\n        fileDispatch({ type: 'RESET' });\r\n        // Close the modal\r\n        onClose();\r\n    };\r\n\r\n    const handleCancelDiscard = () => {\r\n        setShowConfirmModal(false);\r\n        // Stay in the modal, do nothing\r\n    };\r\n\r\n    const ConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Discard Files?</h3>\r\n                <p className=\"status-description\">Are you sure you want to discard the file upload?</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={handleCancelDiscard}>\r\n                        No, Keep Files\r\n                    </button>\r\n                    <button className=\"status-button primary-button\" onClick={handleConfirmDiscard}>\r\n                        Yes, Discard Files\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add new function to handle overlay click\r\n    const handleOverlayClick = (e) => {\r\n        // Only proceed if not loading/processing files\r\n        if (!fileState.isLoading && !fileState.processingFiles) {\r\n            // If there are files selected, show confirmation dialog instead of closing directly\r\n            if (fileState.selectedFiles.length > 0) {\r\n                setShowConfirmModal(true);\r\n            } else {\r\n                // No files, just close the modal\r\n                onClose();\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n        <div \r\n            className=\"modal-overlay\" \r\n            onClick={handleOverlayClick}  // Change from onClick={onClose} to onClick={handleOverlayClick}\r\n            role=\"dialog\"\r\n            aria-labelledby=\"modal-title\"\r\n            aria-modal=\"true\"\r\n        >\r\n            <div \r\n                className=\"modal-content\" \r\n                onClick={e => e.stopPropagation()}\r\n            >\r\n                {getFullPageOverlay()}\r\n                \r\n                {apiStatus === \"loading\" && (\r\n                    <div className=\"api-loading-overlay\">\r\n                        <div className=\"api-loading-content\">\r\n                            <LoadingAnimation />\r\n                            <p>Uploading files...</p>\r\n                            <div className=\"progress-bar-container\">\r\n                                <div \r\n                                    className=\"progress-bar\" \r\n                                    style={{ width: `${submitProgress}%` }}\r\n                                ></div>\r\n                                <span className=\"progress-text\">{Math.round(submitProgress)}%</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                \r\n                {/* Render success, error, and confirm modals */}\r\n                {showSuccessModal && <SuccessModal />}\r\n                {showErrorModal && <ErrorModal />}\r\n                {showConfirmModal && <ConfirmModal />}\r\n                \r\n                <div className=\"modal-header\">\r\n                    <h2 id=\"modal-title\" className=\"modal-title\">\r\n                        Upload Candidate CVs for {jobTitle}\r\n                    </h2>\r\n                    <button \r\n                        className=\"modal-close\" \r\n                        onClick={onClose}\r\n                        aria-label=\"Close\"\r\n                        disabled={fileState.isLoading || fileState.processingFiles}\r\n                    >\r\n                        ×\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"modal-body\">\r\n                    <div className=\"upload-container\" ref={uploadContainerRef}>\r\n                        <div className=\"upload-card\">\r\n                            <div className=\"upload-dropzone-container\">\r\n                                <div\r\n                                    className={`upload-dropzone ${(fileState.isLoading || fileState.processingFiles) ? 'disabled-dropzone' : ''}`}\r\n                                    onDragOver={handleDragOver}\r\n                                    onDrop={handleDrop}\r\n                                    role=\"button\"\r\n                                    tabIndex={fileState.isLoading || fileState.processingFiles ? -1 : 0}\r\n                                    aria-label=\"Upload files by dropping them here or press to select files\"\r\n                                    aria-disabled={fileState.isLoading || fileState.processingFiles}\r\n                                    onKeyDown={handleFileInputKeyDown}\r\n                                >\r\n                                    <div className=\"upload-icon-container\">\r\n                                        <svg className=\"upload-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"></path>\r\n                                        </svg>\r\n                                    </div>\r\n                                    <p className=\"upload-text\">\r\n                                        {(fileState.isLoading || fileState.processingFiles) \r\n                                            ? \"Please wait for the current upload to complete\" \r\n                                            : \"Drag and Drop files to upload\"}\r\n                                    </p>\r\n                                    <input\r\n                                        ref={fileInputRef}\r\n                                        type=\"file\"\r\n                                        accept=\".pdf,.doc,.docx\"\r\n                                        multiple\r\n                                        onChange={handleFileChange}\r\n                                        className=\"hidden-input\"\r\n                                        disabled={fileState.isLoading || fileState.processingFiles}\r\n                                    />\r\n                                    <button\r\n                                        className={`browse-button ${(fileState.isLoading || fileState.processingFiles) ? 'disabled-button' : ''}`}\r\n                                        onClick={handleChooseFile}\r\n                                        disabled={fileState.isLoading || fileState.processingFiles}\r\n                                    >\r\n                                        {(fileState.isLoading || fileState.processingFiles) \r\n                                            ? \"Upload in Progress...\" \r\n                                            : \"Browse Files\"}\r\n                                    </button>\r\n                                    <p className=\"upload-subtext\">Supports PDF, DOC, DOCX</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"files-container\">\r\n                        <h3 className=\"files-title\" id=\"uploaded-files-heading\">Selected Files</h3>\r\n                        {fileState.selectedFiles.length === 0 ? (\r\n                            <div className=\"no-files\">\r\n                                <p className=\"no-files-text\">No files selected yet</p>\r\n                            </div>\r\n                        ) : (\r\n                            <div \r\n                                className=\"files-list\"\r\n                                role=\"list\"\r\n                                aria-labelledby=\"uploaded-files-heading\"\r\n                            >\r\n                                {fileState.selectedFiles.map((file, index) => (\r\n                                    <div \r\n                                        key={index} \r\n                                        className=\"file-item\"\r\n                                        role=\"listitem\"\r\n                                    >\r\n                                        <div className=\"file-content\">\r\n                                            {getFileIcon(file.name)}\r\n                                            <div className=\"file-details\">\r\n                                                <div className=\"file-header\">\r\n                                                    <p className=\"file-name\" title={file.name}>\r\n                                                        {file.name.length > 80 ? file.name.substring(0, 80) + '...' : file.name}\r\n                                                    </p>\r\n                                                    <button\r\n                                                        onClick={() => removeFile(index)}\r\n                                                        className=\"delete-button\"\r\n                                                        aria-label={`Remove file ${file.name}`}\r\n                                                        disabled={fileState.isLoading || fileState.processingFiles}\r\n                                                    >\r\n                                                        <svg className=\"delete-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                                                        </svg>\r\n                                                    </button>\r\n                                                </div>\r\n                                                {fileState.isLoading && fileState.uploadProgress[file.name] !== undefined && fileState.uploadProgress[file.name] < 100 ? (\r\n                                                    <div className=\"progress-bar-container\">\r\n                                                        <div className=\"progress-bar\" style={{ width: `${fileState.uploadProgress[file.name]}%` }}></div>\r\n                                                        <span className=\"progress-text\">{fileState.uploadProgress[file.name]}%</span>\r\n                                                    </div>\r\n                                                ) : fileState.processingFiles && fileState.uploadProgress[file.name] === undefined && fileState.uploadQueue && fileState.uploadQueue.some(queueFile => queueFile.name === file.name) ? (\r\n                                                    <div className=\"waiting-container\">\r\n                                                        <p className=\"waiting-text\">Waiting to upload...</p>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <p className=\"file-size\">{(file.size / 1024).toFixed(1)} KB</p>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"modal-footer\">\r\n                    <button \r\n                        className=\"modal-button secondary-button\" \r\n                        onClick={handleCancelClick}\r\n                        disabled={fileState.isLoading || fileState.processingFiles}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button \r\n                        className=\"modal-button primary-button\"\r\n                        onClick={handleUploadCV}\r\n                        disabled={fileState.selectedFiles.length === 0 || fileState.isLoading || fileState.processingFiles}\r\n                    >\r\n                        Upload CV{fileState.selectedFiles.length !== 1 ? 's' : ''}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadMoreCVModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}