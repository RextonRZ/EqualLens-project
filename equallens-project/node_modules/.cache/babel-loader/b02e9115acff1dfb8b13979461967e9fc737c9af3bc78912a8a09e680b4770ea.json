{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruizh\\\\OneDrive\\\\Desktop\\\\EqualLens-project-1\\\\equallens-project\\\\src\\\\components\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './Dashboard.css';\nimport '../pageloading.css'; // Import the loading animation CSS\nimport UploadMoreCVModal from '../UploadMoreCVModal';\nimport RankApplicantsModal from '../RankApplicantsModal';\n\n// LoadingAnimation component for consistent loading UI across the application\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-animation\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"seesaw-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ball\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to format dates consistently throughout the application\n_c = LoadingAnimation;\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  const day = date.getDate().toString().padStart(2, '0');\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const year = date.getFullYear();\n\n  // Convert to 12-hour format with AM/PM\n  let hours = date.getHours();\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n  const seconds = date.getSeconds().toString().padStart(2, '0');\n  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds} ${ampm}`;\n};\nexport default function Dashboard() {\n  _s();\n  var _location$state, _location$state2;\n  const [jobs, setJobs] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedJob, setEditedJob] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [applicants, setApplicants] = useState([]);\n  const [jobDetailLoading, setJobDetailLoading] = useState(false); // <-- New state for job details loading\n  const [rankDetailLoading, setRankDetailLoading] = useState(false); // <-- New state for rank details loading   \n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [showRankErrorModal, setShowRankErrorModal] = useState(false);\n  const [showRankSuccessModal, setShowRankSuccessModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const descriptionTextareaRef = useRef(null); // Add reference for the textarea\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [rankPrompt, setRankPrompt] = useState(\"\");\n  const [processedJobId, setProcessedJobId] = useState(\"\"); // <-- New state for processed job ID\n\n  // Add state for department and skill editing\n  const [departmentInput, setDepartmentInput] = useState(\"\");\n  const [departmentSuggestions, setDepartmentSuggestions] = useState([]);\n  const [showDepartmentSuggestions, setShowDepartmentSuggestions] = useState(false);\n  const [skillInput, setSkillInput] = useState(\"\");\n  const [skillSuggestions, setSkillSuggestions] = useState([]);\n  const [showSkillSuggestions, setShowSkillSuggestions] = useState(false);\n\n  // Sample data for suggestions - wrapped in useMemo to avoid recreation on each render\n  const departmentOptions = useMemo(() => [\"Engineering\", \"Information Technology\", \"Marketing\", \"Finance\", \"Human Resources\", \"Sales\", \"Operations\", \"Customer Support\", \"Research & Development\", \"Legal\", \"Administration\", \"Design\", \"Product Management\", \"Business Development\", \"Data Science\"], []);\n  const skillsOptions = useMemo(() => [\"JavaScript\", \"Python\", \"Java\", \"React\", \"Node.js\", \"SQL\", \"AWS\", \"Docker\", \"DevOps\", \"Machine Learning\", \"Data Analysis\", \"Agile\", \"Scrum\", \"Project Management\", \"UI/UX Design\", \"TypeScript\", \"Go\", \"Ruby\", \"Communication\", \"Leadership\", \"Problem Solving\", \"C#\", \"PHP\", \"Angular\", \"Vue.js\", \"MongoDB\", \"GraphQL\", \"REST API\", \"Git\"], []);\n\n  // Search functionality\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchCategory, setSearchCategory] = useState('jobTitle');\n\n  // Sorting functionality\n  const [sortBy, setSortBy] = useState('latest');\n\n  // Add handler for Create New Job button\n  const handleCreateNewJob = () => {\n    // Navigate to the UploadCV page which handles job creation\n    window.location.href = \"/upload-cv\";\n\n    // If you're using React Router, you could use navigate instead:\n    // navigate(\"/upload-cv\");\n  };\n\n  // Add state for Upload CV modal\n  const [showUploadCVModal, setShowUploadCVModal] = useState(false);\n\n  // Add state for RankApplicantsModal\n  const [showRankApplicantsModal, setShowRankApplicantsModal] = useState(false);\n\n  // Get location to check for state from navigation\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract URL parameters\n  const queryParams = new URLSearchParams(location.search);\n  const urlJobId = queryParams.get('jobId');\n\n  // Check for direct navigation state from AddInterviewQuestions\n  const directNavigation = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.directToJobDetails;\n  const stateJobId = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.jobId;\n\n  // Combined job ID from either source, with state taking priority\n  const targetJobId = stateJobId || urlJobId;\n\n  // On first render, if we have state, clear it from history\n  // to prevent issues on page refresh\n  useEffect(() => {\n    var _location$state3;\n    if ((_location$state3 = location.state) !== null && _location$state3 !== void 0 && _location$state3.directToJobDetails) {\n      // Replace the current URL without the state to keep the URL clean\n      navigate(location.pathname + (targetJobId ? `?jobId=${targetJobId}` : ''), {\n        replace: true,\n        state: {}\n      });\n    }\n  }, []);\n\n  // Fetch jobs when component mounts\n  useEffect(() => {\n    const fetchJobs = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:8000/api/jobs'); // FIXED: updated to /api/jobs\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const dbJobs = await response.json();\n        setJobs(dbJobs); // Assuming dbJobs is an array of job objects\n\n        // If there's a jobId in URL or state, select that job automatically\n        // We use the combined targetJobId here\n        if (targetJobId && dbJobs.length > 0) {\n          setJobDetailLoading(true); // Show loading state immediately\n\n          const jobToSelect = dbJobs.find(job => job.jobId === targetJobId);\n          if (jobToSelect) {\n            // If coming from interview questions page via direct navigation,\n            // let's select the job right away to avoid the glitch\n            if (directNavigation) {\n              setSelectedJob(jobToSelect);\n              setEditedJob(jobToSelect);\n              fetchApplicants(jobToSelect.jobId).then(() => {\n                setJobDetailLoading(false);\n              });\n            } else {\n              // Otherwise use the original delayed approach\n              handleJobSelect(jobToSelect);\n            }\n          } else {\n            setJobDetailLoading(false);\n          }\n        }\n        setIsLoading(false);\n      } catch (err) {\n        setError(\"Failed to fetch jobs. Please try again.\");\n        setIsLoading(false);\n        console.error(\"Error fetching jobs:\", err);\n      }\n    };\n    fetchJobs();\n  }, [targetJobId, directNavigation]); // Add dependencies\n\n  // Filter jobs based on search term and category\n  const filteredJobs = jobs.filter(job => {\n    if (!searchTerm.trim()) return true;\n    const term = searchTerm.toLowerCase();\n    switch (searchCategory) {\n      case 'jobTitle':\n        return job.jobTitle.toLowerCase().includes(term);\n      case 'department':\n        return job.departments.some(dept => dept.toLowerCase().includes(term));\n      case 'requiredSkills':\n        return job.requiredSkills && job.requiredSkills.some(skill => skill.toLowerCase().includes(term));\n      default:\n        return true;\n    }\n  });\n\n  // Sort filtered jobs based on sortBy value\n  const sortedJobs = [...filteredJobs].sort((a, b) => {\n    switch (sortBy) {\n      case 'most-applications':\n        return b.applicationCount - a.applicationCount;\n      case 'latest':\n        return new Date(b.createdAt) - new Date(a.createdAt);\n      case 'oldest':\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      case 'a-z':\n        return a.jobTitle.localeCompare(b.jobTitle);\n      case 'z-a':\n        return b.jobTitle.localeCompare(a.jobTitle);\n      default:\n        return 0;\n    }\n  });\n  const handleSortChange = e => {\n    setSortBy(e.target.value);\n  };\n\n  // Fetch applicants for a selected job from the backend API\n  const fetchApplicants = async jobId => {\n    try {\n      // Fix the API endpoint to match the backend API structure\n      const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      const applicantsData = await response.json();\n\n      // Create two arrays: applicants with scores and those without\n      const applicantsWithScores = applicantsData.filter(applicant => applicant.rank_score && typeof applicant.rank_score.final_score === 'number');\n      const applicantsWithoutScores = applicantsData.filter(applicant => !applicant.rank_score || typeof applicant.rank_score.final_score !== 'number');\n\n      // Sort applicants with scores in descending order\n      const sortedApplicantsWithScores = [...applicantsWithScores].sort((a, b) => b.rank_score.final_score - a.rank_score.final_score);\n\n      // Merge the sorted applicants with the unsorted ones\n      const mergedApplicants = [...sortedApplicantsWithScores, ...applicantsWithoutScores];\n      setApplicants(mergedApplicants);\n    } catch (err) {\n      console.error(\"Error fetching applicants:\", err);\n      setApplicants([]); // Set empty array on error to prevent undefined issues\n    }\n  };\n  const fetchUnscoredApplicants = async jobId => {\n    try {\n      // Fix the API endpoint to match the backend API structure\n      const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      const applicantsData = await response.json();\n      const applicantsWithoutScores = applicantsData.filter(applicant => !applicant.rank_score || typeof applicant.rank_score.final_score !== 'number');\n      return applicantsWithoutScores;\n    } catch (err) {\n      console.error(\"Error fetching applicants:\", err);\n      setApplicants([]); // Set empty array on error to prevent undefined issues\n    }\n  };\n\n  // Fetch applicants for a selected job from the backend API\n  const fetchJob = async jobId => {\n    try {\n      // Fetch the latest job data to ensure we have the most up-to-date information\n      const jobResponse = await fetch(`http://localhost:8000/api/jobs/${jobId}`);\n      if (!jobResponse.ok) {\n        throw new Error(`Failed to fetch updated job data: ${jobResponse.status}`);\n      }\n      const updatedJobData = await jobResponse.json();\n      console.log(\"Fetched updated job data:\", updatedJobData);\n\n      // Update the selectedJob and editedJob with the latest data from backend\n      setSelectedJob(updatedJobData);\n      setEditedJob(updatedJobData);\n\n      // Update the job in the jobs array as well\n      setJobs(prevJobs => prevJobs.map(job => job.jobId === updatedJobData.jobId ? updatedJobData : job));\n    } catch (err) {\n      console.error(\"Error fetching job data:\", err);\n    }\n  };\n  const scoreApplicants = async unscoredApplicants => {\n    try {\n      // Rank new applicants based on the existing prompt\n      const response = await fetch(`http://localhost:8000/api/candidates/ranks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          weights: selectedJob.rank_weight,\n          applicants: unscoredApplicants,\n          job_document: selectedJob\n        })\n      });\n\n      // Handle potential network or server errors\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: response.statusText\n        }));\n        throw new Error(errorData.detail || `Ranking request failed: ${response.statusText}`);\n      }\n\n      // Parse applicant results\n      const scoredApplicants = await response.json();\n      return scoredApplicants;\n    } catch (err) {\n      console.error(\"Error fetching job data:\", err);\n    }\n  };\n\n  // Modify handleJobSelect to add loading effect\n  const handleJobSelect = job => {\n    setJobDetailLoading(true);\n    // Introduce a short delay to display the loading effect\n    setTimeout(() => {\n      setSelectedJob(job);\n      setEditedJob(job);\n      fetchApplicants(job.jobId).then(() => {\n        setJobDetailLoading(false);\n      });\n    }, 300);\n  };\n\n  // Modify handleBackToJobs to add a loading effect when clicking \"Back to Jobs\"\n  const handleBackToJobs = () => {\n    setJobDetailLoading(true);\n    setTimeout(() => {\n      setSelectedJob(null);\n      setIsEditing(false);\n      setApplicants([]);\n      setJobDetailLoading(false);\n    }, 300);\n  };\n\n  // Modify handleEditToggle to reset input fields when starting to edit\n  const handleEditToggle = () => {\n    // If we're starting to edit\n    if (!isEditing) {\n      // Reset the state to the current job data\n      setEditedJob(selectedJob);\n\n      // Clear any pending input in department and skill fields\n      setDepartmentInput(\"\");\n      setSkillInput(\"\");\n\n      // Schedule the textarea resize after render\n      setTimeout(() => {\n        adjustTextareaHeight();\n      }, 0);\n    }\n    setIsEditing(!isEditing);\n  };\n\n  // Function to adjust textarea height based on content\n  const adjustTextareaHeight = () => {\n    if (descriptionTextareaRef.current) {\n      descriptionTextareaRef.current.style.height = 'auto';\n      descriptionTextareaRef.current.style.height = `${descriptionTextareaRef.current.scrollHeight}px`;\n    }\n  };\n\n  // Ensure the handleSaveChanges function properly formats the data before sending\n  const handleSaveChanges = async () => {\n    try {\n      // Ensure minimumCGPA is formatted to 2 decimal places\n      const updatedJobData = {\n        ...editedJob,\n        minimumCGPA: Number(parseFloat(editedJob.minimumCGPA).toFixed(2)),\n        requiredSkills: editedJob.requiredSkills || []\n      };\n      console.log(\"Sending job update:\", updatedJobData);\n      const response = await fetch(`http://localhost:8000/api/jobs/${updatedJobData.jobId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedJobData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: \"Unknown error\"\n        }));\n        throw new Error(errorData.detail || \"Failed to update job\");\n      }\n      const updatedJob = await response.json();\n      console.log(\"Received updated job:\", updatedJob); // Debug: check what we received back\n\n      setJobs(jobs.map(job => job.jobId === updatedJob.jobId ? updatedJob : job));\n      setSelectedJob(updatedJob);\n      setIsEditing(false);\n      setModalMessage(\"Your changes have been saved successfully.\");\n      setShowSuccessModal(true);\n    } catch (err) {\n      console.error(\"Error updating job:\", err);\n      setModalMessage(err.message || \"Failed to update job. Please try again.\");\n      setShowErrorModal(true);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditedJob({\n      ...editedJob,\n      [name]: value\n    });\n\n    // Adjust height when job description changes\n    if (name === 'jobDescription' && descriptionTextareaRef.current) {\n      setTimeout(() => adjustTextareaHeight(), 0);\n    }\n  };\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n  const handleCategoryChange = e => {\n    setSearchCategory(e.target.value);\n  };\n\n  // Add new handler for \"Upload More CV\"\n  const handleUploadMoreCV = () => {\n    setShowUploadCVModal(true);\n  };\n\n  // Handle upload complete event\n  const handleUploadComplete = async count => {\n    // Close the upload CV modal first\n    setShowUploadCVModal(false);\n\n    // Set loading view\n    setRankDetailLoading(true);\n\n    // Refresh applicants data when upload is complete\n    if (selectedJob && count > 0) {\n      // Update job and applicants list\n      fetchJob(selectedJob.jobId);\n      fetchApplicants(selectedJob.jobId);\n      handleUnscoredApplicants();\n\n      // Update the local job object with the new application count\n      const updatedJob = {\n        ...selectedJob,\n        applicationCount: (selectedJob.applicationCount || 0) + count\n      };\n\n      // Update the job in both selectedJob and jobs array\n      setSelectedJob(updatedJob);\n      setJobs(prevJobs => prevJobs.map(job => job.jobId === updatedJob.jobId ? updatedJob : job));\n\n      // Set loading state to false\n      setRankDetailLoading(false);\n\n      // Show success message\n      setModalMessage(`${count} new CV${count !== 1 ? 's' : ''} uploaded successfully.`);\n\n      // Use setTimeout to ensure modal appears after the upload modal is closed\n      setTimeout(() => {\n        setShowSuccessModal(true);\n      }, 300);\n    }\n  };\n\n  // Handle scoring applicants when they are not scored but others are\n  const handleUnscoredApplicants = async () => {\n    if (selectedJob.rank_weight !== null && selectedJob.prompt !== null) {\n      // Filter out the new applicants from the existing list\n      // New applicants are those without rank_score or with an empty rank_score\n      const unscoredApplicants = await fetchUnscoredApplicants(selectedJob.jobId);\n\n      // Only proceed if there are new applicants to rank\n      if (unscoredApplicants.length > 0) {\n        // Parse applicant results\n        const scoredApplicants = await scoreApplicants(unscoredApplicants);\n\n        // Update candidate rankings if available\n        if (scoredApplicants.applicants && scoredApplicants.applicants.length > 0) {\n          for (const applicant of scoredApplicants.applicants) {\n            if (applicant.candidateId) {\n              await fetch(`http://localhost:8000/api/candidates/candidate/${applicant.candidateId}`, {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  ...applicant,\n                  rank_score: applicant.rank_score,\n                  reasoning: applicant.reasoning,\n                  job_id: selectedJob.jobId\n                })\n              });\n            }\n          }\n        }\n        fetchApplicants(selectedJob.jobId);\n      } else {\n        console.log(\"No new applicants to rank\");\n        return; // Skip the rest of the function if no new applicants\n      }\n    }\n  };\n\n  // Handle Rank Applicants button click\n  const handleRankApplicants = () => {\n    setShowRankApplicantsModal(true);\n  };\n  const handlePromptComplete = async prompt => {\n    // Close the modal first\n    setShowRankApplicantsModal(false);\n    try {\n      // Start loading state for AI processing\n      setRankDetailLoading(true);\n\n      // Reset any previous error states\n      setModalMessage(null);\n      setShowRankErrorModal(false);\n      setShowRankSuccessModal(false);\n\n      // Fetch applicants and job data to ensure latest information\n      await fetchApplicants(selectedJob.jobId);\n      await fetchJob(selectedJob.jobId);\n\n      // Validate input\n      if (!selectedJob || !prompt) {\n        throw new Error(\"Missing job or ranking prompt\");\n      }\n\n      // Check if this is a new prompt or a repeat\n      if (!(prompt === rankPrompt && selectedJob.jobId === processedJobId)) {\n        // Send ranking request to backend\n        const response = await fetch(`http://localhost:8000/api/candidates/rank`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            prompt: prompt,\n            applicants: applicants,\n            job_document: selectedJob\n          })\n        });\n\n        // Handle potential network or server errors\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({\n            detail: response.statusText\n          }));\n          throw new Error(errorData.detail || `Ranking request failed: ${response.statusText}`);\n        }\n\n        // Parse ranking results\n        const rankingResults = await response.json();\n\n        // Validate ranking results\n        if (!rankingResults || !rankingResults.weights) {\n          throw new Error(\"Invalid ranking results received\");\n        }\n\n        // Update job with new weights\n        await fetch(`http://localhost:8000/api/jobs/${selectedJob.jobId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ...selectedJob,\n            rank_weight: rankingResults.weights,\n            prompt: prompt\n          })\n        });\n\n        // Update candidate rankings if available\n        if (rankingResults.applicants && rankingResults.applicants.length > 0) {\n          for (const applicant of rankingResults.applicants) {\n            if (applicant.candidateId) {\n              await fetch(`http://localhost:8000/api/candidates/candidate/${applicant.candidateId}`, {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  ...applicant,\n                  rank_score: applicant.rank_score,\n                  reasoning: applicant.reasoning,\n                  job_id: selectedJob.jobId\n                })\n              });\n            }\n          }\n\n          // Update local applicants state\n          setApplicants(rankingResults.applicants);\n        }\n\n        // Store the new ranking prompt\n        setRankPrompt(prompt);\n\n        // Store the processed job id\n        setProcessedJobId(selectedJob.jobId);\n\n        // Show success message\n        setModalMessage(\"Applicants have been ranked based on your criteria.\");\n        setShowRankSuccessModal(true);\n      } else {\n        // Same prompt used again for the same job\n        setModalMessage(\"Using existing ranking based on the same criteria.\");\n        setShowRankSuccessModal(true);\n      }\n    } catch (error) {\n      // Centralized error handling\n      console.error(\"Error in ranking applicants:\", error);\n      setModalMessage(`Failed to rank applicants: ${error.message}`);\n      setShowRankErrorModal(true);\n    } finally {\n      // Ensure loading state is always turned off\n      setRankDetailLoading(false);\n    }\n  };\n  const handleMinimumCGPABlur = () => {\n    const value = parseFloat(editedJob.minimumCGPA);\n    if (!isNaN(value)) {\n      setEditedJob({\n        ...editedJob,\n        minimumCGPA: Number(value.toFixed(2))\n      });\n    }\n  };\n  const SuccessModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal success-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon success-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Job Updated Successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: modalMessage || \"Your changes have been saved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowSuccessModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 646,\n    columnNumber: 9\n  }, this);\n  const ErrorModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal error-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon error-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"15\",\n            y1: \"9\",\n            x2: \"9\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"9\",\n            y1: \"9\",\n            x2: \"15\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Update Failed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: modalMessage || \"Failed to update job details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowErrorModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 666,\n    columnNumber: 9\n  }, this);\n  const RankSuccessModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal success-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon success-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Rank Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: modalMessage || \"Applicants have been ranked according to the prompt.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowRankSuccessModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 687,\n    columnNumber: 9\n  }, this);\n  const RankErrorModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal error-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon error-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"15\",\n            y1: \"9\",\n            x2: \"9\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"9\",\n            y1: \"9\",\n            x2: \"15\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Rank Failed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: modalMessage || \"Failed to rank applicants.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowRankErrorModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 707,\n    columnNumber: 9\n  }, this);\n\n  // Create the confirmation modal component\n  const ConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Discard Changes?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Are you sure you want to discard your unsaved changes?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: handleCancelDiscard,\n          children: \"No, Keep Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: handleConfirmDiscard,\n          children: \"Yes, Discard Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 729,\n    columnNumber: 9\n  }, this);\n\n  // Function to check if any changes were made to the job\n  const hasChanges = () => {\n    if (!selectedJob || !editedJob) return false;\n\n    // Check basic fields\n    if (selectedJob.jobTitle !== editedJob.jobTitle) return true;\n    if (selectedJob.jobDescription !== editedJob.jobDescription) return true;\n    if (selectedJob.minimumCGPA !== editedJob.minimumCGPA) return true;\n\n    // Check arrays (departments and skills)\n    if (selectedJob.departments.length !== editedJob.departments.length) return true;\n    if (selectedJob.requiredSkills.length !== editedJob.requiredSkills.length) return true;\n\n    // Check if departments have changed\n    for (let i = 0; i < selectedJob.departments.length; i++) {\n      if (!editedJob.departments.includes(selectedJob.departments[i])) return true;\n    }\n\n    // Check if required skills have changed\n    for (let i = 0; i < selectedJob.requiredSkills.length; i++) {\n      if (!editedJob.requiredSkills.includes(selectedJob.requiredSkills[i])) return true;\n    }\n    return false;\n  };\n  const handleCancelClick = () => {\n    if (hasChanges()) {\n      setShowConfirmModal(true);\n    } else {\n      // No changes, just exit edit mode\n      handleCancelEdit();\n    }\n  };\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditedJob(selectedJob); // Reset changes to original job\n    setDepartmentInput(\"\");\n    setSkillInput(\"\");\n  };\n  const handleConfirmDiscard = () => {\n    setShowConfirmModal(false);\n    handleCancelEdit();\n  };\n  const handleCancelDiscard = () => {\n    setShowConfirmModal(false);\n    // Stay in edit mode, do nothing\n  };\n\n  // Filter suggestions based on input\n  useEffect(() => {\n    if (departmentInput && isEditing) {\n      const filtered = departmentOptions.filter(option => option.toLowerCase().includes(departmentInput.toLowerCase()));\n      setDepartmentSuggestions(filtered);\n      setShowDepartmentSuggestions(filtered.length > 0);\n    } else {\n      setShowDepartmentSuggestions(false);\n    }\n  }, [departmentInput, departmentOptions, isEditing]);\n  useEffect(() => {\n    if (skillInput && isEditing) {\n      const filtered = skillsOptions.filter(option => option.toLowerCase().includes(skillInput.toLowerCase()));\n      setSkillSuggestions(filtered);\n      setShowSkillSuggestions(filtered.length > 0);\n    } else {\n      setShowSkillSuggestions(false);\n    }\n  }, [skillInput, skillsOptions, isEditing]);\n\n  // Close suggestions when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (!event.target.closest('.suggestion-container')) {\n        setShowDepartmentSuggestions(false);\n        setShowSkillSuggestions(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Department handlers\n  const handleDepartmentSelect = department => {\n    if (!editedJob.departments.includes(department)) {\n      setEditedJob({\n        ...editedJob,\n        departments: [...editedJob.departments, department]\n      });\n    }\n    setDepartmentInput(\"\");\n    setShowDepartmentSuggestions(false);\n  };\n  const handleAddDepartment = () => {\n    if (departmentInput.trim() && !editedJob.departments.includes(departmentInput.trim())) {\n      setEditedJob({\n        ...editedJob,\n        departments: [...editedJob.departments, departmentInput.trim()]\n      });\n      setDepartmentInput(\"\");\n    }\n  };\n  const handleDepartmentKeyPress = e => {\n    if (e.key === 'Enter' && departmentInput.trim()) {\n      e.preventDefault();\n      handleAddDepartment();\n    }\n  };\n  const removeDepartment = department => {\n    setEditedJob({\n      ...editedJob,\n      departments: editedJob.departments.filter(dept => dept !== department)\n    });\n  };\n\n  // Skill handlers\n  const handleSkillSelect = skill => {\n    if (!editedJob.requiredSkills.includes(skill)) {\n      const updatedSkills = [...editedJob.requiredSkills, skill];\n      setEditedJob({\n        ...editedJob,\n        requiredSkills: updatedSkills\n      });\n    }\n    setSkillInput(\"\");\n    setShowSkillSuggestions(false);\n  };\n  const handleAddSkill = () => {\n    if (skillInput.trim() && !editedJob.requiredSkills.includes(skillInput.trim())) {\n      const updatedSkills = [...editedJob.requiredSkills, skillInput.trim()];\n      setEditedJob({\n        ...editedJob,\n        requiredSkills: updatedSkills\n      });\n      setSkillInput(\"\");\n    }\n  };\n  const handleSkillKeyPress = e => {\n    if (e.key === 'Enter' && skillInput.trim()) {\n      e.preventDefault();\n      handleAddSkill();\n    }\n  };\n  const removeSkill = skill => {\n    const updatedSkills = editedJob.requiredSkills.filter(s => s !== skill);\n    setEditedJob({\n      ...editedJob,\n      requiredSkills: updatedSkills\n    });\n    console.log(\"After removing skill:\", editedJob.requiredSkills); // Debug logging\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '80vh',\n        backgroundColor: 'rgb(255, 255, 255)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: \"Loading jobs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Add loading state for job details view\n  if (selectedJob && jobDetailLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '80vh',\n        backgroundColor: 'rgb(255, 255, 255)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: \"Loading job details...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Add loading state for rank details view\n  if (selectedJob && rankDetailLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '80vh',\n        backgroundColor: 'rgb(255, 255, 255)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: \"Processing scores...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 958,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [showSuccessModal && /*#__PURE__*/_jsxDEV(SuccessModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 34\n    }, this), showErrorModal && /*#__PURE__*/_jsxDEV(ErrorModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 988,\n      columnNumber: 32\n    }, this), showRankSuccessModal && /*#__PURE__*/_jsxDEV(RankSuccessModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 38\n    }, this), showRankErrorModal && /*#__PURE__*/_jsxDEV(RankErrorModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 36\n    }, this), showConfirmModal && /*#__PURE__*/_jsxDEV(ConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 991,\n      columnNumber: 34\n    }, this), showUploadCVModal && /*#__PURE__*/_jsxDEV(UploadMoreCVModal // Updated component name\n    , {\n      isOpen: showUploadCVModal,\n      onClose: () => setShowUploadCVModal(false),\n      jobId: selectedJob === null || selectedJob === void 0 ? void 0 : selectedJob.jobId,\n      jobTitle: selectedJob === null || selectedJob === void 0 ? void 0 : selectedJob.jobTitle,\n      onUploadComplete: handleUploadComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 17\n    }, this), showRankApplicantsModal && /*#__PURE__*/_jsxDEV(RankApplicantsModal, {\n      isOpen: showRankApplicantsModal,\n      onClose: () => setShowRankApplicantsModal(false),\n      jobId: selectedJob === null || selectedJob === void 0 ? void 0 : selectedJob.jobId,\n      jobTitle: selectedJob === null || selectedJob === void 0 ? void 0 : selectedJob.jobTitle,\n      onSubmit: handlePromptComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 17\n    }, this), !selectedJob ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Job Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-job-button\",\n          onClick: handleCreateNewJob,\n          children: \"Create New Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-input-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"search-input\",\n            placeholder: \"Search jobs...\",\n            value: searchTerm,\n            onChange: handleSearchChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"search-category\",\n            value: searchCategory,\n            onChange: handleCategoryChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"jobTitle\",\n              children: \"Job Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1031,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"department\",\n              children: \"Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1032,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"requiredSkills\",\n              children: \"Required Skills\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1033,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sort-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sort-select\",\n            children: \"Sort by:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1038,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"sort-select\",\n            className: \"sort-select\",\n            value: sortBy,\n            onChange: handleSortChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"latest\",\n              children: \"Latest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1045,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"oldest\",\n              children: \"Oldest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1046,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"most-applications\",\n              children: \"Most Applications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"a-z\",\n              children: \"A-Z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1048,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"z-a\",\n              children: \"Z-A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1039,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jobs-list-single-column\",\n        children: sortedJobs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-jobs\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No jobs found matching your search.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 29\n        }, this) : sortedJobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-card-row\",\n          onClick: () => handleJobSelect(job),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-card-main-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"job-card-title\",\n              children: job.jobTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"job-card-description\",\n              children: job.jobDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1068,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-card-departments\",\n              children: job.departments.map((dept, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"department-tag\",\n                children: dept\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1071,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1069,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1066,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-card-side-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"job-card-date\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detail-label\",\n                children: \"Posted: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1077,\n                columnNumber: 45\n              }, this), formatDate(job.createdAt)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1076,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"job-card-applications\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detail-label\",\n                children: \"Applications: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 45\n              }, this), job.applicationCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-card-skills\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detail-label\",\n                children: \"Required Skills: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"skills-tags\",\n                children: job.requiredSkills && job.requiredSkills.map((skill, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"skill-tag\",\n                  children: skill\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1088,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1084,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1075,\n            columnNumber: 37\n          }, this)]\n        }, job.jobId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-detail-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackToJobs,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"back-icon\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          viewBox: \"0 0 24 24\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: \"2\",\n            d: \"M15 19l-7-7 7-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 25\n        }, this), \"Back\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-detail-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedJob.jobTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-actions\",\n          children: !isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-job-button\",\n              onClick: handleEditToggle,\n              children: \"Edit Job\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1111,\n              columnNumber: 37\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-button\",\n              onClick: handleCancelClick,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1117,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-button\",\n              onClick: handleSaveChanges,\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-detail-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-info-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Job Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 33\n            }, this), !isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"interview-questions-button\",\n              onClick: () => window.location.href = `/add-interview-questions?jobId=${selectedJob.jobId}`,\n              children: \"Interview Questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 29\n          }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-edit-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Job Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1148,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"jobTitle\",\n                value: editedJob.jobTitle,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1149,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Job Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                name: \"jobDescription\",\n                value: editedJob.jobDescription,\n                onChange: handleInputChange,\n                ref: descriptionTextareaRef,\n                className: \"auto-resize-textarea\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1159,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1157,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Minimum CGPA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1169,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"minimumCGPA\",\n                value: editedJob.minimumCGPA,\n                onChange: handleInputChange,\n                onBlur: handleMinimumCGPABlur,\n                step: \"0.01\",\n                min: \"0\",\n                max: \"4.0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1170,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Departments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1184,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"suggestion-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"input-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: \"form-input\",\n                    value: departmentInput,\n                    onChange: e => setDepartmentInput(e.target.value),\n                    onKeyPress: handleDepartmentKeyPress,\n                    placeholder: \"Enter a department\",\n                    onBlur: () => {\n                      setTimeout(() => {\n                        setShowDepartmentSuggestions(false);\n                      }, 200);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1187,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"add-button\",\n                    onClick: handleAddDepartment,\n                    disabled: !departmentInput.trim(),\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1200,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1186,\n                  columnNumber: 45\n                }, this), showDepartmentSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"suggestions-list\",\n                  children: departmentSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    onMouseDown: e => {\n                      e.preventDefault();\n                      handleDepartmentSelect(suggestion);\n                    },\n                    children: suggestion\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1212,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1210,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1185,\n                columnNumber: 41\n              }, this), editedJob.departments && editedJob.departments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tags-container departments-container\",\n                children: editedJob.departments.map((department, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tag\",\n                  children: [department, /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"tag-remove\",\n                    onClick: () => removeDepartment(department),\n                    children: \"\\xD7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1230,\n                    columnNumber: 57\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1228,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1183,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Required Skills\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1245,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"suggestion-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"input-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: \"form-input\",\n                    value: skillInput,\n                    onChange: e => setSkillInput(e.target.value),\n                    onKeyPress: handleSkillKeyPress,\n                    placeholder: \"Enter a skill\",\n                    onBlur: () => {\n                      setTimeout(() => {\n                        setShowSkillSuggestions(false);\n                      }, 200);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1248,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"add-button\",\n                    onClick: handleAddSkill,\n                    disabled: !skillInput.trim(),\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1261,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1247,\n                  columnNumber: 45\n                }, this), showSkillSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"suggestions-list\",\n                  children: skillSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    onMouseDown: e => {\n                      e.preventDefault();\n                      handleSkillSelect(suggestion);\n                    },\n                    children: suggestion\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1273,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1271,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 41\n              }, this), editedJob.requiredSkills && editedJob.requiredSkills.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tags-container skills-container\",\n                children: editedJob.requiredSkills.map((skill, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tag\",\n                  children: [skill, /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"tag-remove\",\n                    onClick: () => removeSkill(skill),\n                    children: \"\\xD7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1291,\n                    columnNumber: 57\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1289,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1244,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-label\",\n                children: \"Posted:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1307,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-value\",\n                children: formatDate(selectedJob.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1308,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1306,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-label\",\n                children: \"Departments:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"departments-display\",\n                children: selectedJob.departments.map((dept, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"department-tag\",\n                  children: dept\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1315,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1313,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-label\",\n                children: \"Minimum CGPA:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1321,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-value\",\n                children: selectedJob.minimumCGPA.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1322,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1320,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-label\",\n                children: \"Required Skills:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1326,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"skills-display\",\n                children: selectedJob.requiredSkills && selectedJob.requiredSkills.map((skill, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"skill-tag\",\n                  children: skill\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1329,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1327,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1325,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-group description-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-label\",\n                children: \"Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1335,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"info-value\",\n                children: selectedJob.jobDescription\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1336,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1334,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1305,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"applicants-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"applicants-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Applicants (\", applicants.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1344,\n              columnNumber: 33\n            }, this), !isEditing && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"applicants-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"rank-button\",\n                onClick: handleRankApplicants,\n                children: \"Rank Applicants\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1347,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"upload-more-cv-button\",\n                onClick: handleUploadMoreCV,\n                children: \"Upload More CV\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1350,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1346,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 29\n          }, this), applicants.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-applicants\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No applications have been received for this job yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1359,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1358,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"applicants-list\",\n            children: applicants.map(applicant => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"applicant-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"applicant-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: renderApplicantID(applicant)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1366,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"applicant-email\",\n                  children: 'CV Uploaded on ' + renderApplicantSubmitDate(applicant)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1367,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1365,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"applicant-status-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-badge ${applicant.status || 'new'}`,\n                  children: applicant.status || 'new'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1371,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"rank-score-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"rank-score-label\",\n                    children: \"Score: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1375,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"rank-score-value\",\n                    children: applicant.rank_score && applicant.rank_score.final_score ? applicant.rank_score.final_score.toFixed(2) : \"N/A\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1376,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1374,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"view-profile-button\",\n                  onClick: () => navigate(`/dashboard/${selectedJob.jobId}/${applicant.candidateId}`),\n                  children: \"Full Profile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1382,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1370,\n                columnNumber: 45\n              }, this)]\n            }, applicant.applicationId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1364,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1362,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1342,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1099,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 986,\n    columnNumber: 9\n  }, this);\n}\n\n// Improved applicant data rendering with fallbacks and debugging\n_s(Dashboard, \"5xizxyj+yQHgNFOroYCEKi7RE3A=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c2 = Dashboard;\nconst renderApplicantID = applicant => {\n  // Directly return candidateId instead of name\n  return applicant.candidateId || \"ID Not Available\";\n};\nconst renderApplicantSubmitDate = applicant => {\n  // Check multiple possible locations for the upload date\n  let uploadDate = null;\n\n  // Try direct uploadedAt property\n  if (applicant.uploadedAt) {\n    uploadDate = applicant.uploadedAt;\n  }\n  // Try applicationDate property (often used for timestamps in applications)\n  else if (applicant.applicationDate) {\n    uploadDate = applicant.applicationDate;\n  }\n  // Try nested locations\n  else if (applicant.candidateInfo && applicant.candidateInfo.uploadedAt) {\n    uploadDate = applicant.candidateInfo.uploadedAt;\n  }\n  // Try extracted text data\n  else if (applicant.extractedText && applicant.extractedText.uploadedAt) {\n    uploadDate = applicant.extractedText.uploadedAt;\n  }\n  // Look for Firebase timestamp format (could be in seconds or milliseconds)\n  else if (applicant.timestamp) {\n    // Firebase timestamps can be objects with seconds and nanoseconds\n    if (typeof applicant.timestamp === 'object' && applicant.timestamp.seconds) {\n      uploadDate = new Date(applicant.timestamp.seconds * 1000).toISOString();\n    } else {\n      uploadDate = applicant.timestamp;\n    }\n  }\n\n  // If we found a date value, format it\n  if (uploadDate) {\n    return formatDate(uploadDate);\n  }\n\n  // For debugging, log the full applicant object to see its structure\n  console.log(\"Applicant structure for debugging upload date:\", applicant);\n  return \"Upload Date Not Available\";\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingAnimation\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useLocation","useNavigate","UploadMoreCVModal","RankApplicantsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingAnimation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","formatDate","dateString","date","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","hours","getHours","ampm","minutes","getMinutes","seconds","getSeconds","Dashboard","_s","_location$state","_location$state2","jobs","setJobs","selectedJob","setSelectedJob","isEditing","setIsEditing","editedJob","setEditedJob","isLoading","setIsLoading","error","setError","applicants","setApplicants","jobDetailLoading","setJobDetailLoading","rankDetailLoading","setRankDetailLoading","showSuccessModal","setShowSuccessModal","showErrorModal","setShowErrorModal","showRankErrorModal","setShowRankErrorModal","showRankSuccessModal","setShowRankSuccessModal","modalMessage","setModalMessage","descriptionTextareaRef","showConfirmModal","setShowConfirmModal","rankPrompt","setRankPrompt","processedJobId","setProcessedJobId","departmentInput","setDepartmentInput","departmentSuggestions","setDepartmentSuggestions","showDepartmentSuggestions","setShowDepartmentSuggestions","skillInput","setSkillInput","skillSuggestions","setSkillSuggestions","showSkillSuggestions","setShowSkillSuggestions","departmentOptions","skillsOptions","searchTerm","setSearchTerm","searchCategory","setSearchCategory","sortBy","setSortBy","handleCreateNewJob","window","location","href","showUploadCVModal","setShowUploadCVModal","showRankApplicantsModal","setShowRankApplicantsModal","navigate","queryParams","URLSearchParams","search","urlJobId","get","directNavigation","state","directToJobDetails","stateJobId","jobId","targetJobId","_location$state3","pathname","replace","fetchJobs","response","fetch","ok","Error","dbJobs","json","length","jobToSelect","find","job","fetchApplicants","then","handleJobSelect","err","console","filteredJobs","filter","trim","term","toLowerCase","jobTitle","includes","departments","some","dept","requiredSkills","skill","sortedJobs","sort","a","b","applicationCount","createdAt","localeCompare","handleSortChange","e","target","value","status","applicantsData","applicantsWithScores","applicant","rank_score","final_score","applicantsWithoutScores","sortedApplicantsWithScores","mergedApplicants","fetchUnscoredApplicants","fetchJob","jobResponse","updatedJobData","log","prevJobs","map","scoreApplicants","unscoredApplicants","method","headers","body","JSON","stringify","weights","rank_weight","job_document","errorData","catch","detail","statusText","scoredApplicants","setTimeout","handleBackToJobs","handleEditToggle","adjustTextareaHeight","current","style","height","scrollHeight","handleSaveChanges","minimumCGPA","Number","parseFloat","toFixed","updatedJob","message","handleInputChange","name","handleSearchChange","handleCategoryChange","handleUploadMoreCV","handleUploadComplete","count","handleUnscoredApplicants","prompt","candidateId","reasoning","job_id","handleRankApplicants","handlePromptComplete","rankingResults","handleMinimumCGPABlur","isNaN","SuccessModal","role","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","onClick","ErrorModal","cx","cy","r","x1","y1","x2","y2","RankSuccessModal","RankErrorModal","ConfirmModal","handleCancelDiscard","handleConfirmDiscard","hasChanges","jobDescription","i","handleCancelClick","handleCancelEdit","filtered","option","handleClickOutside","event","closest","document","addEventListener","removeEventListener","handleDepartmentSelect","department","handleAddDepartment","handleDepartmentKeyPress","key","preventDefault","removeDepartment","handleSkillSelect","updatedSkills","handleAddSkill","handleSkillKeyPress","removeSkill","s","display","justifyContent","alignItems","minHeight","backgroundColor","textAlign","marginTop","reload","isOpen","onClose","onUploadComplete","onSubmit","type","placeholder","onChange","htmlFor","id","index","ref","onBlur","step","min","max","onKeyPress","disabled","suggestion","onMouseDown","renderApplicantID","renderApplicantSubmitDate","applicationId","_c2","uploadDate","uploadedAt","applicationDate","candidateInfo","extractedText","timestamp","toISOString","$RefreshReg$"],"sources":["C:/Users/ruizh/OneDrive/Desktop/EqualLens-project-1/equallens-project/src/components/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport './Dashboard.css';\r\nimport '../pageloading.css'; // Import the loading animation CSS\r\nimport UploadMoreCVModal from '../UploadMoreCVModal';\r\nimport RankApplicantsModal from '../RankApplicantsModal';\r\n\r\n// LoadingAnimation component for consistent loading UI across the application\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-animation\">\r\n            <div className=\"seesaw-container\">\r\n                <div className=\"bar\"></div>\r\n                <div className=\"ball\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to format dates consistently throughout the application\r\nconst formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    // Convert to 12-hour format with AM/PM\r\n    let hours = date.getHours();\r\n    const ampm = hours >= 12 ? 'PM' : 'AM';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12; // the hour '0' should be '12'\r\n    const minutes = date.getMinutes().toString().padStart(2, '0');\r\n    const seconds = date.getSeconds().toString().padStart(2, '0');\r\n\r\n    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds} ${ampm}`;\r\n};\r\n\r\nexport default function Dashboard() {\r\n    const [jobs, setJobs] = useState([]);\r\n    const [selectedJob, setSelectedJob] = useState(null);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [editedJob, setEditedJob] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [applicants, setApplicants] = useState([]);\r\n    const [jobDetailLoading, setJobDetailLoading] = useState(false);  // <-- New state for job details loading\r\n    const [rankDetailLoading, setRankDetailLoading] = useState(false);  // <-- New state for rank details loading   \r\n    const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n    const [showErrorModal, setShowErrorModal] = useState(false);\r\n    const [showRankErrorModal, setShowRankErrorModal] = useState(false);\r\n    const [showRankSuccessModal, setShowRankSuccessModal] = useState(false);\r\n    const [modalMessage, setModalMessage] = useState(\"\");\r\n    const descriptionTextareaRef = useRef(null); // Add reference for the textarea\r\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n    const [rankPrompt, setRankPrompt] = useState(\"\");\r\n    const [processedJobId, setProcessedJobId] = useState(\"\");  // <-- New state for processed job ID\r\n\r\n    // Add state for department and skill editing\r\n    const [departmentInput, setDepartmentInput] = useState(\"\");\r\n    const [departmentSuggestions, setDepartmentSuggestions] = useState([]);\r\n    const [showDepartmentSuggestions, setShowDepartmentSuggestions] = useState(false);\r\n\r\n    const [skillInput, setSkillInput] = useState(\"\");\r\n    const [skillSuggestions, setSkillSuggestions] = useState([]);\r\n    const [showSkillSuggestions, setShowSkillSuggestions] = useState(false);\r\n\r\n    // Sample data for suggestions - wrapped in useMemo to avoid recreation on each render\r\n    const departmentOptions = useMemo(() => [\r\n        \"Engineering\", \"Information Technology\", \"Marketing\", \"Finance\", \"Human Resources\",\r\n        \"Sales\", \"Operations\", \"Customer Support\", \"Research & Development\", \"Legal\",\r\n        \"Administration\", \"Design\", \"Product Management\", \"Business Development\", \"Data Science\"\r\n    ], []);\r\n\r\n    const skillsOptions = useMemo(() => [\r\n        \"JavaScript\", \"Python\", \"Java\", \"React\", \"Node.js\", \"SQL\", \"AWS\", \"Docker\",\r\n        \"DevOps\", \"Machine Learning\", \"Data Analysis\", \"Agile\", \"Scrum\",\r\n        \"Project Management\", \"UI/UX Design\", \"TypeScript\", \"Go\", \"Ruby\",\r\n        \"Communication\", \"Leadership\", \"Problem Solving\", \"C#\", \"PHP\", \"Angular\",\r\n        \"Vue.js\", \"MongoDB\", \"GraphQL\", \"REST API\", \"Git\"\r\n    ], []);\r\n\r\n    // Search functionality\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchCategory, setSearchCategory] = useState('jobTitle');\r\n\r\n    // Sorting functionality\r\n    const [sortBy, setSortBy] = useState('latest');\r\n\r\n    // Add handler for Create New Job button\r\n    const handleCreateNewJob = () => {\r\n        // Navigate to the UploadCV page which handles job creation\r\n        window.location.href = \"/upload-cv\";\r\n\r\n        // If you're using React Router, you could use navigate instead:\r\n        // navigate(\"/upload-cv\");\r\n    };\r\n\r\n    // Add state for Upload CV modal\r\n    const [showUploadCVModal, setShowUploadCVModal] = useState(false);\r\n\r\n    // Add state for RankApplicantsModal\r\n    const [showRankApplicantsModal, setShowRankApplicantsModal] = useState(false);\r\n\r\n    // Get location to check for state from navigation\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    // Extract URL parameters\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const urlJobId = queryParams.get('jobId');\r\n\r\n    // Check for direct navigation state from AddInterviewQuestions\r\n    const directNavigation = location.state?.directToJobDetails;\r\n    const stateJobId = location.state?.jobId;\r\n\r\n    // Combined job ID from either source, with state taking priority\r\n    const targetJobId = stateJobId || urlJobId;\r\n\r\n    // On first render, if we have state, clear it from history\r\n    // to prevent issues on page refresh\r\n    useEffect(() => {\r\n        if (location.state?.directToJobDetails) {\r\n            // Replace the current URL without the state to keep the URL clean\r\n            navigate(location.pathname + (targetJobId ? `?jobId=${targetJobId}` : ''),\r\n                { replace: true, state: {} });\r\n        }\r\n    }, []);\r\n\r\n    // Fetch jobs when component mounts\r\n    useEffect(() => {\r\n        const fetchJobs = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await fetch('http://localhost:8000/api/jobs'); // FIXED: updated to /api/jobs\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                const dbJobs = await response.json();\r\n                setJobs(dbJobs); // Assuming dbJobs is an array of job objects\r\n\r\n                // If there's a jobId in URL or state, select that job automatically\r\n                // We use the combined targetJobId here\r\n                if (targetJobId && dbJobs.length > 0) {\r\n                    setJobDetailLoading(true); // Show loading state immediately\r\n\r\n                    const jobToSelect = dbJobs.find(job => job.jobId === targetJobId);\r\n                    if (jobToSelect) {\r\n                        // If coming from interview questions page via direct navigation,\r\n                        // let's select the job right away to avoid the glitch\r\n                        if (directNavigation) {\r\n                            setSelectedJob(jobToSelect);\r\n                            setEditedJob(jobToSelect);\r\n                            fetchApplicants(jobToSelect.jobId).then(() => {\r\n                                setJobDetailLoading(false);\r\n                            });\r\n                        } else {\r\n                            // Otherwise use the original delayed approach\r\n                            handleJobSelect(jobToSelect);\r\n                        }\r\n                    } else {\r\n                        setJobDetailLoading(false);\r\n                    }\r\n                }\r\n\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setError(\"Failed to fetch jobs. Please try again.\");\r\n                setIsLoading(false);\r\n                console.error(\"Error fetching jobs:\", err);\r\n            }\r\n        };\r\n        fetchJobs();\r\n    }, [targetJobId, directNavigation]); // Add dependencies\r\n\r\n    // Filter jobs based on search term and category\r\n    const filteredJobs = jobs.filter(job => {\r\n        if (!searchTerm.trim()) return true;\r\n\r\n        const term = searchTerm.toLowerCase();\r\n\r\n        switch (searchCategory) {\r\n            case 'jobTitle':\r\n                return job.jobTitle.toLowerCase().includes(term);\r\n            case 'department':\r\n                return job.departments.some(dept => dept.toLowerCase().includes(term));\r\n            case 'requiredSkills':\r\n                return job.requiredSkills && job.requiredSkills.some(skill => skill.toLowerCase().includes(term));\r\n            default:\r\n                return true;\r\n        }\r\n    });\r\n\r\n    // Sort filtered jobs based on sortBy value\r\n    const sortedJobs = [...filteredJobs].sort((a, b) => {\r\n        switch (sortBy) {\r\n            case 'most-applications':\r\n                return b.applicationCount - a.applicationCount;\r\n            case 'latest':\r\n                return new Date(b.createdAt) - new Date(a.createdAt);\r\n            case 'oldest':\r\n                return new Date(a.createdAt) - new Date(b.createdAt);\r\n            case 'a-z':\r\n                return a.jobTitle.localeCompare(b.jobTitle);\r\n            case 'z-a':\r\n                return b.jobTitle.localeCompare(a.jobTitle);\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    const handleSortChange = (e) => {\r\n        setSortBy(e.target.value);\r\n    };\r\n\r\n    // Fetch applicants for a selected job from the backend API\r\n    const fetchApplicants = async (jobId) => {\r\n        try {\r\n            // Fix the API endpoint to match the backend API structure\r\n            const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\r\n            if (!response.ok) {\r\n                throw new Error(`Network response was not ok: ${response.status}`);\r\n            }\r\n            const applicantsData = await response.json();\r\n\r\n            // Create two arrays: applicants with scores and those without\r\n            const applicantsWithScores = applicantsData.filter(\r\n                applicant => applicant.rank_score && typeof applicant.rank_score.final_score === 'number'\r\n            );\r\n            const applicantsWithoutScores = applicantsData.filter(\r\n                applicant => !applicant.rank_score || typeof applicant.rank_score.final_score !== 'number'\r\n            );\r\n\r\n            // Sort applicants with scores in descending order\r\n            const sortedApplicantsWithScores = [...applicantsWithScores].sort(\r\n                (a, b) => b.rank_score.final_score - a.rank_score.final_score\r\n            );\r\n\r\n            // Merge the sorted applicants with the unsorted ones\r\n            const mergedApplicants = [...sortedApplicantsWithScores, ...applicantsWithoutScores];\r\n            \r\n            setApplicants(mergedApplicants);\r\n        } catch (err) {\r\n            console.error(\"Error fetching applicants:\", err);\r\n            setApplicants([]);  // Set empty array on error to prevent undefined issues\r\n        }\r\n    };\r\n\r\n    const fetchUnscoredApplicants = async (jobId) => {\r\n        try {\r\n            // Fix the API endpoint to match the backend API structure\r\n            const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\r\n            if (!response.ok) {\r\n                throw new Error(`Network response was not ok: ${response.status}`);\r\n            }\r\n            const applicantsData = await response.json();\r\n\r\n            const applicantsWithoutScores = applicantsData.filter(\r\n                applicant => !applicant.rank_score || typeof applicant.rank_score.final_score !== 'number'\r\n            );\r\n\r\n            return applicantsWithoutScores;\r\n        } catch (err) {\r\n            console.error(\"Error fetching applicants:\", err);\r\n            setApplicants([]);  // Set empty array on error to prevent undefined issues\r\n        }\r\n    };\r\n\r\n    // Fetch applicants for a selected job from the backend API\r\n    const fetchJob = async (jobId) => {\r\n        try {\r\n            // Fetch the latest job data to ensure we have the most up-to-date information\r\n            const jobResponse = await fetch(`http://localhost:8000/api/jobs/${jobId}`);\r\n            if (!jobResponse.ok) {\r\n                throw new Error(`Failed to fetch updated job data: ${jobResponse.status}`);\r\n            }\r\n            const updatedJobData = await jobResponse.json();\r\n            console.log(\"Fetched updated job data:\", updatedJobData);\r\n\r\n            // Update the selectedJob and editedJob with the latest data from backend\r\n            setSelectedJob(updatedJobData);\r\n            setEditedJob(updatedJobData);\r\n\r\n            // Update the job in the jobs array as well\r\n            setJobs(prevJobs => prevJobs.map(job =>\r\n                job.jobId === updatedJobData.jobId ? updatedJobData : job\r\n            ));\r\n        } catch (err) {\r\n            console.error(\"Error fetching job data:\", err);\r\n        }\r\n    };\r\n\r\n    const scoreApplicants = async (unscoredApplicants) => {\r\n        try {\r\n            // Rank new applicants based on the existing prompt\r\n            const response = await fetch(`http://localhost:8000/api/candidates/ranks`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    weights: selectedJob.rank_weight,\r\n                    applicants: unscoredApplicants,\r\n                    job_document: selectedJob\r\n                })\r\n            });\r\n\r\n            // Handle potential network or server errors\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({ detail: response.statusText }));\r\n                throw new Error(errorData.detail || `Ranking request failed: ${response.statusText}`);\r\n            }\r\n\r\n            // Parse applicant results\r\n            const scoredApplicants = await response.json();\r\n\r\n            return scoredApplicants;\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching job data:\", err);\r\n        }\r\n    };\r\n\r\n    // Modify handleJobSelect to add loading effect\r\n    const handleJobSelect = (job) => {\r\n        setJobDetailLoading(true);\r\n        // Introduce a short delay to display the loading effect\r\n        setTimeout(() => {\r\n            setSelectedJob(job);\r\n            setEditedJob(job);\r\n            fetchApplicants(job.jobId).then(() => {\r\n                setJobDetailLoading(false);\r\n            });\r\n        }, 300);\r\n    };\r\n\r\n    // Modify handleBackToJobs to add a loading effect when clicking \"Back to Jobs\"\r\n    const handleBackToJobs = () => {\r\n        setJobDetailLoading(true);\r\n        setTimeout(() => {\r\n            setSelectedJob(null);\r\n            setIsEditing(false);\r\n            setApplicants([]);\r\n            setJobDetailLoading(false);\r\n        }, 300);\r\n    };\r\n\r\n    // Modify handleEditToggle to reset input fields when starting to edit\r\n    const handleEditToggle = () => {\r\n        // If we're starting to edit\r\n        if (!isEditing) {\r\n            // Reset the state to the current job data\r\n            setEditedJob(selectedJob);\r\n\r\n            // Clear any pending input in department and skill fields\r\n            setDepartmentInput(\"\");\r\n            setSkillInput(\"\");\r\n\r\n            // Schedule the textarea resize after render\r\n            setTimeout(() => {\r\n                adjustTextareaHeight();\r\n            }, 0);\r\n        }\r\n\r\n        setIsEditing(!isEditing);\r\n    };\r\n\r\n    // Function to adjust textarea height based on content\r\n    const adjustTextareaHeight = () => {\r\n        if (descriptionTextareaRef.current) {\r\n            descriptionTextareaRef.current.style.height = 'auto';\r\n            descriptionTextareaRef.current.style.height = `${descriptionTextareaRef.current.scrollHeight}px`;\r\n        }\r\n    };\r\n\r\n    // Ensure the handleSaveChanges function properly formats the data before sending\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            // Ensure minimumCGPA is formatted to 2 decimal places\r\n            const updatedJobData = {\r\n                ...editedJob,\r\n                minimumCGPA: Number(parseFloat(editedJob.minimumCGPA).toFixed(2)),\r\n                requiredSkills: editedJob.requiredSkills || []\r\n            };\r\n\r\n            console.log(\"Sending job update:\", updatedJobData);\r\n\r\n            const response = await fetch(`http://localhost:8000/api/jobs/${updatedJobData.jobId}`, {\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify(updatedJobData)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({ detail: \"Unknown error\" }));\r\n                throw new Error(errorData.detail || \"Failed to update job\");\r\n            }\r\n\r\n            const updatedJob = await response.json();\r\n            console.log(\"Received updated job:\", updatedJob); // Debug: check what we received back\r\n\r\n            setJobs(jobs.map(job => job.jobId === updatedJob.jobId ? updatedJob : job));\r\n            setSelectedJob(updatedJob);\r\n            setIsEditing(false);\r\n            setModalMessage(\"Your changes have been saved successfully.\");\r\n            setShowSuccessModal(true);\r\n        } catch (err) {\r\n            console.error(\"Error updating job:\", err);\r\n            setModalMessage(err.message || \"Failed to update job. Please try again.\");\r\n            setShowErrorModal(true);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEditedJob({\r\n            ...editedJob,\r\n            [name]: value\r\n        });\r\n\r\n        // Adjust height when job description changes\r\n        if (name === 'jobDescription' && descriptionTextareaRef.current) {\r\n            setTimeout(() => adjustTextareaHeight(), 0);\r\n        }\r\n    };\r\n\r\n    const handleSearchChange = (e) => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    const handleCategoryChange = (e) => {\r\n        setSearchCategory(e.target.value);\r\n    };\r\n\r\n    // Add new handler for \"Upload More CV\"\r\n    const handleUploadMoreCV = () => {\r\n        setShowUploadCVModal(true);\r\n    };\r\n\r\n    // Handle upload complete event\r\n    const handleUploadComplete = async (count) => {\r\n        // Close the upload CV modal first\r\n        setShowUploadCVModal(false);\r\n\r\n        // Set loading view\r\n        setRankDetailLoading(true);\r\n\r\n        // Refresh applicants data when upload is complete\r\n        if (selectedJob && count > 0) {\r\n\r\n            // Update job and applicants list\r\n            fetchJob(selectedJob.jobId);\r\n            fetchApplicants(selectedJob.jobId);\r\n\r\n            handleUnscoredApplicants();\r\n\r\n            // Update the local job object with the new application count\r\n            const updatedJob = {\r\n                ...selectedJob,\r\n                applicationCount: (selectedJob.applicationCount || 0) + count\r\n            };\r\n\r\n            // Update the job in both selectedJob and jobs array\r\n            setSelectedJob(updatedJob);\r\n            setJobs(prevJobs => prevJobs.map(job =>\r\n                job.jobId === updatedJob.jobId ? updatedJob : job\r\n            ));\r\n\r\n            // Set loading state to false\r\n            setRankDetailLoading(false);\r\n\r\n            // Show success message\r\n            setModalMessage(`${count} new CV${count !== 1 ? 's' : ''} uploaded successfully.`);\r\n\r\n            // Use setTimeout to ensure modal appears after the upload modal is closed\r\n            setTimeout(() => {\r\n                setShowSuccessModal(true);\r\n            }, 300);\r\n        }\r\n    };\r\n\r\n    // Handle scoring applicants when they are not scored but others are\r\n    const handleUnscoredApplicants = async () => {\r\n        if (selectedJob.rank_weight !== null && selectedJob.prompt !== null) {\r\n            // Filter out the new applicants from the existing list\r\n            // New applicants are those without rank_score or with an empty rank_score\r\n            const unscoredApplicants = await fetchUnscoredApplicants(selectedJob.jobId);\r\n\r\n            // Only proceed if there are new applicants to rank\r\n            if (unscoredApplicants.length > 0) {\r\n                // Parse applicant results\r\n                const scoredApplicants = await scoreApplicants(unscoredApplicants);\r\n\r\n                // Update candidate rankings if available\r\n                if (scoredApplicants.applicants && scoredApplicants.applicants.length > 0) {\r\n                    for (const applicant of scoredApplicants.applicants) {\r\n                        if (applicant.candidateId) {\r\n                            await fetch(`http://localhost:8000/api/candidates/candidate/${applicant.candidateId}`, {\r\n                                method: 'PUT',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({\r\n                                    ...applicant,\r\n                                    rank_score: applicant.rank_score,\r\n                                    reasoning: applicant.reasoning,\r\n                                    job_id: selectedJob.jobId\r\n                                })\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                fetchApplicants(selectedJob.jobId);\r\n            } else {\r\n                console.log(\"No new applicants to rank\");\r\n                return; // Skip the rest of the function if no new applicants\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handle Rank Applicants button click\r\n    const handleRankApplicants = () => {\r\n        setShowRankApplicantsModal(true);\r\n    };\r\n\r\n    const handlePromptComplete = async (prompt) => {\r\n        // Close the modal first\r\n        setShowRankApplicantsModal(false);\r\n\r\n        try {\r\n            // Start loading state for AI processing\r\n            setRankDetailLoading(true);\r\n\r\n            // Reset any previous error states\r\n            setModalMessage(null);\r\n            setShowRankErrorModal(false);\r\n            setShowRankSuccessModal(false);\r\n\r\n            // Fetch applicants and job data to ensure latest information\r\n            await fetchApplicants(selectedJob.jobId);\r\n            await fetchJob(selectedJob.jobId);\r\n\r\n            // Validate input\r\n            if (!selectedJob || !prompt) {\r\n                throw new Error(\"Missing job or ranking prompt\");\r\n            }\r\n\r\n            // Check if this is a new prompt or a repeat\r\n            if (!(prompt === rankPrompt && selectedJob.jobId === processedJobId)) {\r\n                // Send ranking request to backend\r\n                const response = await fetch(`http://localhost:8000/api/candidates/rank`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        prompt: prompt,\r\n                        applicants: applicants,\r\n                        job_document: selectedJob\r\n                    })\r\n                });\r\n\r\n                // Handle potential network or server errors\r\n                if (!response.ok) {\r\n                    const errorData = await response.json().catch(() => ({ detail: response.statusText }));\r\n                    throw new Error(errorData.detail || `Ranking request failed: ${response.statusText}`);\r\n                }\r\n\r\n                // Parse ranking results\r\n                const rankingResults = await response.json();\r\n\r\n                // Validate ranking results\r\n                if (!rankingResults || !rankingResults.weights) {\r\n                    throw new Error(\"Invalid ranking results received\");\r\n                }\r\n\r\n                // Update job with new weights\r\n                await fetch(`http://localhost:8000/api/jobs/${selectedJob.jobId}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        ...selectedJob,\r\n                        rank_weight: rankingResults.weights,\r\n                        prompt: prompt\r\n                    })\r\n                });\r\n\r\n                // Update candidate rankings if available\r\n                if (rankingResults.applicants && rankingResults.applicants.length > 0) {\r\n                    for (const applicant of rankingResults.applicants) {\r\n                        if (applicant.candidateId) {\r\n                            await fetch(`http://localhost:8000/api/candidates/candidate/${applicant.candidateId}`, {\r\n                                method: 'PUT',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({\r\n                                    ...applicant,\r\n                                    rank_score: applicant.rank_score,\r\n                                    reasoning: applicant.reasoning,\r\n                                    job_id: selectedJob.jobId\r\n                                })\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Update local applicants state\r\n                    setApplicants(rankingResults.applicants);\r\n                }\r\n\r\n                // Store the new ranking prompt\r\n                setRankPrompt(prompt);\r\n\r\n                // Store the processed job id\r\n                setProcessedJobId(selectedJob.jobId);\r\n\r\n                // Show success message\r\n                setModalMessage(\"Applicants have been ranked based on your criteria.\");\r\n                setShowRankSuccessModal(true);\r\n            } else {\r\n                // Same prompt used again for the same job\r\n                setModalMessage(\"Using existing ranking based on the same criteria.\");\r\n                setShowRankSuccessModal(true);\r\n            }\r\n        } catch (error) {\r\n            // Centralized error handling\r\n            console.error(\"Error in ranking applicants:\", error);\r\n            setModalMessage(`Failed to rank applicants: ${error.message}`);\r\n            setShowRankErrorModal(true);\r\n        } finally {\r\n            // Ensure loading state is always turned off\r\n            setRankDetailLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleMinimumCGPABlur = () => {\r\n        const value = parseFloat(editedJob.minimumCGPA);\r\n        if (!isNaN(value)) {\r\n            setEditedJob({ ...editedJob, minimumCGPA: Number(value.toFixed(2)) });\r\n        }\r\n    };\r\n\r\n    const SuccessModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal success-modal\">\r\n                <div className=\"status-icon success-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">{\"Job Updated Successfully!\"}</h3>\r\n                <p className=\"status-description\">{modalMessage || \"Your changes have been saved.\"}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button primary-button\" onClick={() => setShowSuccessModal(false)}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const ErrorModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal error-modal\">\r\n                <div className=\"status-icon error-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n                        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">{\"Update Failed!\"}</h3>\r\n                <p className=\"status-description\">{modalMessage || \"Failed to update job details.\"}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button primary-button\" onClick={() => setShowErrorModal(false)}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const RankSuccessModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal success-modal\">\r\n                <div className=\"status-icon success-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">{\"Rank Successful!\"}</h3>\r\n                <p className=\"status-description\">{modalMessage || \"Applicants have been ranked according to the prompt.\"}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button primary-button\" onClick={() => setShowRankSuccessModal(false)}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const RankErrorModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal error-modal\">\r\n                <div className=\"status-icon error-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n                        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">{\"Rank Failed!\"}</h3>\r\n                <p className=\"status-description\">{modalMessage || \"Failed to rank applicants.\"}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button primary-button\" onClick={() => setShowRankErrorModal(false)}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Create the confirmation modal component\r\n    const ConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Discard Changes?</h3>\r\n                <p className=\"status-description\">Are you sure you want to discard your unsaved changes?</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={handleCancelDiscard}>\r\n                        No, Keep Editing\r\n                    </button>\r\n                    <button className=\"status-button primary-button\" onClick={handleConfirmDiscard}>\r\n                        Yes, Discard Changes\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Function to check if any changes were made to the job\r\n    const hasChanges = () => {\r\n        if (!selectedJob || !editedJob) return false;\r\n\r\n        // Check basic fields\r\n        if (selectedJob.jobTitle !== editedJob.jobTitle) return true;\r\n        if (selectedJob.jobDescription !== editedJob.jobDescription) return true;\r\n        if (selectedJob.minimumCGPA !== editedJob.minimumCGPA) return true;\r\n\r\n        // Check arrays (departments and skills)\r\n        if (selectedJob.departments.length !== editedJob.departments.length) return true;\r\n        if (selectedJob.requiredSkills.length !== editedJob.requiredSkills.length) return true;\r\n\r\n        // Check if departments have changed\r\n        for (let i = 0; i < selectedJob.departments.length; i++) {\r\n            if (!editedJob.departments.includes(selectedJob.departments[i])) return true;\r\n        }\r\n\r\n        // Check if required skills have changed\r\n        for (let i = 0; i < selectedJob.requiredSkills.length; i++) {\r\n            if (!editedJob.requiredSkills.includes(selectedJob.requiredSkills[i])) return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        if (hasChanges()) {\r\n            setShowConfirmModal(true);\r\n        } else {\r\n            // No changes, just exit edit mode\r\n            handleCancelEdit();\r\n        }\r\n    };\r\n\r\n    const handleCancelEdit = () => {\r\n        setIsEditing(false);\r\n        setEditedJob(selectedJob); // Reset changes to original job\r\n        setDepartmentInput(\"\");\r\n        setSkillInput(\"\");\r\n    };\r\n\r\n    const handleConfirmDiscard = () => {\r\n        setShowConfirmModal(false);\r\n        handleCancelEdit();\r\n    };\r\n\r\n    const handleCancelDiscard = () => {\r\n        setShowConfirmModal(false);\r\n        // Stay in edit mode, do nothing\r\n    };\r\n\r\n    // Filter suggestions based on input\r\n    useEffect(() => {\r\n        if (departmentInput && isEditing) {\r\n            const filtered = departmentOptions.filter(\r\n                option => option.toLowerCase().includes(departmentInput.toLowerCase())\r\n            );\r\n            setDepartmentSuggestions(filtered);\r\n            setShowDepartmentSuggestions(filtered.length > 0);\r\n        } else {\r\n            setShowDepartmentSuggestions(false);\r\n        }\r\n    }, [departmentInput, departmentOptions, isEditing]);\r\n\r\n    useEffect(() => {\r\n        if (skillInput && isEditing) {\r\n            const filtered = skillsOptions.filter(\r\n                option => option.toLowerCase().includes(skillInput.toLowerCase())\r\n            );\r\n            setSkillSuggestions(filtered);\r\n            setShowSkillSuggestions(filtered.length > 0);\r\n        } else {\r\n            setShowSkillSuggestions(false);\r\n        }\r\n    }, [skillInput, skillsOptions, isEditing]);\r\n\r\n    // Close suggestions when clicking outside\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (!event.target.closest('.suggestion-container')) {\r\n                setShowDepartmentSuggestions(false);\r\n                setShowSkillSuggestions(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    // Department handlers\r\n    const handleDepartmentSelect = (department) => {\r\n        if (!editedJob.departments.includes(department)) {\r\n            setEditedJob({\r\n                ...editedJob,\r\n                departments: [...editedJob.departments, department]\r\n            });\r\n        }\r\n        setDepartmentInput(\"\");\r\n        setShowDepartmentSuggestions(false);\r\n    };\r\n\r\n    const handleAddDepartment = () => {\r\n        if (departmentInput.trim() && !editedJob.departments.includes(departmentInput.trim())) {\r\n            setEditedJob({\r\n                ...editedJob,\r\n                departments: [...editedJob.departments, departmentInput.trim()]\r\n            });\r\n            setDepartmentInput(\"\");\r\n        }\r\n    };\r\n\r\n    const handleDepartmentKeyPress = (e) => {\r\n        if (e.key === 'Enter' && departmentInput.trim()) {\r\n            e.preventDefault();\r\n            handleAddDepartment();\r\n        }\r\n    };\r\n\r\n    const removeDepartment = (department) => {\r\n        setEditedJob({\r\n            ...editedJob,\r\n            departments: editedJob.departments.filter(dept => dept !== department)\r\n        });\r\n    };\r\n\r\n    // Skill handlers\r\n    const handleSkillSelect = (skill) => {\r\n        if (!editedJob.requiredSkills.includes(skill)) {\r\n            const updatedSkills = [...editedJob.requiredSkills, skill];\r\n            setEditedJob({\r\n                ...editedJob,\r\n                requiredSkills: updatedSkills\r\n            });\r\n        }\r\n        setSkillInput(\"\");\r\n        setShowSkillSuggestions(false);\r\n    };\r\n\r\n    const handleAddSkill = () => {\r\n        if (skillInput.trim() && !editedJob.requiredSkills.includes(skillInput.trim())) {\r\n            const updatedSkills = [...editedJob.requiredSkills, skillInput.trim()];\r\n            setEditedJob({\r\n                ...editedJob,\r\n                requiredSkills: updatedSkills\r\n            });\r\n            setSkillInput(\"\");\r\n        }\r\n    };\r\n\r\n    const handleSkillKeyPress = (e) => {\r\n        if (e.key === 'Enter' && skillInput.trim()) {\r\n            e.preventDefault();\r\n            handleAddSkill();\r\n        }\r\n    };\r\n\r\n    const removeSkill = (skill) => {\r\n        const updatedSkills = editedJob.requiredSkills.filter(s => s !== skill);\r\n        setEditedJob({\r\n            ...editedJob,\r\n            requiredSkills: updatedSkills\r\n        });\r\n        console.log(\"After removing skill:\", editedJob.requiredSkills); // Debug logging\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"dashboard-container\" style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                minHeight: '80vh',\r\n                backgroundColor: 'rgb(255, 255, 255)'\r\n            }}>\r\n                <div className=\"loading-indicator\" style={{ textAlign: 'center' }}>\r\n                    <LoadingAnimation />\r\n                    <p style={{ marginTop: '20px' }}>Loading jobs...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Add loading state for job details view\r\n    if (selectedJob && jobDetailLoading) {\r\n        return (\r\n            <div className=\"dashboard-container\" style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                minHeight: '80vh',\r\n                backgroundColor: 'rgb(255, 255, 255)'\r\n            }}>\r\n                <div className=\"loading-indicator\" style={{ textAlign: 'center' }}>\r\n                    <LoadingAnimation />\r\n                    <p style={{ marginTop: '20px' }}>{\"Loading job details...\"}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Add loading state for rank details view\r\n    if (selectedJob && rankDetailLoading) {\r\n        return (\r\n            <div className=\"dashboard-container\" style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                minHeight: '80vh',\r\n                backgroundColor: 'rgb(255, 255, 255)'\r\n            }}>\r\n                <div className=\"loading-indicator\" style={{ textAlign: 'center' }}>\r\n                    <LoadingAnimation />\r\n                    <p style={{ marginTop: '20px' }}>{\"Processing scores...\"}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"dashboard-container\">\r\n                <div className=\"error-message\">\r\n                    <h3>Error</h3>\r\n                    <p>{error}</p>\r\n                    <button onClick={() => window.location.reload()}>Retry</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            {showSuccessModal && <SuccessModal />}\r\n            {showErrorModal && <ErrorModal />}\r\n            {showRankSuccessModal && <RankSuccessModal />}\r\n            {showRankErrorModal && <RankErrorModal />}\r\n            {showConfirmModal && <ConfirmModal />}\r\n            {showUploadCVModal && (\r\n                <UploadMoreCVModal  // Updated component name\r\n                    isOpen={showUploadCVModal}\r\n                    onClose={() => setShowUploadCVModal(false)}\r\n                    jobId={selectedJob?.jobId}\r\n                    jobTitle={selectedJob?.jobTitle}\r\n                    onUploadComplete={handleUploadComplete}\r\n                />\r\n            )}\r\n            {showRankApplicantsModal && (\r\n                <RankApplicantsModal\r\n                    isOpen={showRankApplicantsModal}\r\n                    onClose={() => setShowRankApplicantsModal(false)}\r\n                    jobId={selectedJob?.jobId}\r\n                    jobTitle={selectedJob?.jobTitle}\r\n                    onSubmit={handlePromptComplete}\r\n                />\r\n            )}\r\n            {!selectedJob ? (\r\n                <>\r\n                    <div className=\"dashboard-header\">\r\n                        <h1>Job Dashboard</h1>\r\n                        <button className=\"create-job-button\" onClick={handleCreateNewJob}>Create New Job</button>\r\n                    </div>\r\n\r\n                    <div className=\"search-container\">\r\n                        <div className=\"search-input-wrapper\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"search-input\"\r\n                                placeholder=\"Search jobs...\"\r\n                                value={searchTerm}\r\n                                onChange={handleSearchChange}\r\n                            />\r\n                            <select\r\n                                className=\"search-category\"\r\n                                value={searchCategory}\r\n                                onChange={handleCategoryChange}\r\n                            >\r\n                                <option value=\"jobTitle\">Job Title</option>\r\n                                <option value=\"department\">Department</option>\r\n                                <option value=\"requiredSkills\">Required Skills</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"sort-container\">\r\n                            <label htmlFor=\"sort-select\">Sort by:</label>\r\n                            <select\r\n                                id=\"sort-select\"\r\n                                className=\"sort-select\"\r\n                                value={sortBy}\r\n                                onChange={handleSortChange}\r\n                            >\r\n                                <option value=\"latest\">Latest</option>\r\n                                <option value=\"oldest\">Oldest</option>\r\n                                <option value=\"most-applications\">Most Applications</option>\r\n                                <option value=\"a-z\">A-Z</option>\r\n                                <option value=\"z-a\">Z-A</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"jobs-list-single-column\">\r\n                        {sortedJobs.length === 0 ? (\r\n                            <div className=\"no-jobs\">\r\n                                <p>No jobs found matching your search.</p>\r\n                            </div>\r\n                        ) : (\r\n                            sortedJobs.map((job) => (\r\n                                <div\r\n                                    key={job.jobId}\r\n                                    className=\"job-card-row\"\r\n                                    onClick={() => handleJobSelect(job)}\r\n                                >\r\n                                    <div className=\"job-card-main-content\">\r\n                                        <h3 className=\"job-card-title\">{job.jobTitle}</h3>\r\n                                        <p className=\"job-card-description\">{job.jobDescription}</p>\r\n                                        <div className=\"job-card-departments\">\r\n                                            {job.departments.map((dept, index) => (\r\n                                                <span key={index} className=\"department-tag\">{dept}</span>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"job-card-side-content\">\r\n                                        <p className=\"job-card-date\">\r\n                                            <span className=\"detail-label\">Posted: </span>\r\n                                            {formatDate(job.createdAt)}\r\n                                        </p>\r\n                                        <p className=\"job-card-applications\">\r\n                                            <span className=\"detail-label\">Applications: </span>\r\n                                            {job.applicationCount}\r\n                                        </p>\r\n                                        <div className=\"job-card-skills\">\r\n                                            <span className=\"detail-label\">Required Skills: </span>\r\n                                            <div className=\"skills-tags\">\r\n                                                {job.requiredSkills && job.requiredSkills.map((skill, index) => (\r\n                                                    <span key={index} className=\"skill-tag\">{skill}</span>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <div className=\"job-detail-view\">\r\n                    <button className=\"back-button\" onClick={handleBackToJobs}>\r\n                        <svg className=\"back-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n                        </svg>\r\n                        Back\r\n                    </button>\r\n                    <div className=\"job-detail-header\">\r\n                        <h2>{selectedJob.jobTitle}</h2>\r\n                        <div className=\"job-actions\">\r\n                            {!isEditing ? (\r\n                                <>\r\n                                    <button className=\"edit-job-button\" onClick={handleEditToggle}>\r\n                                        Edit Job\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <button\r\n                                        className=\"cancel-button\"\r\n                                        onClick={handleCancelClick}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"save-button\" onClick={handleSaveChanges}>\r\n                                        Save Changes\r\n                                    </button>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"job-detail-content\">\r\n                        <div className=\"job-info-container\">\r\n                            <div className=\"section-header\">\r\n                                <h3>Job Details</h3>\r\n                                {!isEditing && (\r\n                                    <button\r\n                                        className=\"interview-questions-button\"\r\n                                        onClick={() => window.location.href = `/add-interview-questions?jobId=${selectedJob.jobId}`}\r\n                                    >\r\n                                        Interview Questions\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n\r\n                            {isEditing ? (\r\n                                <div className=\"job-edit-form\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>Job Title</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"jobTitle\"\r\n                                            value={editedJob.jobTitle}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label>Job Description</label>\r\n                                        <textarea\r\n                                            name=\"jobDescription\"\r\n                                            value={editedJob.jobDescription}\r\n                                            onChange={handleInputChange}\r\n                                            ref={descriptionTextareaRef}\r\n                                            className=\"auto-resize-textarea\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label>Minimum CGPA</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"minimumCGPA\"\r\n                                            value={editedJob.minimumCGPA}\r\n                                            onChange={handleInputChange}\r\n                                            onBlur={handleMinimumCGPABlur}\r\n                                            step=\"0.01\"\r\n                                            min=\"0\"\r\n                                            max=\"4.0\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    {/* Editable departments field */}\r\n                                    <div className=\"form-group\">\r\n                                        <label>Departments</label>\r\n                                        <div className=\"suggestion-container\">\r\n                                            <div className=\"input-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-input\"\r\n                                                    value={departmentInput}\r\n                                                    onChange={(e) => setDepartmentInput(e.target.value)}\r\n                                                    onKeyPress={handleDepartmentKeyPress}\r\n                                                    placeholder=\"Enter a department\"\r\n                                                    onBlur={() => {\r\n                                                        setTimeout(() => {\r\n                                                            setShowDepartmentSuggestions(false);\r\n                                                        }, 200);\r\n                                                    }}\r\n                                                />\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    className=\"add-button\"\r\n                                                    onClick={handleAddDepartment}\r\n                                                    disabled={!departmentInput.trim()}\r\n                                                >\r\n                                                    Add\r\n                                                </button>\r\n                                            </div>\r\n                                            {showDepartmentSuggestions && (\r\n                                                <ul className=\"suggestions-list\">\r\n                                                    {departmentSuggestions.map((suggestion, index) => (\r\n                                                        <li\r\n                                                            key={index}\r\n                                                            onMouseDown={(e) => {\r\n                                                                e.preventDefault();\r\n                                                                handleDepartmentSelect(suggestion);\r\n                                                            }}\r\n                                                        >\r\n                                                            {suggestion}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            )}\r\n                                        </div>\r\n                                        {editedJob.departments && editedJob.departments.length > 0 && (\r\n                                            <div className=\"tags-container departments-container\">\r\n                                                {editedJob.departments.map((department, index) => (\r\n                                                    <div key={index} className=\"tag\">\r\n                                                        {department}\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            className=\"tag-remove\"\r\n                                                            onClick={() => removeDepartment(department)}\r\n                                                        >\r\n                                                            ×\r\n                                                        </button>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Editable required skills field */}\r\n                                    <div className=\"form-group\">\r\n                                        <label>Required Skills</label>\r\n                                        <div className=\"suggestion-container\">\r\n                                            <div className=\"input-group\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-input\"\r\n                                                    value={skillInput}\r\n                                                    onChange={(e) => setSkillInput(e.target.value)}\r\n                                                    onKeyPress={handleSkillKeyPress}\r\n                                                    placeholder=\"Enter a skill\"\r\n                                                    onBlur={() => {\r\n                                                        setTimeout(() => {\r\n                                                            setShowSkillSuggestions(false);\r\n                                                        }, 200);\r\n                                                    }}\r\n                                                />\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    className=\"add-button\"\r\n                                                    onClick={handleAddSkill}\r\n                                                    disabled={!skillInput.trim()}\r\n                                                >\r\n                                                    Add\r\n                                                </button>\r\n                                            </div>\r\n                                            {showSkillSuggestions && (\r\n                                                <ul className=\"suggestions-list\">\r\n                                                    {skillSuggestions.map((suggestion, index) => (\r\n                                                        <li\r\n                                                            key={index}\r\n                                                            onMouseDown={(e) => {\r\n                                                                e.preventDefault();\r\n                                                                handleSkillSelect(suggestion);\r\n                                                            }}\r\n                                                        >\r\n                                                            {suggestion}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            )}\r\n                                        </div>\r\n                                        {editedJob.requiredSkills && editedJob.requiredSkills.length > 0 && (\r\n                                            <div className=\"tags-container skills-container\">\r\n                                                {editedJob.requiredSkills.map((skill, index) => (\r\n                                                    <div key={index} className=\"tag\">\r\n                                                        {skill}\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            className=\"tag-remove\"\r\n                                                            onClick={() => removeSkill(skill)}\r\n                                                        >\r\n                                                            ×\r\n                                                        </button>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"job-info\">\r\n                                    <div className=\"info-group\">\r\n                                        <p className=\"info-label\">Posted:</p>\r\n                                        <p className=\"info-value\">{formatDate(selectedJob.createdAt)}</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"info-group\">\r\n                                        <p className=\"info-label\">Departments:</p>\r\n                                        <div className=\"departments-display\">\r\n                                            {selectedJob.departments.map((dept, index) => (\r\n                                                <span key={index} className=\"department-tag\">{dept}</span>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"info-group\">\r\n                                        <p className=\"info-label\">Minimum CGPA:</p>\r\n                                        <p className=\"info-value\">{selectedJob.minimumCGPA.toFixed(2)}</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"info-group\">\r\n                                        <p className=\"info-label\">Required Skills:</p>\r\n                                        <div className=\"skills-display\">\r\n                                            {selectedJob.requiredSkills && selectedJob.requiredSkills.map((skill, index) => (\r\n                                                <span key={index} className=\"skill-tag\">{skill}</span>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"info-group description-group\">\r\n                                        <p className=\"info-label\">Description:</p>\r\n                                        <p className=\"info-value\">{selectedJob.jobDescription}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"applicants-container\">\r\n                            <div className=\"applicants-header\">\r\n                                <h3>Applicants ({applicants.length})</h3>\r\n                                {!isEditing && (\r\n                                    <div className=\"applicants-actions\">\r\n                                        <button className=\"rank-button\" onClick={handleRankApplicants}>\r\n                                            Rank Applicants\r\n                                        </button>\r\n                                        <button className=\"upload-more-cv-button\" onClick={handleUploadMoreCV}>\r\n                                            Upload More CV\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            {applicants.length === 0 ? (\r\n                                <div className=\"no-applicants\">\r\n                                    <p>No applications have been received for this job yet.</p>\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"applicants-list\">\r\n                                    {applicants.map((applicant) => (\r\n                                        <div key={applicant.applicationId} className=\"applicant-card\">\r\n                                            <div className=\"applicant-info\">\r\n                                                <h4>{renderApplicantID(applicant)}</h4>\r\n                                                <p className=\"applicant-email\">{'CV Uploaded on ' + (renderApplicantSubmitDate(applicant))}</p>\r\n                                            </div>\r\n\r\n                                            <div className=\"applicant-status-actions\">\r\n                                                <span className={`status-badge ${applicant.status || 'new'}`}>\r\n                                                    {applicant.status || 'new'}\r\n                                                </span>\r\n                                                <div className=\"rank-score-container\">\r\n                                                    <span className=\"rank-score-label\">Score: </span>\r\n                                                    <span className=\"rank-score-value\">\r\n                                                        {applicant.rank_score && applicant.rank_score.final_score\r\n                                                            ? applicant.rank_score.final_score.toFixed(2)\r\n                                                            : \"N/A\"}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <button\r\n                                                    className=\"view-profile-button\"\r\n                                                    onClick={() => navigate(`/dashboard/${selectedJob.jobId}/${applicant.candidateId}`)}\r\n                                                >\r\n                                                    Full Profile\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Improved applicant data rendering with fallbacks and debugging\r\nconst renderApplicantID = (applicant) => {\r\n    // Directly return candidateId instead of name\r\n    return applicant.candidateId || \"ID Not Available\";\r\n};\r\n\r\nconst renderApplicantSubmitDate = (applicant) => {\r\n    // Check multiple possible locations for the upload date\r\n    let uploadDate = null;\r\n\r\n    // Try direct uploadedAt property\r\n    if (applicant.uploadedAt) {\r\n        uploadDate = applicant.uploadedAt;\r\n    }\r\n    // Try applicationDate property (often used for timestamps in applications)\r\n    else if (applicant.applicationDate) {\r\n        uploadDate = applicant.applicationDate;\r\n    }\r\n    // Try nested locations\r\n    else if (applicant.candidateInfo && applicant.candidateInfo.uploadedAt) {\r\n        uploadDate = applicant.candidateInfo.uploadedAt;\r\n    }\r\n    // Try extracted text data\r\n    else if (applicant.extractedText && applicant.extractedText.uploadedAt) {\r\n        uploadDate = applicant.extractedText.uploadedAt;\r\n    }\r\n    // Look for Firebase timestamp format (could be in seconds or milliseconds)\r\n    else if (applicant.timestamp) {\r\n        // Firebase timestamps can be objects with seconds and nanoseconds\r\n        if (typeof applicant.timestamp === 'object' && applicant.timestamp.seconds) {\r\n            uploadDate = new Date(applicant.timestamp.seconds * 1000).toISOString();\r\n        } else {\r\n            uploadDate = applicant.timestamp;\r\n        }\r\n    }\r\n\r\n    // If we found a date value, format it\r\n    if (uploadDate) {\r\n        return formatDate(uploadDate);\r\n    }\r\n\r\n    // For debugging, log the full applicant object to see its structure\r\n    console.log(\"Applicant structure for debugging upload date:\", applicant);\r\n\r\n    return \"Upload Date Not Available\";\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}