{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruizh\\\\OneDrive\\\\Desktop\\\\EqualLens-project-1\\\\equallens-project\\\\src\\\\components\\\\pages\\\\AddInterviewQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./AddInterviewQuestions.css\";\nimport '../pageloading.css'; // Import the loading animation CSS\nimport axios from 'axios'; // Add axios for API calls\n\n// Add LoadingAnimation component for consistency\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-animation\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"seesaw-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ball\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n_c = LoadingAnimation;\nconst AddInterviewQuestions = () => {\n  _s();\n  const [sections, setSections] = useState([]);\n  const [newSectionTitle, setNewSectionTitle] = useState(\"\");\n  const [jobDetails, setJobDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [isNavigatingBack, setIsNavigatingBack] = useState(false);\n  // New state variables for applicant selection\n  const [applicants, setApplicants] = useState([]);\n  const [selectedApplicant, setSelectedApplicant] = useState(\"\");\n  const [isLoadingApplicants, setIsLoadingApplicants] = useState(false);\n  // Add new state to track which section title is being edited\n  const [editingSectionIndex, setEditingSectionIndex] = useState(null);\n  const [editedSectionTitle, setEditedSectionTitle] = useState(\"\");\n  // Add new state for validation error modal\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  // Add new state for section deletion confirmation\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [sectionToDelete, setSectionToDelete] = useState(null);\n  // Add new state for save confirmation modal\n  const [showSaveConfirmModal, setShowSaveConfirmModal] = useState(false);\n  const [totalInterviewTime, setTotalInterviewTime] = useState({\n    minutes: 0,\n    seconds: 0\n  });\n  // Add new state for navigation confirmation modal\n  const [showNavigationModal, setShowNavigationModal] = useState(false);\n  // Add state to track if AI generate has been used already\n  const [aiGenerateUsedMap, setAiGenerateUsedMap] = useState({});\n  // Add state for showing success message when AI sections are added\n  const [showAISuccess, setShowAISuccess] = useState(false);\n  // Add a new state to track if changes have been saved\n  const [changesSaved, setChangesSaved] = useState(true);\n  // Add a ref to track if sections were loaded from DB or changed by user\n  const [sectionsLoadedFromDB, setSectionsLoadedFromDB] = useState(false);\n  // Add a new state for the apply-to-all confirmation modal\n  const [showApplyToAllModal, setShowApplyToAllModal] = useState(false);\n  const [applyToAllStatus, setApplyToAllStatus] = useState(null);\n  // Add state for reset confirmation modal\n  const [showResetConfirmModal, setShowResetConfirmModal] = useState(false);\n  // Add new state for reset success modal\n  const [showResetSuccessModal, setShowResetSuccessModal] = useState(false);\n  // Add state to track what operation is being performed\n  const [loadingOperation, setLoadingOperation] = useState(\"Saving\");\n  // Add these new state variables\n  const [showCandidateSwitchModal, setShowCandidateSwitchModal] = useState(false);\n  const [pendingCandidateId, setPendingCandidateId] = useState(null);\n  const [showUnsavedResetModal, setShowUnsavedResetModal] = useState(false);\n  // Add a ref to store the initial sections state loaded from the database\n  const [initialSections, setInitialSections] = useState([]);\n  // Add a new state to track if AI generate was used but not yet saved\n  const [aiGeneratedUnsaved, setAiGeneratedUnsaved] = useState(false);\n  const [showAIConfirmModal, setShowAIConfirmModal] = useState(false);\n\n  // Get job ID from URL query params\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const jobId = queryParams.get('jobId');\n\n  // Add navigate for programmatic navigation\n  const navigate = useNavigate();\n\n  // Fetch job details when component mounts\n  useEffect(() => {\n    const fetchJobDetails = async () => {\n      if (!jobId) return;\n      setIsLoading(true);\n      try {\n        const response = await fetch(`http://localhost:8000/api/jobs/${jobId}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch job details\");\n        }\n        const data = await response.json();\n        setJobDetails(data);\n      } catch (error) {\n        console.error(\"Error fetching job details:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchJobDetails();\n  }, [jobId]);\n\n  // Fetch applicants for the job\n  useEffect(() => {\n    const fetchApplicants = async () => {\n      if (!jobId) return;\n      setIsLoadingApplicants(true);\n      try {\n        const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch applicants\");\n        }\n        const data = await response.json();\n        setApplicants(data);\n      } catch (error) {\n        console.error(\"Error fetching applicants:\", error);\n      } finally {\n        setIsLoadingApplicants(false);\n      }\n    };\n    fetchApplicants();\n  }, [jobId]);\n  const resetUI = (keepSelectedApplicant = false) => {\n    // Reset all fields to their initial state\n    setSections([]);\n    setNewSectionTitle(\"\");\n    if (!keepSelectedApplicant) {\n      setSelectedApplicant(\"\");\n    } else if (selectedApplicant) {\n      // If keeping the selected applicant, reset AI generate usage for that applicant\n      setAiGenerateUsedMap(prev => {\n        const newMap = {\n          ...prev\n        };\n        delete newMap[selectedApplicant];\n        return newMap;\n      });\n    }\n    setEditingSectionIndex(null);\n    setEditedSectionTitle(\"\");\n    setShowErrorModal(false);\n    setErrorMessage(\"\");\n    setShowConfirmModal(false);\n    // Reset AI generated unsaved flag\n    setAiGeneratedUnsaved(false);\n  };\n\n  // Fetch previously saved InterviewQuestionSet when the component mounts\n  useEffect(() => {\n    const fetchSavedQuestions = async () => {\n      if (!jobId || !selectedApplicant) return;\n      try {\n        const response = await axios.get(`http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`);\n        const data = response.data;\n        if (data) {\n          setSections(data.sections);\n          setSectionsLoadedFromDB(true); // Mark that sections were loaded from DB\n          setChangesSaved(true); // Data just loaded is considered saved\n        }\n      } catch (error) {\n        console.error(\"Error fetching saved questions:\", error);\n\n        // If 404, just clear sections but keep the selected applicant\n        if (error.response && error.response.status === 404) {\n          // This is normal for new applicants - just start with empty sections\n          setSections([]);\n          setSectionsLoadedFromDB(true); // Empty sections are also \"loaded\"\n          setChangesSaved(true); // Empty state is considered saved\n        }\n      }\n    };\n    fetchSavedQuestions();\n  }, [jobId, selectedApplicant]);\n\n  // Fetch previously saved InterviewQuestionSet when the selected applicant changes\n  useEffect(() => {\n    const fetchSavedQuestions = async () => {\n      if (!jobId || !selectedApplicant) {\n        resetUI(); // Reset UI if no applicant is selected\n        return;\n      }\n\n      // Skip fetching for \"Apply to All\" option\n      if (selectedApplicant === \"all\") {\n        // Just reset the sections but keep the selection\n        setSections([]);\n        setSectionsLoadedFromDB(true);\n        setChangesSaved(true);\n        setInitialSections([]); // Set empty initial sections\n        return;\n      }\n\n      // Clear sections immediately to avoid showing stale data\n      setSections([]);\n      try {\n        const response = await axios.get(`http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`);\n        const data = response.data;\n        if (data) {\n          // Process sections to ensure isAIModified flag is correctly interpreted\n          const processedSections = data.sections.map(section => ({\n            ...section,\n            questions: section.questions.map(question => {\n              // If question is marked as modified in the saved data, preserve that state\n              const processedQuestion = {\n                ...question\n              };\n              if (processedQuestion.isAIGenerated && processedQuestion.isAIModified) {\n                // Ensure isAIModified flag is set correctly\n                processedQuestion.isAIModified = true;\n              }\n              return processedQuestion;\n            })\n          }));\n          setSections(processedSections);\n          setInitialSections(JSON.parse(JSON.stringify(processedSections))); // Deep copy initial state\n\n          // Check and update AI generation usage status\n          if (data.aiGenerationUsed) {\n            // If AI was used for this candidate, update the state map\n            setAiGenerateUsedMap(prev => ({\n              ...prev,\n              [selectedApplicant]: true\n            }));\n          }\n        } else {\n          // Only clear the sections, not the selected applicant\n          setSections([]);\n          setInitialSections([]); // Clear initial sections\n        }\n      } catch (error) {\n        console.error(\"Error fetching saved questions:\", error);\n\n        // If 404, just clear sections but keep the selected applicant\n        if (error.response && error.response.status === 404) {\n          console.log(\"No question set found for this applicant. Starting with a blank slate.\");\n          setSections([]);\n          setInitialSections([]); // Clear initial sections\n\n          // Also clear AI usage state for this candidate since no record exists\n          setAiGenerateUsedMap(prev => {\n            const newMap = {\n              ...prev\n            };\n            delete newMap[selectedApplicant];\n            return newMap;\n          });\n        } else {\n          // For other errors, show an error message but don't reset UI\n          setErrorMessage(`Error loading questions: ${error.message}`);\n          setShowErrorModal(true);\n        }\n      }\n    };\n    fetchSavedQuestions();\n  }, [jobId, selectedApplicant]);\n\n  // Add effect to mark changes as unsaved whenever sections change\n  useEffect(() => {\n    // Helper function to check for deep equality between sections\n    const areSectionsEqual = (sectionsA, sectionsB) => {\n      try {\n        // Check for null/undefined cases\n        if (!sectionsA && !sectionsB) return true;\n        if (!sectionsA || !sectionsB) return false;\n\n        // First check basic structure\n        if (sectionsA.length !== sectionsB.length) return false;\n\n        // If both are empty arrays, they're equal\n        if (sectionsA.length === 0 && sectionsB.length === 0) return true;\n\n        // Compare sections one by one\n        for (let i = 0; i < sectionsA.length; i++) {\n          var _sectionA$randomSetti, _sectionB$randomSetti, _sectionA$randomSetti2, _sectionA$randomSetti3, _sectionB$randomSetti2;\n          const sectionA = sectionsA[i];\n          const sectionB = sectionsB[i];\n\n          // Compare section properties\n          if (sectionA.title !== sectionB.title) return false;\n          if (((_sectionA$randomSetti = sectionA.randomSettings) === null || _sectionA$randomSetti === void 0 ? void 0 : _sectionA$randomSetti.enabled) !== ((_sectionB$randomSetti = sectionB.randomSettings) === null || _sectionB$randomSetti === void 0 ? void 0 : _sectionB$randomSetti.enabled)) return false;\n          if ((_sectionA$randomSetti2 = sectionA.randomSettings) !== null && _sectionA$randomSetti2 !== void 0 && _sectionA$randomSetti2.enabled && ((_sectionA$randomSetti3 = sectionA.randomSettings) === null || _sectionA$randomSetti3 === void 0 ? void 0 : _sectionA$randomSetti3.count) !== ((_sectionB$randomSetti2 = sectionB.randomSettings) === null || _sectionB$randomSetti2 === void 0 ? void 0 : _sectionB$randomSetti2.count)) return false;\n\n          // Compare questions\n          if (sectionA.questions.length !== sectionB.questions.length) return false;\n          for (let j = 0; j < sectionA.questions.length; j++) {\n            const questionA = sectionA.questions[j];\n            const questionB = sectionsB[i].questions[j];\n            if (questionA.text !== questionB.text) return false;\n            if (questionA.timeLimit !== questionB.timeLimit) return false;\n            if (questionA.isCompulsory !== questionB.isCompulsory) return false;\n          }\n        }\n\n        // If we got here, everything matches\n        return true;\n      } catch (error) {\n        // If any error occurs during comparison, consider them different\n        console.error(\"Error comparing sections:\", error);\n        return false;\n      }\n    };\n\n    // Only check for changes if we've finished loading from DB\n    if (!sectionsLoadedFromDB) {\n      // Create string representations for comparison (more reliable than deep object comparison)\n      const sectionsJSON = JSON.stringify(sections);\n      const initialSectionsJSON = JSON.stringify(initialSections);\n\n      // Check if current sections differ from initial sections\n      const hasChanges = sectionsJSON !== initialSectionsJSON;\n\n      // Only update if necessary to avoid re-renders\n      if (changesSaved === hasChanges) {\n        setChangesSaved(!hasChanges);\n      }\n    } else {\n      // Reset the flag after sections are loaded from DB\n      setSectionsLoadedFromDB(false);\n    }\n  }, [sections, initialSections, sectionsLoadedFromDB, changesSaved]);\n\n  // Reset aiGenerateUsed state when component mounts\n  useEffect(() => {\n    // Reset AI generate used map when component mounts\n    setAiGenerateUsedMap({});\n  }, []);\n\n  // Reset AI generated state when applicant changes or component unmounts\n  useEffect(() => {\n    return () => {\n      // Reset AI generated unsaved flag when component unmounts\n      setAiGeneratedUnsaved(false);\n    };\n  }, [selectedApplicant]);\n\n  // Modify the handleAddSection function to add a default question\n  const handleAddSection = () => {\n    if (newSectionTitle.trim()) {\n      // Create a new section with one default question\n      const newSection = {\n        title: newSectionTitle,\n        questions: [{\n          text: \"\",\n          timeLimit: 60,\n          isCompulsory: true\n        }],\n        randomSettings: {\n          enabled: false,\n          count: 0\n        }\n      };\n      setSections([...sections, newSection]);\n      setNewSectionTitle(\"\");\n      // No need to call setChangesSaved(false) here as the sections change \n      // will trigger the useEffect that handles it\n    }\n  };\n  const handleRemoveSection = sectionIndex => {\n    // Check if section has questions before showing confirmation\n    if (sections[sectionIndex].questions.length > 0) {\n      setSectionToDelete(sectionIndex);\n      setShowConfirmModal(true);\n    } else {\n      // If no questions, delete immediately\n      removeSection(sectionIndex);\n    }\n  };\n\n  // New function to actually remove the section after confirmation\n  const removeSection = sectionIndex => {\n    const updatedSections = [...sections];\n    updatedSections.splice(sectionIndex, 1);\n    setSections(updatedSections);\n  };\n\n  // New function to handle confirmed candidate switch\n  const handleConfirmCandidateSwitch = () => {\n    setShowCandidateSwitchModal(false);\n    setSelectedApplicant(pendingCandidateId);\n    setPendingCandidateId(null);\n  };\n\n  // New function to cancel candidate switch\n  const handleCancelCandidateSwitch = () => {\n    setShowCandidateSwitchModal(false);\n    setPendingCandidateId(null);\n\n    // Show the save confirmation modal to initiate the save process\n    setShowSaveConfirmModal(true);\n  };\n\n  // New function to handle applicant change with unsaved changes check\n  const handleApplicantChange = e => {\n    const newValue = e.target.value;\n\n    // Check if there are unsaved changes and sections exist with actual changes\n    if (!changesSaved && sections.length > 0 && selectedApplicant) {\n      // Create string representations for comparison\n      const sectionsJSON = JSON.stringify(sections);\n      const initialSectionsJSON = JSON.stringify(initialSections);\n\n      // Only show confirmation if there are actual changes\n      if (sectionsJSON !== initialSectionsJSON) {\n        // Store the pending candidate ID and show confirmation modal\n        setPendingCandidateId(newValue);\n        setShowCandidateSwitchModal(true);\n      } else {\n        // If no actual changes despite the flag, just switch directly\n        setSelectedApplicant(newValue);\n        // Reset the changesSaved flag to true since there are no real changes\n        setChangesSaved(true);\n      }\n    } else {\n      // If no unsaved changes or no sections, switch directly\n      setSelectedApplicant(newValue);\n    }\n  };\n\n  // Handle confirmation modal actions\n  const handleConfirmSectionDelete = () => {\n    if (sectionToDelete !== null) {\n      removeSection(sectionToDelete);\n      setSectionToDelete(null);\n    }\n    setShowConfirmModal(false);\n  };\n  const handleCancelSectionDelete = () => {\n    setSectionToDelete(null);\n    setShowConfirmModal(false);\n  };\n  const handleAddQuestion = sectionIndex => {\n    const updatedSections = [...sections];\n    // Initialize each question with empty text, a default time of 60 seconds, and isCompulsory flag\n    updatedSections[sectionIndex].questions.push({\n      text: \"\",\n      timeLimit: 60,\n      isCompulsory: true\n    });\n    setSections(updatedSections);\n  };\n  const handleQuestionChange = (sectionIndex, questionIndex, value) => {\n    const updatedSections = [...sections];\n    const question = updatedSections[sectionIndex].questions[questionIndex];\n\n    // If the question is AI generated, check modification status\n    if (question.isAIGenerated) {\n      // Store original text if we haven't already (first edit)\n      if (!question.originalText && !question.isAIModified) {\n        question.originalText = question.text;\n      }\n\n      // Check if the current text matches the original text\n      if (question.originalText && value === question.originalText) {\n        // If text has been restored to original AI generated version, remove modified flag\n        question.isAIModified = false;\n      } else if (question.text !== value) {\n        // If text is different from both current and original, mark as modified\n        question.isAIModified = true;\n      }\n    }\n    question.text = value;\n    setSections(updatedSections);\n  };\n  const handleQuestionTimeChange = (sectionIndex, questionIndex, value) => {\n    const updatedSections = [...sections];\n    // Ensure the time is a positive number\n    const timeLimit = Math.max(1, parseInt(value) || 0);\n    const question = updatedSections[sectionIndex].questions[questionIndex];\n\n    // Store original value on first edit\n    if (question.isAIGenerated && !question.originalTimeLimit && !question.isAIModified) {\n      question.originalTimeLimit = question.timeLimit;\n    }\n\n    // Mark as modified if it's AI-generated and time limit changes\n    if (question.isAIGenerated) {\n      // Check if time is being restored to original value\n      if (question.originalTimeLimit && timeLimit === question.originalTimeLimit) {\n        // Check if text is also at original value to fully restore unmodified state\n        const isTextOriginal = !question.originalText || question.text === question.originalText;\n        const isCompulsoryOriginal = !question.hasOwnProperty('originalCompulsory') || question.isCompulsory === question.originalCompulsory;\n        if (isTextOriginal && isCompulsoryOriginal) {\n          question.isAIModified = false;\n        }\n      } else if (question.timeLimit !== timeLimit) {\n        question.isAIModified = true;\n      }\n    }\n    question.timeLimit = timeLimit;\n    setSections(updatedSections);\n  };\n  const handleQuestionCompulsoryChange = (sectionIndex, questionIndex, isCompulsory) => {\n    const updatedSections = [...sections];\n    const question = updatedSections[sectionIndex].questions[questionIndex];\n\n    // Store original value on first toggle\n    if (question.isAIGenerated && !question.hasOwnProperty('originalCompulsory') && !question.isAIModified) {\n      question.originalCompulsory = question.isCompulsory;\n    }\n\n    // Check if being restored to original value\n    if (question.isAIGenerated) {\n      if (question.hasOwnProperty('originalCompulsory') && isCompulsory === question.originalCompulsory) {\n        // Check if other properties are also at original values\n        const isTextOriginal = !question.originalText || question.text === question.originalText;\n        const isTimeOriginal = !question.originalTimeLimit || question.timeLimit === question.originalTimeLimit;\n        if (isTextOriginal && isTimeOriginal) {\n          question.isAIModified = false;\n        }\n      } else if (question.isCompulsory !== isCompulsory) {\n        question.isAIModified = true;\n      }\n    }\n    question.isCompulsory = isCompulsory;\n\n    // Count non-compulsory questions after this change\n    const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\n\n    // If making a question compulsory reduces non-compulsory count below 2, disable random\n    if (isCompulsory && nonCompulsoryCount < 2 && updatedSections[sectionIndex].randomSettings.enabled) {\n      updatedSections[sectionIndex].randomSettings.enabled = false;\n    }\n\n    // NEW: If more than 2 questions are now non-compulsory, enable random selection automatically\n    if (!isCompulsory && nonCompulsoryCount >= 2 && !updatedSections[sectionIndex].randomSettings.enabled) {\n      updatedSections[sectionIndex].randomSettings.enabled = true;\n      // Set default value for random count (half of non-compulsory, but at least 1)\n      const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\n      const defaultCount = Math.min(Math.floor(nonCompulsoryCount / 2), maxAllowed);\n      updatedSections[sectionIndex].randomSettings.count = Math.max(1, defaultCount);\n    }\n    setSections(updatedSections);\n  };\n  const handleSectionRandomSettingsChange = (sectionIndex, enabled) => {\n    const updatedSections = [...sections];\n    const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\n\n    // Check if there are enough non-compulsory questions to enable random selection\n    if (enabled && nonCompulsoryCount < 2) {\n      // If there are less than 2 non-compulsory questions, show an error\n      setErrorMessage(`Please ensure you have at least 2 non-compulsory questions in order to enable random selection.\n                The ${updatedSections[sectionIndex].title} section only has ${nonCompulsoryCount} non-compulsory question${nonCompulsoryCount === 1 ? '' : 's'}.`);\n      setShowErrorModal(true);\n      return; // Exit without updating the state - leave the checkbox unchecked\n    }\n\n    // Set the enabled state as requested\n    updatedSections[sectionIndex].randomSettings.enabled = enabled;\n\n    // If enabling random mode, set default count to half of non-compulsory questions (minimum 1)\n    // But ensure it's not equal to the total number of non-compulsory questions\n    if (enabled) {\n      const maxAllowed = Math.max(1, nonCompulsoryCount - 1); // Maximum is total count - 1\n      const defaultCount = Math.min(Math.floor(nonCompulsoryCount / 2), maxAllowed);\n      updatedSections[sectionIndex].randomSettings.count = Math.max(1, defaultCount);\n    } else {\n      // If disabling random selection, make all questions compulsory\n      updatedSections[sectionIndex].questions = updatedSections[sectionIndex].questions.map(question => {\n        // Create a new question object to avoid mutation\n        const updatedQuestion = {\n          ...question\n        };\n\n        // If the question is non-compulsory, we need to update it and handle AI modification status\n        if (!question.isCompulsory) {\n          // Store original value if it's an AI-generated question and hasn't been stored yet\n          if (question.isAIGenerated && !question.hasOwnProperty('originalCompulsory')) {\n            updatedQuestion.originalCompulsory = question.isCompulsory;\n          }\n\n          // Mark as modified if it's AI-generated and this is changing its state\n          if (question.isAIGenerated) {\n            updatedQuestion.isAIModified = true;\n          }\n\n          // Make it compulsory\n          updatedQuestion.isCompulsory = true;\n        }\n        return updatedQuestion;\n      });\n    }\n    setSections(updatedSections);\n  };\n  const handleRandomCountChange = (sectionIndex, count) => {\n    const updatedSections = [...sections];\n    const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\n\n    // Allow user to enter the number, but track if it's valid\n    // Maximum allowed is (nonCompulsoryCount - 1) to ensure it's truly random\n    const parsedCount = parseInt(count) || 0;\n    const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\n    const validCount = Math.min(parsedCount, maxAllowed);\n    updatedSections[sectionIndex].randomSettings.count = validCount;\n    updatedSections[sectionIndex].randomSettings.isCountValid = validCount > 0 && validCount <= maxAllowed;\n    setSections(updatedSections);\n  };\n  const handleRemoveQuestion = (sectionIndex, questionIndex) => {\n    const updatedSections = [...sections];\n\n    // Check if this is a non-compulsory question that's being removed\n    const isNonCompulsory = !updatedSections[sectionIndex].questions[questionIndex].isCompulsory;\n\n    // Remove the question\n    updatedSections[sectionIndex].questions.splice(questionIndex, 1);\n\n    // If it was a non-compulsory question, check if we need to disable random selection\n    if (isNonCompulsory) {\n      const remainingNonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\n\n      // If fewer than 2 non-compulsory questions remain, disable random selection\n      if (remainingNonCompulsoryCount < 2 && updatedSections[sectionIndex].randomSettings.enabled) {\n        updatedSections[sectionIndex].randomSettings.enabled = false;\n\n        // Can also display a brief notification to explain why it was automatically disabled\n        // Example: toast.info(\"Random selection was disabled as there are no longer enough non-compulsory questions.\")\n      }\n    }\n    setSections(updatedSections);\n  };\n  const handleViewProfile = () => {\n    // Placeholder for view profile functionality\n    console.log(\"View profile for candidate:\", selectedApplicant);\n    // This would typically navigate to a candidate profile page\n  };\n  const validateSections = () => {\n    // First check for empty question fields\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      for (let j = 0; j < section.questions.length; j++) {\n        if (!section.questions[j].text.trim()) {\n          setErrorMessage(`Please fill in all question fields. There is an empty question in the \"${section.title}\" section.`);\n          setShowErrorModal(true);\n          return false;\n        }\n      }\n\n      // Check each section with random questions enabled\n      if (section.randomSettings.enabled) {\n        const nonCompulsoryCount = section.questions.filter(q => !q.isCompulsory).length;\n        const selectedCount = section.randomSettings.count;\n        const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\n\n        // Check if there are enough non-compulsory questions\n        if (nonCompulsoryCount < 2) {\n          setErrorMessage(`Random selection requires at least 2 non-compulsory questions. \n                        The \"${section.title}\" section only has ${nonCompulsoryCount} non-compulsory question${nonCompulsoryCount === 1 ? '' : 's'}.`);\n          setShowErrorModal(true);\n          return false;\n        }\n\n        // Validate that the selected count is in the valid range\n        if (selectedCount <= 0 || selectedCount > maxAllowed) {\n          setErrorMessage(`In \"${section.title}\" section, you can select between 1 and ${maxAllowed} random questions.`);\n          setShowErrorModal(true);\n          return false;\n        }\n      } else {\n        // NEW: Check for sections that have exactly 1 non-compulsory question but random selection is not enabled\n        const nonCompulsoryCount = section.questions.filter(q => !q.isCompulsory).length;\n        if (nonCompulsoryCount === 1) {\n          setErrorMessage(`The \"${section.title}\" section has exactly 1 non-compulsory question. \n                        Either make all questions compulsory or make at least one more question non-compulsory and enable random selection.`);\n          setShowErrorModal(true);\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  // Calculate total interview time whenever questions change\n  useEffect(() => {\n    let totalSeconds = 0;\n    let totalQuestions = 0;\n    let effectiveQuestions = 0;\n    sections.forEach(section => {\n      // Count total questions in this section\n      totalQuestions += section.questions.length;\n\n      // For sections with random selection, calculate based on compulsory questions \n      // plus the number of random questions that will be selected\n      if (section.randomSettings.enabled) {\n        // Count compulsory questions for effective total\n        const compulsoryQuestions = section.questions.filter(q => q.isCompulsory);\n        effectiveQuestions += compulsoryQuestions.length;\n\n        // Add random questions to effective total\n        if (section.randomSettings.count > 0) {\n          effectiveQuestions += section.randomSettings.count;\n        }\n\n        // Count seconds from compulsory questions\n        const compulsoryTime = compulsoryQuestions.reduce((sum, q) => sum + (q.timeLimit || 0), 0);\n\n        // Calculate average time for random questions\n        const nonCompulsoryQuestions = section.questions.filter(q => !q.isCompulsory);\n        const randomCount = section.randomSettings.count;\n        if (nonCompulsoryQuestions.length > 0 && randomCount > 0) {\n          // Calculate average time per non-compulsory question\n          const avgTimePerQuestion = nonCompulsoryQuestions.reduce((sum, q) => sum + (q.timeLimit || 0), 0) / nonCompulsoryQuestions.length;\n          // Add time for random questions (average time * number of random questions)\n          totalSeconds += compulsoryTime + avgTimePerQuestion * randomCount;\n        } else {\n          totalSeconds += compulsoryTime;\n        }\n      } else {\n        // For sections without random selection, add up all question times\n        section.questions.forEach(question => {\n          totalSeconds += question.timeLimit || 0;\n        });\n        // All questions count for effective total if random selection is disabled\n        effectiveQuestions += section.questions.length;\n      }\n    });\n\n    // Convert to minutes and seconds\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    setTotalInterviewTime({\n      minutes,\n      seconds,\n      totalQuestions,\n      effectiveQuestions\n    });\n  }, [sections]);\n\n  // Add this function after the handleSave function to generate actual questions after saving\n  const handleGenerateActualQuestions = async () => {\n    if (!selectedApplicant || selectedApplicant === \"all\") {\n      setErrorMessage(\"Please select a specific applicant to generate questions for.\");\n      setShowErrorModal(true);\n      return;\n    }\n    setIsLoading(true);\n    setLoadingOperation(\"Generating\");\n    try {\n      // Call the API to generate actual questions\n      const response = await axios.post(`http://localhost:8000/api/interview-questions/generate-actual-questions/${selectedApplicant}`);\n      if (response.status === 200 || response.status === 201) {\n        console.log(\"Actual questions generated successfully:\", response.data);\n        // You can add a specific success message for generation if needed\n        // or just use the same success modal\n      } else {\n        console.error(\"Unexpected response status:\", response.status);\n        setErrorMessage(\"Failed to generate actual questions. Please try again.\");\n        setShowErrorModal(true);\n      }\n    } catch (error) {\n      console.error(\"Error generating actual questions:\", error);\n      let errorMsg = \"An error occurred while generating questions. Please try again.\";\n      if (error.response) {\n        console.error(\"Error response data:\", error.response.data);\n        errorMsg = `Server error: ${error.response.data.detail || error.message}`;\n      }\n      setErrorMessage(errorMsg);\n      setShowErrorModal(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Modify the handleSave function to also generate actual questions after saving\n  const handleSave = async () => {\n    // Check if total interview time is less than 5 minutes\n    const totalMinutes = totalInterviewTime.minutes + (totalInterviewTime.seconds > 0 ? 1 : 0); // Round up if there are seconds\n    if (totalMinutes < 5) {\n      setErrorMessage(`Your total interview time is less than 5 minutes (currently ${totalInterviewTime.minutes} minute${totalInterviewTime.minutes !== 1 ? 's' : ''} ${totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''} ` : ''}).\n                Please add more questions or increase the time limits to ensure a thorough interview.`);\n      setShowErrorModal(true);\n      return;\n    }\n\n    // Validate before saving\n    if (!validateSections()) {\n      return;\n    }\n    if (sections.length === 0 || !selectedApplicant) {\n      setErrorMessage(\"Please add at least one section with questions and select an applicant before saving.\");\n      setShowErrorModal(true);\n      return;\n    }\n    setIsLoading(true); // Show loading animation\n    setLoadingOperation(\"Saving\"); // Set the loading operation\n\n    try {\n      // Prepare the payload - making sure to correctly include isAIModified flags\n      const validSections = sections.map(section => ({\n        ...section,\n        sectionId: section.sectionId || `sect-${Date.now()}`,\n        // Generate sectionId if missing\n        questions: section.questions.map(question => {\n          // Create a new question object to avoid mutation\n          const processedQuestion = {\n            ...question,\n            questionId: question.questionId || `ques-${Date.now()}` // Generate questionId if missing\n          };\n\n          // Ensure the isAIModified flag is included if present\n          if (processedQuestion.isAIGenerated && processedQuestion.isAIModified) {\n            processedQuestion.isAIModified = true;\n          }\n          return processedQuestion;\n        })\n      })).filter(section => section.questions.length > 0);\n      const payload = {\n        applicationId: selectedApplicant,\n        // Ensure correct applicationId is used\n        candidateId: selectedApplicant === \"all\" ? \"all\" : selectedApplicant,\n        sections: validSections,\n        // Add AI generation usage info to the payload - true if either already used or newly used\n        aiGenerationUsed: selectedApplicant !== \"all\" && (aiGenerateUsedMap[selectedApplicant] || aiGeneratedUnsaved)\n      };\n\n      // Check if a question set already exists for the selected candidate\n      let questionSetId = null;\n      try {\n        const checkResponse = await axios.get(`http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`);\n        if (checkResponse.data) {\n          questionSetId = checkResponse.data.questionSetId; // Extract the existing questionSetId\n          console.log(\"Found existing question set with ID:\", questionSetId);\n        }\n      } catch (error) {\n        // Only log error, don't return - we can still create a new question set\n        if (error.response && error.response.status === 404) {\n          console.log(\"No existing question set found, will create a new one.\");\n        } else {\n          console.error(\"Error checking existing question set:\", error);\n        }\n      }\n\n      // If a question set exists, include the `questionSetId` in the payload\n      if (questionSetId) {\n        payload.questionSetId = questionSetId;\n      }\n      console.log(\"Saving InterviewQuestionSet with payload:\", payload);\n      const saveResponse = await axios.post(\"http://localhost:8000/api/interview-questions/save-question-set\", payload);\n      console.log(\"Save response:\", saveResponse);\n      if (saveResponse.status === 200 || saveResponse.status === 201) {\n        console.log(\"Questions saved successfully:\", saveResponse.data);\n        setChangesSaved(true); // Mark changes as saved after successful save\n        setInitialSections(JSON.parse(JSON.stringify(sections))); // Deep copy\n\n        // If there are unsaved AI generated sections, permanently mark AI as used for this candidate\n        if (aiGeneratedUnsaved) {\n          setAiGenerateUsedMap(prev => ({\n            ...prev,\n            [selectedApplicant]: true\n          }));\n          setAiGeneratedUnsaved(false);\n        }\n\n        // After saving successfully, generate actual questions if this is for a specific candidate\n        if (selectedApplicant !== \"all\") {\n          try {\n            // Call the API to generate actual questions\n            setLoadingOperation(\"Generating Interview Questions\");\n            const genResponse = await axios.post(`http://localhost:8000/api/interview-questions/generate-actual-questions/${selectedApplicant}`);\n            if (genResponse.status === 200 || genResponse.status === 201) {\n              console.log(\"Actual questions generated successfully:\", genResponse.data);\n            } else {\n              console.warn(\"Failed to generate actual questions after saving.\");\n            }\n          } catch (genError) {\n            console.error(\"Error generating actual questions after saving:\", genError);\n            // Don't show error modal for this, as the main save was successful\n          }\n        }\n        setShowSuccessModal(true); // Show success modal\n      } else {\n        console.error(\"Unexpected response status:\", saveResponse.status);\n        setErrorMessage(\"Failed to save questions. Please try again.\");\n        setShowErrorModal(true);\n      }\n    } catch (error) {\n      console.error(\"Error saving questions:\", error);\n      let errorMsg = \"An error occurred while saving questions. Please try again.\";\n      if (error.response) {\n        console.error(\"Error response data:\", error.response.data);\n        errorMsg = `Server error: ${error.response.data.detail || error.message}`;\n      }\n      setErrorMessage(errorMsg);\n      setShowErrorModal(true);\n    } finally {\n      setIsLoading(false); // Hide loading animation\n    }\n  };\n\n  // Add a function to handle initiating the save process with confirmation\n  const handleInitiateSave = () => {\n    if (sections.length === 0 || !selectedApplicant) {\n      setErrorMessage(\"Please add at least one section with questions and select an applicant before saving.\");\n      setShowErrorModal(true);\n      return;\n    }\n\n    // Check if this is an \"Apply to All\" case\n    if (selectedApplicant === \"all\") {\n      // Before showing the modal, perform basic validation to prevent showing modals twice\n      // Check if total interview time is less than 5 minutes\n      const totalMinutes = totalInterviewTime.minutes + (totalInterviewTime.seconds > 0 ? 1 : 0);\n      if (totalMinutes < 5) {\n        setErrorMessage(`Your total interview time is less than 5 minutes (currently ${totalInterviewTime.minutes} minute${totalInterviewTime.minutes !== 1 ? 's' : ''} ${totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''}` : ''}).\n                    Please add more questions or increase the time limits to ensure a thorough interview.`);\n        setShowErrorModal(true);\n        return;\n      }\n\n      // Also validate sections before showing the apply-to-all modal\n      if (!validateSections()) {\n        return;\n      }\n\n      // Show the Apply to All confirmation modal only if validation passed\n      setShowApplyToAllModal(true);\n    } else {\n      // Regular case - show the standard save confirmation\n      setShowSaveConfirmModal(true);\n    }\n  };\n\n  // Modify handleGoBackToJobDetails to check for unsaved changes\n  const handleGoBackToJobDetails = () => {\n    // Check if there are unsaved changes\n    if (!changesSaved && sections.length > 0) {\n      // Double-check with string comparison for actual changes\n      const sectionsJSON = JSON.stringify(sections);\n      const initialSectionsJSON = JSON.stringify(initialSections);\n      if (sectionsJSON !== initialSectionsJSON) {\n        // Show confirmation modal\n        setShowNavigationModal(true);\n      } else {\n        // No actual changes, navigate directly\n        navigateToJobDetails();\n      }\n    } else {\n      // No changes or changes saved, navigate directly\n      navigateToJobDetails();\n    }\n  };\n\n  // New function to handle actual navigation after confirmation\n  const navigateToJobDetails = () => {\n    // Show loading animation\n    setIsNavigatingBack(true);\n\n    // Extract jobId from the URL query params to navigate back to job details\n    const jobId = queryParams.get('jobId');\n\n    // Use React Router's navigate\n    setTimeout(() => {\n      if (jobId) {\n        navigate(`/dashboard`, {\n          state: {\n            directToJobDetails: true,\n            jobId: jobId\n          }\n        });\n      } else {\n        navigate(\"/dashboard\");\n      }\n    }, 800);\n  };\n\n  // Add handler for confirming navigation\n  const handleConfirmNavigation = () => {\n    setShowNavigationModal(false);\n    navigateToJobDetails();\n  };\n\n  // Add handler for canceling navigation\n  const handleCancelNavigation = () => {\n    setShowNavigationModal(false);\n  };\n\n  // This function gets triggered when the user selects \"Apply to All\" from the dropdown\n  useEffect(() => {\n    // Empty effect that doesn't do anything special when \"Apply to All\" is selected\n    // No need to try loading templates from other candidates\n  }, [selectedApplicant]);\n\n  // Function to apply questions to all candidates\n  const handleApplyToAll = async (overwriteExisting = true) => {\n    // First close the apply-to-all modal to prevent it from showing again\n    setShowApplyToAllModal(false);\n\n    // Since we already validated in handleInitiateSave, we can proceed directly with saving\n    setIsLoading(true);\n    setLoadingOperation(\"Applying\"); // Set the loading operation\n\n    try {\n      // First get all candidates for this job\n      const candidatesResponse = await axios.get(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\n      if (!candidatesResponse.data || candidatesResponse.data.length === 0) {\n        setErrorMessage(\"No candidates found for this job.\");\n        setShowErrorModal(true);\n        setIsLoading(false);\n        return;\n      }\n\n      // Prepare the question set data\n      const questionSet = {\n        sections: sections.map(section => ({\n          ...section,\n          sectionId: section.sectionId || `sect-${Date.now()}`,\n          questions: section.questions.map(question => ({\n            ...question,\n            questionId: question.questionId || `ques-${Date.now()}`\n          }))\n        }))\n      };\n\n      // Send request to apply to all\n      const payload = {\n        jobId: jobId,\n        questionSet: questionSet,\n        candidates: candidatesResponse.data,\n        overwriteExisting: overwriteExisting,\n        // Add a flag to force overwrite even for AI-generated content\n        forceOverwrite: overwriteExisting\n      };\n      const response = await axios.post(\"http://localhost:8000/api/interview-questions/apply-to-all\", payload);\n\n      // Set status to show in completion modal\n      setApplyToAllStatus({\n        successful: response.data.successful.length,\n        failed: response.data.failed.length,\n        skipped: response.data.skipped.length,\n        total: candidatesResponse.data.length\n      });\n\n      // Mark as saved and show success modal\n      setChangesSaved(true);\n      setShowSuccessModal(true);\n    } catch (error) {\n      console.error(\"Error applying questions to all candidates:\", error);\n      setErrorMessage(`Failed to apply questions to all candidates: ${error.message}`);\n      setShowErrorModal(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to handle the reset action - update to enable for any applicant including \"all\"\n  const handleResetQuestions = async () => {\n    // Check if no applicant is selected\n    if (!selectedApplicant) {\n      setErrorMessage(\"Please select an applicant first to reset questions.\");\n      setShowErrorModal(true);\n      return;\n    }\n\n    // Special handling for \"Apply to All\" option\n    if (selectedApplicant === \"all\") {\n      // For \"Apply to All\", we only need to check if there are unsaved changes to reset\n      if (sections.length > 0) {\n        // Show confirmation modal\n        setShowUnsavedResetModal(true);\n      } else {\n        // No sections to reset\n        setErrorMessage(\"No interview questions to reset.\");\n        setShowErrorModal(true);\n      }\n      return;\n    }\n\n    // Regular individual applicant reset logic\n    try {\n      // Check if there's a saved question set for this candidate\n      // eslint-disable-next-line no-unused-vars\n      const response = await axios.get(`http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`);\n\n      // There is a saved question set - show standard reset confirmation\n      setShowResetConfirmModal(true);\n    } catch (error) {\n      // If 404, no saved question set exists\n      if (error.response && error.response.status === 404) {\n        // Check if there are unsaved changes in the UI (sections exist)\n        if (sections.length > 0) {\n          // Show unsaved reset confirmation modal\n          setShowUnsavedResetModal(true);\n        } else {\n          // No question set exists and no sections added - nothing to reset\n          setErrorMessage(\"No interview questions found for this applicant.\");\n          setShowErrorModal(true);\n        }\n      } else {\n        setErrorMessage(`Error checking question set: ${error.message || \"Unknown error\"}`);\n        setShowErrorModal(true);\n      }\n    }\n  };\n\n  // Function to perform the actual reset after confirmation\n  const performReset = async () => {\n    setShowResetConfirmModal(false);\n    setIsLoading(true);\n    setLoadingOperation(\"Resetting\"); // Set the loading operation to \"Resetting\"\n\n    try {\n      const response = await axios.delete(`http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`);\n      if (response.status === 200) {\n        // Clear the sections in the UI\n        setSections([]);\n        setChangesSaved(true);\n\n        // Show success modal instead of error modal\n        setShowResetSuccessModal(true);\n      } else {\n        throw new Error(\"Unexpected response status\");\n      }\n    } catch (error) {\n      console.error(\"Error resetting questions:\", error);\n\n      // If 404, show message that there are no questions to delete\n      if (error.response && error.response.status === 404) {\n        setErrorMessage(\"No interview questions found for this applicant.\");\n        setShowErrorModal(true);\n      } else {\n        setErrorMessage(`Error resetting questions: ${error.message || \"Unknown error\"}`);\n        setShowErrorModal(true);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const SuccessModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal success-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon success-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1219,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: selectedApplicant === \"all\" && applyToAllStatus ? \"Questions Applied to All Candidates\" : \"Questions Saved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 17\n      }, this), selectedApplicant === \"all\" && applyToAllStatus ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Applied to \", applyToAllStatus.successful, \" out of \", applyToAllStatus.total, \" candidates.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1229,\n          columnNumber: 25\n        }, this), applyToAllStatus.skipped > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Skipped \", applyToAllStatus.skipped, \" candidates with existing questions.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 29\n        }, this), applyToAllStatus.failed > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: [\"Failed for \", applyToAllStatus.failed, \" candidates.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1234,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Your interview questions have been saved successfully.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => {\n            setShowSuccessModal(false);\n            if (selectedApplicant === \"all\") {\n              // After applying to all, reset to empty selection\n              setSelectedApplicant(\"\");\n            }\n          },\n          children: selectedApplicant === \"all\" ? \"Continue\" : \"Add More Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => {\n            // Since we know changes are saved, navigate directly\n            navigateToJobDetails();\n          },\n          children: \"Return to Job Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1253,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1215,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1214,\n    columnNumber: 9\n  }, this);\n  const ErrorModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal error-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon error-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"8\",\n            x2: \"12\",\n            y2: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"16\",\n            x2: \"12.01\",\n            y2: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1274,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1271,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Validation Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowErrorModal(false),\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1280,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1268,\n    columnNumber: 9\n  }, this);\n\n  // Add confirmation modal component\n  const ConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1297,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1299,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1296,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Delete Section?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Are you sure you want to delete this section? All questions in this section will be lost.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: handleCancelSectionDelete,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: handleConfirmSectionDelete,\n          children: \"Delete Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1308,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1304,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1294,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1293,\n    columnNumber: 9\n  }, this);\n\n  // Add SaveConfirmModal component\n  const SaveConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon confirm-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1322,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"8\",\n            x2: \"12\",\n            y2: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1323,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"16\",\n            x2: \"12.01\",\n            y2: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1324,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1321,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Save Interview Questions?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: [\"Are you sure you want to save the changes to this set of interview questions consisting of \", totalInterviewTime.minutes, \" minute\", totalInterviewTime.minutes !== 1 ? 's' : '', \" \", totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''} ` : '', \"total interview time?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => setShowSaveConfirmModal(false),\n          children: \"Continue Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => {\n            setShowSaveConfirmModal(false);\n            handleSave();\n          },\n          children: \"Yes, Save Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1335,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1318,\n    columnNumber: 9\n  }, this);\n\n  // Add NavigationConfirmModal component\n  const NavigationConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1355,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1356,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1357,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1354,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Unsaved Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Are you sure you want to leave this page? All interview sections/questions will be lost.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: handleCancelNavigation,\n          children: \"Stay on This Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1363,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: handleConfirmNavigation,\n          children: \"Leave Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1366,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1352,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1351,\n    columnNumber: 9\n  }, this);\n\n  // Create a new modal component for Apply to All confirmation\n  const ApplyToAllModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1380,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"8\",\n            x2: \"12\",\n            y2: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1381,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"16\",\n            x2: \"12.01\",\n            y2: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1382,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1379,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1378,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Apply to All Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"You are about to apply these interview questions to all candidates for this job. Some candidates may already have interview questions set up.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => setShowApplyToAllModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1391,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => handleApplyToAll(true),\n          style: {\n            pointerEvents: 'auto',\n            opacity: 1\n          } /* Ensure button is clickable */,\n          children: \"Proceed to Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1376,\n    columnNumber: 9\n  }, this);\n\n  // Add ResetConfirmModal component\n  const ResetConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1415,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1416,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1417,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1414,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Reset All Questions?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1420,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"This will permanently delete all interview questions for this applicant. This action cannot be undone.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => setShowResetConfirmModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button danger-button\",\n          onClick: performReset,\n          children: \"Yes, Reset All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1428,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1412,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1411,\n    columnNumber: 9\n  }, this);\n\n  // Add ResetSuccessModal component\n  const ResetSuccessModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal success-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon success-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1442,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1443,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1441,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Reset Successful\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"Interview questions have been reset successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: () => setShowResetSuccessModal(false),\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1449,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1448,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1439,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1438,\n    columnNumber: 9\n  }, this);\n\n  // Add UnsavedResetModal component\n  const UnsavedResetModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1466,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1467,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1468,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1465,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Discard Unsaved Changes?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: \"You haven't saved these questions yet. Are you sure you want to discard all the sections and questions you've just created?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => setShowUnsavedResetModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1476,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button danger-button\",\n          onClick: () => {\n            setShowUnsavedResetModal(false);\n            if (selectedApplicant === \"all\") {\n              // Handle Apply to All discard action - FIXED: Don't call handleApplyToAll \n              resetUI(true); // Keep the selected applicant\n              setChangesSaved(true); // Mark as saved after reset\n              setShowResetSuccessModal(true); // Show success message\n            } else {\n              // Regular reset for individual candidates\n              resetUI(true); // Keep the selected applicant\n              setChangesSaved(true); // Mark as saved after reset\n              // Show success message\n              setShowResetSuccessModal(true);\n            }\n          },\n          children: \"Discard Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1479,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1463,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1462,\n    columnNumber: 9\n  }, this);\n\n  // Update CandidateSwitchModal component\n  const CandidateSwitchModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"9\",\n            x2: \"12\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1508,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"12\",\n            y1: \"17\",\n            x2: \"12.01\",\n            y2: \"17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1509,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1506,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"Unsaved Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: selectedApplicant === \"all\" ? \"You have unsaved interview questions that will apply to all candidates. Switching to another candidate will cause your unsaved changes to be lost.\" : \"You have unsaved interview questions for the current candidate. Switching to another candidate will cause your unsaved changes to be lost.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: handleCancelCandidateSwitch,\n          children: \"Stay and Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button danger-button\",\n          onClick: handleConfirmCandidateSwitch,\n          children: \"Switch Candidate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1522,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1518,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1504,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1503,\n    columnNumber: 9\n  }, this);\n\n  // Modify the AI Generate function to show confirmation first\n  const handleAIGenerate = () => {\n    // Check if any applicant is selected\n    if (!selectedApplicant) {\n      setErrorMessage(\"Please select an applicant first before generating AI questions.\");\n      setShowErrorModal(true);\n      return;\n    }\n\n    // Check if AI has already been used for this specific candidate\n    if (selectedApplicant !== \"all\" && aiGenerateUsedMap[selectedApplicant]) {\n      setErrorMessage(\"AI generation has been used up for this candidate. You can modify the existing AI-generated questions.\");\n      setShowErrorModal(true);\n      return;\n    }\n\n    // Show confirmation dialog instead of generating immediately\n    setShowAIConfirmModal(true);\n  };\n\n  // New function to handle actual AI generation after confirmation\n  const handleConfirmAIGenerate = () => {\n    setShowAIConfirmModal(false);\n\n    // AI generation code moved here from handleAIGenerate\n    const aiGeneratedSections = [{\n      title: \"Technical Skills\",\n      questions: [{\n        text: \"Can you describe your experience with our required technologies?\",\n        timeLimit: 60,\n        isCompulsory: true,\n        isAIGenerated: true,\n        // Store original values to detect if restored\n        originalText: \"Can you describe your experience with our required technologies?\",\n        originalTimeLimit: 60,\n        originalCompulsory: true\n      }, {\n        text: \"What technical challenges have you faced in your previous roles?\",\n        timeLimit: 90,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"What technical challenges have you faced in your previous roles?\",\n        originalTimeLimit: 90,\n        originalCompulsory: false\n      }, {\n        text: \"How do you stay updated with industry developments?\",\n        timeLimit: 45,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"How do you stay updated with industry developments?\",\n        originalTimeLimit: 45,\n        originalCompulsory: false\n      }],\n      randomSettings: {\n        enabled: true,\n        count: 1\n      },\n      isAIGenerated: true\n    }, {\n      title: \"Problem Solving\",\n      questions: [{\n        text: \"Describe a complex problem you solved in your previous role.\",\n        timeLimit: 120,\n        isCompulsory: true,\n        isAIGenerated: true,\n        originalText: \"Describe a complex problem you solved in your previous role.\",\n        originalTimeLimit: 120,\n        originalCompulsory: true\n      }, {\n        text: \"How do you approach troubleshooting technical issues?\",\n        timeLimit: 60,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"How do you approach troubleshooting technical issues?\",\n        originalTimeLimit: 60,\n        originalCompulsory: false\n      }, {\n        text: \"Tell me about a time when you had to make a decision with incomplete information.\",\n        timeLimit: 90,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"Tell me about a time when you had to make a decision with incomplete information.\",\n        originalTimeLimit: 90,\n        originalCompulsory: false\n      }],\n      randomSettings: {\n        enabled: true,\n        count: 1\n      },\n      isAIGenerated: true\n    }, {\n      title: \"Team Collaboration\",\n      questions: [{\n        text: \"How do you handle disagreements within your team?\",\n        timeLimit: 60,\n        isCompulsory: true,\n        isAIGenerated: true,\n        originalText: \"How do you handle disagreements within your team?\",\n        originalTimeLimit: 60,\n        originalCompulsory: true\n      }, {\n        text: \"Describe your experience working in cross-functional teams.\",\n        timeLimit: 75,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"Describe your experience working in cross-functional teams.\",\n        originalTimeLimit: 75,\n        originalCompulsory: false\n      }, {\n        text: \"How do you ensure effective communication in remote work settings?\",\n        timeLimit: 60,\n        isCompulsory: false,\n        isAIGenerated: true,\n        originalText: \"How do you ensure effective communication in remote work settings?\",\n        originalTimeLimit: 60,\n        originalCompulsory: false\n      }],\n      randomSettings: {\n        enabled: true,\n        count: 1\n      },\n      isAIGenerated: true\n    }];\n\n    // Append AI sections instead of replacing\n    setSections(prevSections => [...prevSections, ...aiGeneratedSections]);\n\n    // Mark that AI has been used but not yet saved\n    setAiGeneratedUnsaved(true);\n\n    // If applicant is \"all\", don't add to aiGenerateUsedMap since it's for all applicants\n    if (selectedApplicant !== \"all\") {\n      setAiGenerateUsedMap(prev => ({\n        ...prev,\n        [selectedApplicant]: true\n      }));\n    }\n\n    // Show success message\n    setShowAISuccess(true);\n\n    // Hide the success message after 3 seconds\n    setTimeout(() => {\n      setShowAISuccess(false);\n    }, 3000);\n  };\n  const handleStartEditingSection = (sectionIndex, currentTitle) => {\n    setEditingSectionIndex(sectionIndex);\n    setEditedSectionTitle(currentTitle);\n  };\n  const handleSaveSectionTitle = sectionIndex => {\n    if (editedSectionTitle.trim()) {\n      const updatedSections = [...sections];\n      updatedSections[sectionIndex].title = editedSectionTitle.trim();\n      setSections(updatedSections);\n    }\n    setEditingSectionIndex(null);\n  };\n  const handleKeyPressSectionTitle = (e, sectionIndex) => {\n    if (e.key === 'Enter') {\n      handleSaveSectionTitle(sectionIndex);\n    } else if (e.key === 'Escape') {\n      setEditingSectionIndex(null);\n    }\n  };\n\n  // Show loading when navigating back or initially fetching job details\n  if (isNavigatingBack || isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '80vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: isNavigatingBack ? \"Returning to Job Details...\" : `${loadingOperation} Interview Questions...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1726,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1718,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Create AIConfirmModal component\n  const AIConfirmModal = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon warning-icon ai-warning-icon\",\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1741,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1740,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1739,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"status-title\",\n        children: \"One-Time AI Generation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1744,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-description\",\n        children: [\"AI question generation can only be used \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"once per candidate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1746,\n          columnNumber: 57\n        }, this), \". Once you click '\", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1747,\n          columnNumber: 33\n        }, this), \"',  you cannot use it again. Be careful when modifying or deleting questions, as you won\\u2019t be able to regenerate them unless you delete the entire set.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1745,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button secondary-button\",\n          onClick: () => setShowAIConfirmModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1751,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"status-button primary-button\",\n          onClick: handleConfirmAIGenerate,\n          children: \"Generate Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1757,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1750,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1738,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1737,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-interview-questions-container\",\n    children: [showSuccessModal && /*#__PURE__*/_jsxDEV(SuccessModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1770,\n      columnNumber: 34\n    }, this), showErrorModal && /*#__PURE__*/_jsxDEV(ErrorModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1771,\n      columnNumber: 32\n    }, this), showResetSuccessModal && /*#__PURE__*/_jsxDEV(ResetSuccessModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1772,\n      columnNumber: 39\n    }, this), showConfirmModal && /*#__PURE__*/_jsxDEV(ConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1773,\n      columnNumber: 34\n    }, this), showSaveConfirmModal && /*#__PURE__*/_jsxDEV(SaveConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1774,\n      columnNumber: 38\n    }, this), showNavigationModal && /*#__PURE__*/_jsxDEV(NavigationConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1775,\n      columnNumber: 37\n    }, this), showApplyToAllModal && /*#__PURE__*/_jsxDEV(ApplyToAllModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1776,\n      columnNumber: 37\n    }, this), showResetConfirmModal && /*#__PURE__*/_jsxDEV(ResetConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1777,\n      columnNumber: 39\n    }, this), showUnsavedResetModal && /*#__PURE__*/_jsxDEV(UnsavedResetModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1778,\n      columnNumber: 39\n    }, this), showCandidateSwitchModal && /*#__PURE__*/_jsxDEV(CandidateSwitchModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1779,\n      columnNumber: 42\n    }, this), showAIConfirmModal && /*#__PURE__*/_jsxDEV(AIConfirmModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1780,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleGoBackToJobDetails,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"back-icon\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          viewBox: \"0 0 24 24\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: \"2\",\n            d: \"M15 19l-7-7 7-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1786,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1785,\n          columnNumber: 21\n        }, this), \"Back to Job Details\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1784,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Interview Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1791,\n          columnNumber: 21\n        }, this), jobDetails && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-title-reference\",\n          children: [\"for \", jobDetails.jobTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1792,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1790,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1783,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"interview-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"applicant-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"applicant-select\",\n            children: \"Select an applicant:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1801,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"applicant-select\",\n              value: selectedApplicant,\n              onChange: handleApplicantChange,\n              disabled: isLoadingApplicants,\n              title: selectedApplicant,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"-- Select applicant --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1810,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"Apply to All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1811,\n                columnNumber: 33\n              }, this), applicants.map(app => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: app.candidateId,\n                title: app.candidateId,\n                children: app.candidateId\n              }, app.candidateId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1813,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1803,\n              columnNumber: 29\n            }, this), selectedApplicant && selectedApplicant !== \"all\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"view-profile-button\",\n              onClick: handleViewProfile,\n              \"aria-label\": \"View applicant profile\",\n              children: \"View Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1820,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1802,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1800,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-generate-button-container\",\n          children: [showAISuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-success-message\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2713 AI-generated sections added successfully!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1834,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1833,\n            columnNumber: 29\n          }, this), selectedApplicant && selectedApplicant !== \"all\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [!aiGenerateUsedMap[selectedApplicant] && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"butterfly\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1843,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"butterfly\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1844,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"butterfly\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1845,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"butterfly\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1846,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `ai-generate-button ${aiGenerateUsedMap[selectedApplicant] ? 'used' : ''}`,\n              onClick: handleAIGenerate,\n              title: aiGenerateUsedMap[selectedApplicant] ? \"AI generation has already been used for this candidate\" : \"Generate interview questions with AI\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"ai-icon\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                viewBox: \"0 0 24 24\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: \"2\",\n                  d: \"M13 10V3L4 14h7v7l9-11h-7z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1859,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1858,\n                columnNumber: 37\n              }, this), aiGenerateUsedMap[selectedApplicant] ? \"AI Sections Added\" : \"AI Generate Questions\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1849,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1831,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1799,\n        columnNumber: 17\n      }, this), selectedApplicant && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-creator\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Add New Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1873,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"section-title-input\",\n            placeholder: \"Enter section title (e.g., Technical Skills, Work Experience)\",\n            value: newSectionTitle,\n            onChange: e => setNewSectionTitle(e.target.value),\n            onKeyPress: e => e.key === \"Enter\" && handleAddSection()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1875,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-section-button\",\n            onClick: handleAddSection,\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              strokeWidth: \"1.5\",\n              stroke: \"currentColor\",\n              className: \"add-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                d: \"M12 4.5v15m7.5-7.5h-15\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1885,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1884,\n              columnNumber: 33\n            }, this), \"Add Section\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1883,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1874,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1872,\n        columnNumber: 21\n      }, this), !selectedApplicant ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-sections applicant-select-prompt\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          strokeWidth: \"1.5\",\n          stroke: \"currentColor\",\n          className: \"empty-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            d: \"M9.75 3.104v5.714a2.25 2.25 0 01-.659 1.591L5 14.5M9.75 3.104c-.251.023-.501.05-.75.082m.75-.082a24.301 24.301 0 014.5 0m0 0v5.714c0 .597.237 1.17.659 1.591L19.8 15.3M14.25 3.104c.251.023.501.05.75.082M19.8 15.3l-1.57.393A9.065 9.065 0 0112 15a9.065 9.065 0 00-6.23-.693L5 14.5m14.8.8l1.402 1.402c1.232 1.232.65 3.318-1.067 3.611A48.309 48.309 0 0112 21c-2.773 0-5.491-.235-8.135-.687-1.718-.293-2.3-2.379-1.067-3.61L5 14.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1897,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1896,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please select an applicant to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1899,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You'll be able to create interview questions after selecting an applicant.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1900,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1895,\n        columnNumber: 21\n      }, this) : sections.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          strokeWidth: \"1.5\",\n          stroke: \"currentColor\",\n          className: \"empty-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            d: \"M8 9h8M8 13h6M8 17h4M19 3H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1905,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1904,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No interview question sections added yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1907,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Add a section to get started or use AI Generate.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1908,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1903,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sections-container\",\n        children: sections.map((section, sectionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `section-card ${section.isAIGenerated ? 'ai-generated-section' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [editingSectionIndex === sectionIndex ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-title-edit-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"section-title-input-edit\",\n                value: editedSectionTitle,\n                onChange: e => setEditedSectionTitle(e.target.value),\n                onBlur: () => handleSaveSectionTitle(sectionIndex),\n                onKeyDown: e => handleKeyPressSectionTitle(e, sectionIndex),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1917,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"edit-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save-edit-button\",\n                  onClick: () => handleSaveSectionTitle(sectionIndex),\n                  title: \"Save title\",\n                  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    viewBox: \"0 0 24 24\",\n                    fill: \"none\",\n                    stroke: \"currentColor\",\n                    strokeWidth: \"2\",\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\",\n                    children: /*#__PURE__*/_jsxDEV(\"polyline\", {\n                      points: \"20 6 9 17 4 12\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1933,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1932,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1927,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"cancel-edit-button\",\n                  onClick: () => setEditingSectionIndex(null),\n                  title: \"Cancel edit\",\n                  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    viewBox: \"0 0 24 24\",\n                    fill: \"none\",\n                    stroke: \"currentColor\",\n                    strokeWidth: \"2\",\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\",\n                    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                      x1: \"18\",\n                      y1: \"6\",\n                      x2: \"6\",\n                      y2: \"18\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1942,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                      x1: \"6\",\n                      y1: \"6\",\n                      x2: \"18\",\n                      y2: \"18\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1943,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1941,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1936,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1926,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1916,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-title-editable\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"section-title\",\n                children: section.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1950,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-title-button\",\n                onClick: () => handleStartEditingSection(sectionIndex, section.title),\n                \"aria-label\": `Edit section ${section.title}`,\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  viewBox: \"0 0 24 24\",\n                  fill: \"none\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1957,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1958,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1956,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1951,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1949,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-section-button\",\n              onClick: () => handleRemoveSection(sectionIndex),\n              \"aria-label\": `Remove section ${section.title}`,\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                fill: \"none\",\n                stroke: \"currentColor\",\n                viewBox: \"0 0 24 24\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: \"2\",\n                  d: \"M6 18L18 6M6 6l12 12\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1969,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1968,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1963,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1914,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-random-settings\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"random-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"random-label\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: section.randomSettings.enabled,\n                  onChange: e => handleSectionRandomSettingsChange(sectionIndex, e.target.checked),\n                  className: \"random-checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1977,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Enable random question selection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1983,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1976,\n                columnNumber: 41\n              }, this), section.questions.filter(q => !q.isCompulsory).length < 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"random-disabled-note\",\n                children: \"(Requires at least 2 non-compulsory questions)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1987,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1975,\n              columnNumber: 37\n            }, this), section.randomSettings.enabled && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"random-count-selector\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: `random-count-${sectionIndex}`,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1996,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `random-count-${sectionIndex}`,\n                  type: \"number\",\n                  min: \"1\",\n                  max: Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1),\n                  value: section.randomSettings.count,\n                  onChange: e => handleRandomCountChange(sectionIndex, e.target.value),\n                  className: `random-count-input ${section.randomSettings.count > Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1) ? 'invalid' : ''}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1997,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"out of \", section.questions.filter(q => !q.isCompulsory).length, \" non-compulsory questions\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2008,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1995,\n                columnNumber: 45\n              }, this), section.randomSettings.count > Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"random-count-warning\",\n                children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                  className: \"warning-icon\",\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  viewBox: \"0 0 24 24\",\n                  fill: \"none\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2014,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: \"12\",\n                    y1: \"9\",\n                    x2: \"12\",\n                    y2: \"13\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2015,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: \"12\",\n                    y1: \"17\",\n                    x2: \"12.01\",\n                    y2: \"17\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2016,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2013,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"You can select at most \", Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1), \" questions to maintain randomness\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2018,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2012,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"random-help-text\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Compulsory questions always appear. Random questions will be selected from the remaining pool.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2023,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2022,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1994,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1974,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questions-container\",\n            children: section.questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `question-item ${question.isCompulsory ? 'compulsory-item' : 'optional-item'} ${question.isAIGenerated ? 'ai-generated-question' : ''}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `question-header ${question.isAIGenerated ? 'ai-generated-header' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-number\",\n                    children: questionIndex + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2037,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-type-indicator\",\n                    children: [question.isCompulsory ? /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"compulsory-badge\",\n                      children: \"Compulsory\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2040,\n                      columnNumber: 61\n                    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"optional-badge\",\n                      children: \"Optional\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2041,\n                      columnNumber: 61\n                    }, this), question.isAIGenerated && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `ai-badge ${question.isAIModified ? 'ai-modified' : ''}`,\n                      children: question.isAIModified ? 'AI Generated (Modified)' : 'AI Generated'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2046,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2038,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"remove-question-button\",\n                    onClick: () => handleRemoveQuestion(sectionIndex, questionIndex),\n                    \"aria-label\": \"Remove question\",\n                    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                      fill: \"none\",\n                      stroke: \"currentColor\",\n                      viewBox: \"0 0 24 24\",\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        strokeWidth: \"2\",\n                        d: \"M6 18L18 6M6 6l12 12\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2057,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2056,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2051,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2036,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `question-textarea ${question.isCompulsory ? 'compulsory' : 'optional'} ${question.isAIGenerated ? 'ai-generated-textarea' : ''}`,\n                  placeholder: \"Enter interview question\",\n                  value: question.text,\n                  onChange: e => handleQuestionChange(sectionIndex, questionIndex, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2062,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `question-controls ${question.isAIGenerated ? 'ai-generated-controls' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-time-control\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      className: \"time-icon\",\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      viewBox: \"0 0 24 24\",\n                      fill: \"none\",\n                      stroke: \"currentColor\",\n                      strokeWidth: \"2\",\n                      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                        cx: \"12\",\n                        cy: \"12\",\n                        r: \"10\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2072,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n                        points: \"12 6 12 12 16 14\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2073,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2071,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: `time-limit-${sectionIndex}-${questionIndex}`,\n                      children: \"Time Limit:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2075,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: `time-limit-${sectionIndex}-${questionIndex}`,\n                      type: \"number\",\n                      min: \"1\",\n                      max: \"300\",\n                      value: question.timeLimit,\n                      onChange: e => handleQuestionTimeChange(sectionIndex, questionIndex, e.target.value),\n                      className: \"time-input\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2078,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"time-unit\",\n                      children: \"seconds\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2089,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2070,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-compulsory-control\",\n                    children: /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"compulsory-label\",\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"checkbox\",\n                        checked: question.isCompulsory,\n                        onChange: e => handleQuestionCompulsoryChange(sectionIndex, questionIndex, e.target.checked),\n                        className: \"compulsory-checkbox\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2094,\n                        columnNumber: 61\n                      }, this), \"Make compulsory\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2093,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2092,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2069,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2035,\n                columnNumber: 45\n              }, this)\n            }, questionIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2031,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2029,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-question-button\",\n            onClick: () => handleAddQuestion(sectionIndex),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              strokeWidth: \"1.5\",\n              stroke: \"currentColor\",\n              className: \"add-q-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                d: \"M12 4.5v15m7.5-7.5h-15\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2116,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2115,\n              columnNumber: 37\n            }, this), \"Add Question\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2111,\n            columnNumber: 33\n          }, this)]\n        }, sectionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1913,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1911,\n        columnNumber: 21\n      }, this), selectedApplicant && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"interview-stats-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-item time-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"12\",\n                cy: \"12\",\n                r: \"10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2131,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n                points: \"12 6 12 12 16 14\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2132,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2130,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2129,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stats-label\",\n              children: \"Total Interview Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2136,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stats-value\",\n              children: [totalInterviewTime.minutes, \" minute\", totalInterviewTime.minutes !== 1 ? 's' : '', totalInterviewTime.seconds > 0 ? ` and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''}` : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2137,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2135,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-item question-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M8 9h8M8 13h6M8 17h4M19 3H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2147,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2146,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2145,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stats-label\",\n              children: \"Total Effective Questions Set For Interview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2151,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stats-value\",\n              children: totalInterviewTime.effectiveQuestions || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2152,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2150,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2144,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2127,\n        columnNumber: 21\n      }, this), selectedApplicant && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: handleResetQuestions,\n            disabled: !selectedApplicant,\n            title: !selectedApplicant ? \"Select an applicant first\" : \"Delete all questions for this applicant\",\n            children: \"Reset All Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: handleInitiateSave,\n            disabled: sections.length === 0 || !selectedApplicant,\n            children: \"Save Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2174,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2164,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2163,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1797,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1769,\n    columnNumber: 9\n  }, this);\n};\n_s(AddInterviewQuestions, \"JwJijwnA3mz81kSdFLQ07qJ2xMk=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c2 = AddInterviewQuestions;\nexport default AddInterviewQuestions;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingAnimation\");\n$RefreshReg$(_c2, \"AddInterviewQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingAnimation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","AddInterviewQuestions","_s","sections","setSections","newSectionTitle","setNewSectionTitle","jobDetails","setJobDetails","isLoading","setIsLoading","showSuccessModal","setShowSuccessModal","isNavigatingBack","setIsNavigatingBack","applicants","setApplicants","selectedApplicant","setSelectedApplicant","isLoadingApplicants","setIsLoadingApplicants","editingSectionIndex","setEditingSectionIndex","editedSectionTitle","setEditedSectionTitle","showErrorModal","setShowErrorModal","errorMessage","setErrorMessage","showConfirmModal","setShowConfirmModal","sectionToDelete","setSectionToDelete","showSaveConfirmModal","setShowSaveConfirmModal","totalInterviewTime","setTotalInterviewTime","minutes","seconds","showNavigationModal","setShowNavigationModal","aiGenerateUsedMap","setAiGenerateUsedMap","showAISuccess","setShowAISuccess","changesSaved","setChangesSaved","sectionsLoadedFromDB","setSectionsLoadedFromDB","showApplyToAllModal","setShowApplyToAllModal","applyToAllStatus","setApplyToAllStatus","showResetConfirmModal","setShowResetConfirmModal","showResetSuccessModal","setShowResetSuccessModal","loadingOperation","setLoadingOperation","showCandidateSwitchModal","setShowCandidateSwitchModal","pendingCandidateId","setPendingCandidateId","showUnsavedResetModal","setShowUnsavedResetModal","initialSections","setInitialSections","aiGeneratedUnsaved","setAiGeneratedUnsaved","showAIConfirmModal","setShowAIConfirmModal","location","queryParams","URLSearchParams","search","jobId","get","navigate","fetchJobDetails","response","fetch","ok","Error","data","json","error","console","fetchApplicants","resetUI","keepSelectedApplicant","prev","newMap","fetchSavedQuestions","status","processedSections","map","section","questions","question","processedQuestion","isAIGenerated","isAIModified","JSON","parse","stringify","aiGenerationUsed","log","message","areSectionsEqual","sectionsA","sectionsB","length","i","_sectionA$randomSetti","_sectionB$randomSetti","_sectionA$randomSetti2","_sectionA$randomSetti3","_sectionB$randomSetti2","sectionA","sectionB","title","randomSettings","enabled","count","j","questionA","questionB","text","timeLimit","isCompulsory","sectionsJSON","initialSectionsJSON","hasChanges","handleAddSection","trim","newSection","handleRemoveSection","sectionIndex","removeSection","updatedSections","splice","handleConfirmCandidateSwitch","handleCancelCandidateSwitch","handleApplicantChange","e","newValue","target","value","handleConfirmSectionDelete","handleCancelSectionDelete","handleAddQuestion","push","handleQuestionChange","questionIndex","originalText","handleQuestionTimeChange","Math","max","parseInt","originalTimeLimit","isTextOriginal","isCompulsoryOriginal","hasOwnProperty","originalCompulsory","handleQuestionCompulsoryChange","isTimeOriginal","nonCompulsoryCount","filter","q","maxAllowed","defaultCount","min","floor","handleSectionRandomSettingsChange","updatedQuestion","handleRandomCountChange","parsedCount","validCount","isCountValid","handleRemoveQuestion","isNonCompulsory","remainingNonCompulsoryCount","handleViewProfile","validateSections","selectedCount","totalSeconds","totalQuestions","effectiveQuestions","forEach","compulsoryQuestions","compulsoryTime","reduce","sum","nonCompulsoryQuestions","randomCount","avgTimePerQuestion","handleGenerateActualQuestions","post","errorMsg","detail","handleSave","totalMinutes","validSections","sectionId","Date","now","questionId","payload","applicationId","candidateId","questionSetId","checkResponse","saveResponse","genResponse","warn","genError","handleInitiateSave","handleGoBackToJobDetails","navigateToJobDetails","setTimeout","state","directToJobDetails","handleConfirmNavigation","handleCancelNavigation","handleApplyToAll","overwriteExisting","candidatesResponse","questionSet","candidates","forceOverwrite","successful","failed","skipped","total","handleResetQuestions","performReset","delete","SuccessModal","role","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","onClick","ErrorModal","cx","cy","r","x1","y1","x2","y2","ConfirmModal","SaveConfirmModal","NavigationConfirmModal","ApplyToAllModal","style","pointerEvents","opacity","ResetConfirmModal","ResetSuccessModal","UnsavedResetModal","CandidateSwitchModal","handleAIGenerate","handleConfirmAIGenerate","aiGeneratedSections","prevSections","handleStartEditingSection","currentTitle","handleSaveSectionTitle","handleKeyPressSectionTitle","key","display","justifyContent","alignItems","minHeight","textAlign","marginTop","AIConfirmModal","jobTitle","htmlFor","id","onChange","disabled","app","type","placeholder","onKeyPress","onBlur","onKeyDown","autoFocus","checked","_c2","$RefreshReg$"],"sources":["C:/Users/ruizh/OneDrive/Desktop/EqualLens-project-1/equallens-project/src/components/pages/AddInterviewQuestions.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport \"./AddInterviewQuestions.css\";\r\nimport '../pageloading.css'; // Import the loading animation CSS\r\nimport axios from 'axios'; // Add axios for API calls\r\n\r\n// Add LoadingAnimation component for consistency\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-animation\">\r\n            <div className=\"seesaw-container\">\r\n                <div className=\"bar\"></div>\r\n                <div className=\"ball\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddInterviewQuestions = () => {\r\n    const [sections, setSections] = useState([]);\r\n    const [newSectionTitle, setNewSectionTitle] = useState(\"\");\r\n    const [jobDetails, setJobDetails] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n    const [isNavigatingBack, setIsNavigatingBack] = useState(false);\r\n    // New state variables for applicant selection\r\n    const [applicants, setApplicants] = useState([]);\r\n    const [selectedApplicant, setSelectedApplicant] = useState(\"\");\r\n    const [isLoadingApplicants, setIsLoadingApplicants] = useState(false);\r\n    // Add new state to track which section title is being edited\r\n    const [editingSectionIndex, setEditingSectionIndex] = useState(null);\r\n    const [editedSectionTitle, setEditedSectionTitle] = useState(\"\");\r\n    // Add new state for validation error modal\r\n    const [showErrorModal, setShowErrorModal] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    // Add new state for section deletion confirmation\r\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n    const [sectionToDelete, setSectionToDelete] = useState(null);\r\n    // Add new state for save confirmation modal\r\n    const [showSaveConfirmModal, setShowSaveConfirmModal] = useState(false);\r\n    const [totalInterviewTime, setTotalInterviewTime] = useState({ minutes: 0, seconds: 0 });\r\n    // Add new state for navigation confirmation modal\r\n    const [showNavigationModal, setShowNavigationModal] = useState(false);\r\n    // Add state to track if AI generate has been used already\r\n    const [aiGenerateUsedMap, setAiGenerateUsedMap] = useState({});\r\n    // Add state for showing success message when AI sections are added\r\n    const [showAISuccess, setShowAISuccess] = useState(false);\r\n    // Add a new state to track if changes have been saved\r\n    const [changesSaved, setChangesSaved] = useState(true);\r\n    // Add a ref to track if sections were loaded from DB or changed by user\r\n    const [sectionsLoadedFromDB, setSectionsLoadedFromDB] = useState(false);\r\n    // Add a new state for the apply-to-all confirmation modal\r\n    const [showApplyToAllModal, setShowApplyToAllModal] = useState(false);\r\n    const [applyToAllStatus, setApplyToAllStatus] = useState(null);\r\n    // Add state for reset confirmation modal\r\n    const [showResetConfirmModal, setShowResetConfirmModal] = useState(false);\r\n    // Add new state for reset success modal\r\n    const [showResetSuccessModal, setShowResetSuccessModal] = useState(false);\r\n    // Add state to track what operation is being performed\r\n    const [loadingOperation, setLoadingOperation] = useState(\"Saving\");\r\n    // Add these new state variables\r\n    const [showCandidateSwitchModal, setShowCandidateSwitchModal] = useState(false);\r\n    const [pendingCandidateId, setPendingCandidateId] = useState(null);\r\n    const [showUnsavedResetModal, setShowUnsavedResetModal] = useState(false);\r\n    // Add a ref to store the initial sections state loaded from the database\r\n    const [initialSections, setInitialSections] = useState([]);\r\n    // Add a new state to track if AI generate was used but not yet saved\r\n    const [aiGeneratedUnsaved, setAiGeneratedUnsaved] = useState(false);\r\n    const [showAIConfirmModal, setShowAIConfirmModal] = useState(false);\r\n    \r\n    // Get job ID from URL query params\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const jobId = queryParams.get('jobId');\r\n    \r\n    // Add navigate for programmatic navigation\r\n    const navigate = useNavigate();\r\n    \r\n    // Fetch job details when component mounts\r\n    useEffect(() => {\r\n        const fetchJobDetails = async () => {\r\n            if (!jobId) return;\r\n            \r\n            setIsLoading(true);\r\n            try {\r\n                const response = await fetch(`http://localhost:8000/api/jobs/${jobId}`);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch job details\");\r\n                }\r\n                const data = await response.json();\r\n                setJobDetails(data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching job details:\", error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        \r\n        fetchJobDetails();\r\n    }, [jobId]);\r\n\r\n    // Fetch applicants for the job\r\n    useEffect(() => {\r\n        const fetchApplicants = async () => {\r\n            if (!jobId) return;\r\n            \r\n            setIsLoadingApplicants(true);\r\n            try {\r\n                const response = await fetch(`http://localhost:8000/api/candidates/applicants?jobId=${jobId}`);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch applicants\");\r\n                }\r\n                const data = await response.json();\r\n                setApplicants(data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching applicants:\", error);\r\n            } finally {\r\n                setIsLoadingApplicants(false);\r\n            }\r\n        };\r\n        \r\n        fetchApplicants();\r\n    }, [jobId]);\r\n\r\n    const resetUI = (keepSelectedApplicant = false) => {\r\n        // Reset all fields to their initial state\r\n        setSections([]);\r\n        setNewSectionTitle(\"\");\r\n        if (!keepSelectedApplicant) {\r\n            setSelectedApplicant(\"\");\r\n        } else if (selectedApplicant) {\r\n            // If keeping the selected applicant, reset AI generate usage for that applicant\r\n            setAiGenerateUsedMap(prev => {\r\n                const newMap = {...prev};\r\n                delete newMap[selectedApplicant];\r\n                return newMap;\r\n            });\r\n        }\r\n        setEditingSectionIndex(null);\r\n        setEditedSectionTitle(\"\");\r\n        setShowErrorModal(false);\r\n        setErrorMessage(\"\");\r\n        setShowConfirmModal(false);\r\n        // Reset AI generated unsaved flag\r\n        setAiGeneratedUnsaved(false);\r\n    };\r\n\r\n    // Fetch previously saved InterviewQuestionSet when the component mounts\r\n    useEffect(() => {\r\n        const fetchSavedQuestions = async () => {\r\n            if (!jobId || !selectedApplicant) return;\r\n\r\n            try {\r\n                const response = await axios.get(\r\n                    `http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`\r\n                );\r\n                const data = response.data;\r\n                if (data) {\r\n                    setSections(data.sections);\r\n                    setSectionsLoadedFromDB(true); // Mark that sections were loaded from DB\r\n                    setChangesSaved(true); // Data just loaded is considered saved\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching saved questions:\", error);\r\n\r\n                // If 404, just clear sections but keep the selected applicant\r\n                if (error.response && error.response.status === 404) {\r\n                    // This is normal for new applicants - just start with empty sections\r\n                    setSections([]);\r\n                    setSectionsLoadedFromDB(true); // Empty sections are also \"loaded\"\r\n                    setChangesSaved(true); // Empty state is considered saved\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchSavedQuestions();\r\n    }, [jobId, selectedApplicant]);\r\n\r\n    // Fetch previously saved InterviewQuestionSet when the selected applicant changes\r\n    useEffect(() => {\r\n        const fetchSavedQuestions = async () => {\r\n            if (!jobId || !selectedApplicant) {\r\n                resetUI(); // Reset UI if no applicant is selected\r\n                return;\r\n            }\r\n\r\n            // Skip fetching for \"Apply to All\" option\r\n            if (selectedApplicant === \"all\") {\r\n                // Just reset the sections but keep the selection\r\n                setSections([]);\r\n                setSectionsLoadedFromDB(true);\r\n                setChangesSaved(true);\r\n                setInitialSections([]); // Set empty initial sections\r\n                return;\r\n            }\r\n\r\n            // Clear sections immediately to avoid showing stale data\r\n            setSections([]);\r\n\r\n            try {\r\n                const response = await axios.get(\r\n                    `http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`\r\n                );\r\n                const data = response.data;\r\n                if (data) {\r\n                    // Process sections to ensure isAIModified flag is correctly interpreted\r\n                    const processedSections = data.sections.map(section => ({\r\n                        ...section,\r\n                        questions: section.questions.map(question => {\r\n                            // If question is marked as modified in the saved data, preserve that state\r\n                            const processedQuestion = { ...question };\r\n                            if (processedQuestion.isAIGenerated && processedQuestion.isAIModified) {\r\n                                // Ensure isAIModified flag is set correctly\r\n                                processedQuestion.isAIModified = true;\r\n                            }\r\n                            return processedQuestion;\r\n                        })\r\n                    }));\r\n                    \r\n                    setSections(processedSections);\r\n                    setInitialSections(JSON.parse(JSON.stringify(processedSections))); // Deep copy initial state\r\n                    \r\n                    // Check and update AI generation usage status\r\n                    if (data.aiGenerationUsed) {\r\n                        // If AI was used for this candidate, update the state map\r\n                        setAiGenerateUsedMap(prev => ({\r\n                            ...prev,\r\n                            [selectedApplicant]: true\r\n                        }));\r\n                    }\r\n                } else {\r\n                    // Only clear the sections, not the selected applicant\r\n                    setSections([]);\r\n                    setInitialSections([]); // Clear initial sections\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching saved questions:\", error);\r\n\r\n                // If 404, just clear sections but keep the selected applicant\r\n                if (error.response && error.response.status === 404) {\r\n                    console.log(\"No question set found for this applicant. Starting with a blank slate.\");\r\n                    setSections([]);\r\n                    setInitialSections([]); // Clear initial sections\r\n                    \r\n                    // Also clear AI usage state for this candidate since no record exists\r\n                    setAiGenerateUsedMap(prev => {\r\n                        const newMap = {...prev};\r\n                        delete newMap[selectedApplicant];\r\n                        return newMap;\r\n                    });\r\n                } else {\r\n                    // For other errors, show an error message but don't reset UI\r\n                    setErrorMessage(`Error loading questions: ${error.message}`);\r\n                    setShowErrorModal(true);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchSavedQuestions();\r\n    }, [jobId, selectedApplicant]);\r\n\r\n    // Add effect to mark changes as unsaved whenever sections change\r\n    useEffect(() => {\r\n        // Helper function to check for deep equality between sections\r\n        const areSectionsEqual = (sectionsA, sectionsB) => {\r\n            try {\r\n                // Check for null/undefined cases\r\n                if (!sectionsA && !sectionsB) return true;\r\n                if (!sectionsA || !sectionsB) return false;\r\n                \r\n                // First check basic structure\r\n                if (sectionsA.length !== sectionsB.length) return false;\r\n                \r\n                // If both are empty arrays, they're equal\r\n                if (sectionsA.length === 0 && sectionsB.length === 0) return true;\r\n                \r\n                // Compare sections one by one\r\n                for (let i = 0; i < sectionsA.length; i++) {\r\n                    const sectionA = sectionsA[i];\r\n                    const sectionB = sectionsB[i];\r\n                    \r\n                    // Compare section properties\r\n                    if (sectionA.title !== sectionB.title) return false;\r\n                    if (sectionA.randomSettings?.enabled !== sectionB.randomSettings?.enabled) return false;\r\n                    if (sectionA.randomSettings?.enabled && \r\n                        sectionA.randomSettings?.count !== sectionB.randomSettings?.count) return false;\r\n                    \r\n                    // Compare questions\r\n                    if (sectionA.questions.length !== sectionB.questions.length) return false;\r\n                    \r\n                    for (let j = 0; j < sectionA.questions.length; j++) {\r\n                        const questionA = sectionA.questions[j];\r\n                        const questionB = sectionsB[i].questions[j];\r\n                        \r\n                        if (questionA.text !== questionB.text) return false;\r\n                        if (questionA.timeLimit !== questionB.timeLimit) return false;\r\n                        if (questionA.isCompulsory !== questionB.isCompulsory) return false;\r\n                    }\r\n                }\r\n                \r\n                // If we got here, everything matches\r\n                return true;\r\n            } catch (error) {\r\n                // If any error occurs during comparison, consider them different\r\n                console.error(\"Error comparing sections:\", error);\r\n                return false;\r\n            }\r\n        };\r\n\r\n        // Only check for changes if we've finished loading from DB\r\n        if (!sectionsLoadedFromDB) {\r\n            // Create string representations for comparison (more reliable than deep object comparison)\r\n            const sectionsJSON = JSON.stringify(sections);\r\n            const initialSectionsJSON = JSON.stringify(initialSections);\r\n            \r\n            // Check if current sections differ from initial sections\r\n            const hasChanges = sectionsJSON !== initialSectionsJSON;\r\n            \r\n            // Only update if necessary to avoid re-renders\r\n            if (changesSaved === hasChanges) {\r\n                setChangesSaved(!hasChanges);\r\n            }\r\n        } else {\r\n            // Reset the flag after sections are loaded from DB\r\n            setSectionsLoadedFromDB(false);\r\n        }\r\n    }, [sections, initialSections, sectionsLoadedFromDB, changesSaved]);\r\n\r\n    // Reset aiGenerateUsed state when component mounts\r\n    useEffect(() => {\r\n        // Reset AI generate used map when component mounts\r\n        setAiGenerateUsedMap({});\r\n    }, []);\r\n\r\n    // Reset AI generated state when applicant changes or component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            // Reset AI generated unsaved flag when component unmounts\r\n            setAiGeneratedUnsaved(false);\r\n        };\r\n    }, [selectedApplicant]);\r\n\r\n    // Modify the handleAddSection function to add a default question\r\n    const handleAddSection = () => {\r\n        if (newSectionTitle.trim()) {\r\n            // Create a new section with one default question\r\n            const newSection = { \r\n                title: newSectionTitle, \r\n                questions: [{ \r\n                    text: \"\", \r\n                    timeLimit: 60,\r\n                    isCompulsory: true \r\n                }],\r\n                randomSettings: {\r\n                    enabled: false,\r\n                    count: 0\r\n                }\r\n            };\r\n            \r\n            setSections([...sections, newSection]);\r\n            setNewSectionTitle(\"\");\r\n            // No need to call setChangesSaved(false) here as the sections change \r\n            // will trigger the useEffect that handles it\r\n        }\r\n    };\r\n\r\n    const handleRemoveSection = (sectionIndex) => {\r\n        // Check if section has questions before showing confirmation\r\n        if (sections[sectionIndex].questions.length > 0) {\r\n            setSectionToDelete(sectionIndex);\r\n            setShowConfirmModal(true);\r\n        } else {\r\n            // If no questions, delete immediately\r\n            removeSection(sectionIndex);\r\n        }\r\n    };\r\n\r\n    // New function to actually remove the section after confirmation\r\n    const removeSection = (sectionIndex) => {\r\n        const updatedSections = [...sections];\r\n        updatedSections.splice(sectionIndex, 1);\r\n        setSections(updatedSections);\r\n    };\r\n\r\n    // New function to handle confirmed candidate switch\r\n    const handleConfirmCandidateSwitch = () => {\r\n        setShowCandidateSwitchModal(false);\r\n        setSelectedApplicant(pendingCandidateId);\r\n        setPendingCandidateId(null);\r\n    };\r\n\r\n    // New function to cancel candidate switch\r\n    const handleCancelCandidateSwitch = () => {\r\n        setShowCandidateSwitchModal(false);\r\n        setPendingCandidateId(null);\r\n        \r\n        // Show the save confirmation modal to initiate the save process\r\n        setShowSaveConfirmModal(true);\r\n    };\r\n\r\n    // New function to handle applicant change with unsaved changes check\r\n    const handleApplicantChange = (e) => {\r\n        const newValue = e.target.value;\r\n        \r\n        // Check if there are unsaved changes and sections exist with actual changes\r\n        if (!changesSaved && sections.length > 0 && selectedApplicant) {\r\n            // Create string representations for comparison\r\n            const sectionsJSON = JSON.stringify(sections);\r\n            const initialSectionsJSON = JSON.stringify(initialSections);\r\n            \r\n            // Only show confirmation if there are actual changes\r\n            if (sectionsJSON !== initialSectionsJSON) {\r\n                // Store the pending candidate ID and show confirmation modal\r\n                setPendingCandidateId(newValue);\r\n                setShowCandidateSwitchModal(true);\r\n            } else {\r\n                // If no actual changes despite the flag, just switch directly\r\n                setSelectedApplicant(newValue);\r\n                // Reset the changesSaved flag to true since there are no real changes\r\n                setChangesSaved(true);\r\n            }\r\n        } else {\r\n            // If no unsaved changes or no sections, switch directly\r\n            setSelectedApplicant(newValue);\r\n        }\r\n    };\r\n\r\n    // Handle confirmation modal actions\r\n    const handleConfirmSectionDelete = () => {\r\n        if (sectionToDelete !== null) {\r\n            removeSection(sectionToDelete);\r\n            setSectionToDelete(null);\r\n        }\r\n        setShowConfirmModal(false);\r\n    };\r\n\r\n    const handleCancelSectionDelete = () => {\r\n        setSectionToDelete(null);\r\n        setShowConfirmModal(false);\r\n    };\r\n\r\n    const handleAddQuestion = (sectionIndex) => {\r\n        const updatedSections = [...sections];\r\n        // Initialize each question with empty text, a default time of 60 seconds, and isCompulsory flag\r\n        updatedSections[sectionIndex].questions.push({ \r\n            text: \"\", \r\n            timeLimit: 60,\r\n            isCompulsory: true \r\n        });\r\n        setSections(updatedSections);\r\n    };\r\n\r\n    const handleQuestionChange = (sectionIndex, questionIndex, value) => {\r\n        const updatedSections = [...sections];\r\n        const question = updatedSections[sectionIndex].questions[questionIndex];\r\n        \r\n        // If the question is AI generated, check modification status\r\n        if (question.isAIGenerated) {\r\n            // Store original text if we haven't already (first edit)\r\n            if (!question.originalText && !question.isAIModified) {\r\n                question.originalText = question.text;\r\n            }\r\n            \r\n            // Check if the current text matches the original text\r\n            if (question.originalText && value === question.originalText) {\r\n                // If text has been restored to original AI generated version, remove modified flag\r\n                question.isAIModified = false;\r\n            } else if (question.text !== value) {\r\n                // If text is different from both current and original, mark as modified\r\n                question.isAIModified = true;\r\n            }\r\n        }\r\n        \r\n        question.text = value;\r\n        setSections(updatedSections);\r\n    };\r\n    \r\n    const handleQuestionTimeChange = (sectionIndex, questionIndex, value) => {\r\n        const updatedSections = [...sections];\r\n        // Ensure the time is a positive number\r\n        const timeLimit = Math.max(1, parseInt(value) || 0);\r\n        const question = updatedSections[sectionIndex].questions[questionIndex];\r\n        \r\n        // Store original value on first edit\r\n        if (question.isAIGenerated && !question.originalTimeLimit && !question.isAIModified) {\r\n            question.originalTimeLimit = question.timeLimit;\r\n        }\r\n        \r\n        // Mark as modified if it's AI-generated and time limit changes\r\n        if (question.isAIGenerated) {\r\n            // Check if time is being restored to original value\r\n            if (question.originalTimeLimit && timeLimit === question.originalTimeLimit) {\r\n                // Check if text is also at original value to fully restore unmodified state\r\n                const isTextOriginal = !question.originalText || question.text === question.originalText;\r\n                const isCompulsoryOriginal = !question.hasOwnProperty('originalCompulsory') || question.isCompulsory === question.originalCompulsory;\r\n                \r\n                if (isTextOriginal && isCompulsoryOriginal) {\r\n                    question.isAIModified = false;\r\n                }\r\n            } else if (question.timeLimit !== timeLimit) {\r\n                question.isAIModified = true;\r\n            }\r\n        }\r\n        \r\n        question.timeLimit = timeLimit;\r\n        setSections(updatedSections);\r\n    };\r\n\r\n    const handleQuestionCompulsoryChange = (sectionIndex, questionIndex, isCompulsory) => {\r\n        const updatedSections = [...sections];\r\n        const question = updatedSections[sectionIndex].questions[questionIndex];\r\n        \r\n        // Store original value on first toggle\r\n        if (question.isAIGenerated && !question.hasOwnProperty('originalCompulsory') && !question.isAIModified) {\r\n            question.originalCompulsory = question.isCompulsory;\r\n        }\r\n        \r\n        // Check if being restored to original value\r\n        if (question.isAIGenerated) {\r\n            if (question.hasOwnProperty('originalCompulsory') && isCompulsory === question.originalCompulsory) {\r\n                // Check if other properties are also at original values\r\n                const isTextOriginal = !question.originalText || question.text === question.originalText;\r\n                const isTimeOriginal = !question.originalTimeLimit || question.timeLimit === question.originalTimeLimit;\r\n                \r\n                if (isTextOriginal && isTimeOriginal) {\r\n                    question.isAIModified = false;\r\n                }\r\n            } else if (question.isCompulsory !== isCompulsory) {\r\n                question.isAIModified = true;\r\n            }\r\n        }\r\n        \r\n        question.isCompulsory = isCompulsory;\r\n        \r\n        // Count non-compulsory questions after this change\r\n        const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\r\n        \r\n        // If making a question compulsory reduces non-compulsory count below 2, disable random\r\n        if (isCompulsory && nonCompulsoryCount < 2 && updatedSections[sectionIndex].randomSettings.enabled) {\r\n            updatedSections[sectionIndex].randomSettings.enabled = false;\r\n        }\r\n        \r\n        // NEW: If more than 2 questions are now non-compulsory, enable random selection automatically\r\n        if (!isCompulsory && nonCompulsoryCount >= 2 && !updatedSections[sectionIndex].randomSettings.enabled) {\r\n            updatedSections[sectionIndex].randomSettings.enabled = true;\r\n            // Set default value for random count (half of non-compulsory, but at least 1)\r\n            const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\r\n            const defaultCount = Math.min(Math.floor(nonCompulsoryCount / 2), maxAllowed);\r\n            updatedSections[sectionIndex].randomSettings.count = Math.max(1, defaultCount);\r\n        }\r\n        \r\n        setSections(updatedSections);\r\n    };\r\n    \r\n    const handleSectionRandomSettingsChange = (sectionIndex, enabled) => {\r\n        const updatedSections = [...sections];\r\n        const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\r\n        \r\n        // Check if there are enough non-compulsory questions to enable random selection\r\n        if (enabled && nonCompulsoryCount < 2) {\r\n            // If there are less than 2 non-compulsory questions, show an error\r\n            setErrorMessage(\r\n                `Please ensure you have at least 2 non-compulsory questions in order to enable random selection.\r\n                The ${updatedSections[sectionIndex].title} section only has ${nonCompulsoryCount} non-compulsory question${nonCompulsoryCount === 1 ? '' : 's'}.`\r\n            );\r\n            setShowErrorModal(true);\r\n            return; // Exit without updating the state - leave the checkbox unchecked\r\n        }\r\n        \r\n        // Set the enabled state as requested\r\n        updatedSections[sectionIndex].randomSettings.enabled = enabled;\r\n        \r\n        // If enabling random mode, set default count to half of non-compulsory questions (minimum 1)\r\n        // But ensure it's not equal to the total number of non-compulsory questions\r\n        if (enabled) {\r\n            const maxAllowed = Math.max(1, nonCompulsoryCount - 1); // Maximum is total count - 1\r\n            const defaultCount = Math.min(Math.floor(nonCompulsoryCount / 2), maxAllowed);\r\n            updatedSections[sectionIndex].randomSettings.count = Math.max(1, defaultCount);\r\n        } else {\r\n            // If disabling random selection, make all questions compulsory\r\n            updatedSections[sectionIndex].questions = updatedSections[sectionIndex].questions.map(question => {\r\n                // Create a new question object to avoid mutation\r\n                const updatedQuestion = { ...question };\r\n                \r\n                // If the question is non-compulsory, we need to update it and handle AI modification status\r\n                if (!question.isCompulsory) {\r\n                    // Store original value if it's an AI-generated question and hasn't been stored yet\r\n                    if (question.isAIGenerated && !question.hasOwnProperty('originalCompulsory')) {\r\n                        updatedQuestion.originalCompulsory = question.isCompulsory;\r\n                    }\r\n                    \r\n                    // Mark as modified if it's AI-generated and this is changing its state\r\n                    if (question.isAIGenerated) {\r\n                        updatedQuestion.isAIModified = true;\r\n                    }\r\n                    \r\n                    // Make it compulsory\r\n                    updatedQuestion.isCompulsory = true;\r\n                }\r\n                \r\n                return updatedQuestion;\r\n            });\r\n        }\r\n        \r\n        setSections(updatedSections);\r\n    };\r\n\r\n    const handleRandomCountChange = (sectionIndex, count) => {\r\n        const updatedSections = [...sections];\r\n        const nonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\r\n        \r\n        // Allow user to enter the number, but track if it's valid\r\n        // Maximum allowed is (nonCompulsoryCount - 1) to ensure it's truly random\r\n        const parsedCount = parseInt(count) || 0;\r\n        const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\r\n        const validCount = Math.min(parsedCount, maxAllowed);\r\n        \r\n        updatedSections[sectionIndex].randomSettings.count = validCount;\r\n        updatedSections[sectionIndex].randomSettings.isCountValid = validCount > 0 && validCount <= maxAllowed;\r\n        \r\n        setSections(updatedSections);\r\n    };\r\n\r\n    const handleRemoveQuestion = (sectionIndex, questionIndex) => {\r\n        const updatedSections = [...sections];\r\n        \r\n        // Check if this is a non-compulsory question that's being removed\r\n        const isNonCompulsory = !updatedSections[sectionIndex].questions[questionIndex].isCompulsory;\r\n        \r\n        // Remove the question\r\n        updatedSections[sectionIndex].questions.splice(questionIndex, 1);\r\n        \r\n        // If it was a non-compulsory question, check if we need to disable random selection\r\n        if (isNonCompulsory) {\r\n            const remainingNonCompulsoryCount = updatedSections[sectionIndex].questions.filter(q => !q.isCompulsory).length;\r\n            \r\n            // If fewer than 2 non-compulsory questions remain, disable random selection\r\n            if (remainingNonCompulsoryCount < 2 && updatedSections[sectionIndex].randomSettings.enabled) {\r\n                updatedSections[sectionIndex].randomSettings.enabled = false;\r\n                \r\n                // Can also display a brief notification to explain why it was automatically disabled\r\n                // Example: toast.info(\"Random selection was disabled as there are no longer enough non-compulsory questions.\")\r\n            }\r\n        }\r\n        \r\n        setSections(updatedSections);\r\n    };\r\n\r\n    const handleViewProfile = () => {\r\n        // Placeholder for view profile functionality\r\n        console.log(\"View profile for candidate:\", selectedApplicant);\r\n        // This would typically navigate to a candidate profile page\r\n    };\r\n\r\n    const validateSections = () => {\r\n        // First check for empty question fields\r\n        for (let i = 0; i < sections.length; i++) {\r\n            const section = sections[i];\r\n            for (let j = 0; j < section.questions.length; j++) {\r\n                if (!section.questions[j].text.trim()) {\r\n                    setErrorMessage(\r\n                        `Please fill in all question fields. There is an empty question in the \"${section.title}\" section.`\r\n                    );\r\n                    setShowErrorModal(true);\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Check each section with random questions enabled\r\n            if (section.randomSettings.enabled) {\r\n                const nonCompulsoryCount = section.questions.filter(q => !q.isCompulsory).length;\r\n                const selectedCount = section.randomSettings.count;\r\n                const maxAllowed = Math.max(1, nonCompulsoryCount - 1);\r\n                \r\n                // Check if there are enough non-compulsory questions\r\n                if (nonCompulsoryCount < 2) {\r\n                    setErrorMessage(\r\n                        `Random selection requires at least 2 non-compulsory questions. \r\n                        The \"${section.title}\" section only has ${nonCompulsoryCount} non-compulsory question${nonCompulsoryCount === 1 ? '' : 's'}.`\r\n                    );\r\n                    setShowErrorModal(true);\r\n                    return false;\r\n                }\r\n                \r\n                // Validate that the selected count is in the valid range\r\n                if (selectedCount <= 0 || selectedCount > maxAllowed) {\r\n                    setErrorMessage(\r\n                        `In \"${section.title}\" section, you can select between 1 and ${maxAllowed} random questions.`\r\n                    );\r\n                    setShowErrorModal(true);\r\n                    return false;\r\n                }\r\n            } else {\r\n                // NEW: Check for sections that have exactly 1 non-compulsory question but random selection is not enabled\r\n                const nonCompulsoryCount = section.questions.filter(q => !q.isCompulsory).length;\r\n                if (nonCompulsoryCount === 1) {\r\n                    setErrorMessage(\r\n                        `The \"${section.title}\" section has exactly 1 non-compulsory question. \r\n                        Either make all questions compulsory or make at least one more question non-compulsory and enable random selection.`\r\n                    );\r\n                    setShowErrorModal(true);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    // Calculate total interview time whenever questions change\r\n    useEffect(() => {\r\n        let totalSeconds = 0;\r\n        let totalQuestions = 0;\r\n        let effectiveQuestions = 0;\r\n        \r\n        sections.forEach(section => {\r\n            // Count total questions in this section\r\n            totalQuestions += section.questions.length;\r\n            \r\n            // For sections with random selection, calculate based on compulsory questions \r\n            // plus the number of random questions that will be selected\r\n            if (section.randomSettings.enabled) {\r\n                // Count compulsory questions for effective total\r\n                const compulsoryQuestions = section.questions.filter(q => q.isCompulsory);\r\n                effectiveQuestions += compulsoryQuestions.length;\r\n                \r\n                // Add random questions to effective total\r\n                if (section.randomSettings.count > 0) {\r\n                    effectiveQuestions += section.randomSettings.count;\r\n                }\r\n                \r\n                // Count seconds from compulsory questions\r\n                const compulsoryTime = compulsoryQuestions\r\n                    .reduce((sum, q) => sum + (q.timeLimit || 0), 0);\r\n                \r\n                // Calculate average time for random questions\r\n                const nonCompulsoryQuestions = section.questions.filter(q => !q.isCompulsory);\r\n                const randomCount = section.randomSettings.count;\r\n                \r\n                if (nonCompulsoryQuestions.length > 0 && randomCount > 0) {\r\n                    // Calculate average time per non-compulsory question\r\n                    const avgTimePerQuestion = nonCompulsoryQuestions.reduce((sum, q) => sum + (q.timeLimit || 0), 0) / nonCompulsoryQuestions.length;\r\n                    // Add time for random questions (average time * number of random questions)\r\n                    totalSeconds += compulsoryTime + (avgTimePerQuestion * randomCount);\r\n                } else {\r\n                    totalSeconds += compulsoryTime;\r\n                }\r\n            } else {\r\n                // For sections without random selection, add up all question times\r\n                section.questions.forEach(question => {\r\n                    totalSeconds += question.timeLimit || 0;\r\n                });\r\n                // All questions count for effective total if random selection is disabled\r\n                effectiveQuestions += section.questions.length;\r\n            }\r\n        });\r\n        \r\n        // Convert to minutes and seconds\r\n        const minutes = Math.floor(totalSeconds / 60);\r\n        const seconds = totalSeconds % 60;\r\n        \r\n        setTotalInterviewTime({ \r\n            minutes, \r\n            seconds, \r\n            totalQuestions,\r\n            effectiveQuestions\r\n        });\r\n    }, [sections]);\r\n\r\n    // Add this function after the handleSave function to generate actual questions after saving\r\n    const handleGenerateActualQuestions = async () => {\r\n        if (!selectedApplicant || selectedApplicant === \"all\") {\r\n            setErrorMessage(\"Please select a specific applicant to generate questions for.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setLoadingOperation(\"Generating\");\r\n\r\n        try {\r\n            // Call the API to generate actual questions\r\n            const response = await axios.post(\r\n                `http://localhost:8000/api/interview-questions/generate-actual-questions/${selectedApplicant}`\r\n            );\r\n\r\n            if (response.status === 200 || response.status === 201) {\r\n                console.log(\"Actual questions generated successfully:\", response.data);\r\n                // You can add a specific success message for generation if needed\r\n                // or just use the same success modal\r\n            } else {\r\n                console.error(\"Unexpected response status:\", response.status);\r\n                setErrorMessage(\"Failed to generate actual questions. Please try again.\");\r\n                setShowErrorModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error generating actual questions:\", error);\r\n            let errorMsg = \"An error occurred while generating questions. Please try again.\";\r\n            \r\n            if (error.response) {\r\n                console.error(\"Error response data:\", error.response.data);\r\n                errorMsg = `Server error: ${error.response.data.detail || error.message}`;\r\n            }\r\n            \r\n            setErrorMessage(errorMsg);\r\n            setShowErrorModal(true);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Modify the handleSave function to also generate actual questions after saving\r\n    const handleSave = async () => {\r\n        // Check if total interview time is less than 5 minutes\r\n        const totalMinutes = totalInterviewTime.minutes + (totalInterviewTime.seconds > 0 ? 1 : 0); // Round up if there are seconds\r\n        if (totalMinutes < 5) {\r\n            setErrorMessage(\r\n                `Your total interview time is less than 5 minutes (currently ${totalInterviewTime.minutes} minute${totalInterviewTime.minutes !== 1 ? 's' : ''} ${totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''} ` : ''}).\r\n                Please add more questions or increase the time limits to ensure a thorough interview.`\r\n            );\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n\r\n        // Validate before saving\r\n        if (!validateSections()) {\r\n            return;\r\n        }\r\n\r\n        if (sections.length === 0 || !selectedApplicant) {\r\n            setErrorMessage(\"Please add at least one section with questions and select an applicant before saving.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true); // Show loading animation\r\n        setLoadingOperation(\"Saving\"); // Set the loading operation\r\n\r\n        try {\r\n            // Prepare the payload - making sure to correctly include isAIModified flags\r\n            const validSections = sections.map(section => ({\r\n                ...section,\r\n                sectionId: section.sectionId || `sect-${Date.now()}`, // Generate sectionId if missing\r\n                questions: section.questions.map(question => {\r\n                    // Create a new question object to avoid mutation\r\n                    const processedQuestion = {\r\n                        ...question,\r\n                        questionId: question.questionId || `ques-${Date.now()}`, // Generate questionId if missing\r\n                    };\r\n                    \r\n                    // Ensure the isAIModified flag is included if present\r\n                    if (processedQuestion.isAIGenerated && processedQuestion.isAIModified) {\r\n                        processedQuestion.isAIModified = true;\r\n                    }\r\n                    \r\n                    return processedQuestion;\r\n                })\r\n            })).filter(section => section.questions.length > 0);\r\n\r\n            const payload = {\r\n                applicationId: selectedApplicant, // Ensure correct applicationId is used\r\n                candidateId: selectedApplicant === \"all\" ? \"all\" : selectedApplicant,\r\n                sections: validSections,\r\n                // Add AI generation usage info to the payload - true if either already used or newly used\r\n                aiGenerationUsed: selectedApplicant !== \"all\" && \r\n                    (aiGenerateUsedMap[selectedApplicant] || aiGeneratedUnsaved)\r\n            };\r\n\r\n            // Check if a question set already exists for the selected candidate\r\n            let questionSetId = null;\r\n            try {\r\n                const checkResponse = await axios.get(\r\n                    `http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`\r\n                );\r\n                if (checkResponse.data) {\r\n                    questionSetId = checkResponse.data.questionSetId; // Extract the existing questionSetId\r\n                    console.log(\"Found existing question set with ID:\", questionSetId);\r\n                }\r\n            } catch (error) {\r\n                // Only log error, don't return - we can still create a new question set\r\n                if (error.response && error.response.status === 404) {\r\n                    console.log(\"No existing question set found, will create a new one.\");\r\n                } else {\r\n                    console.error(\"Error checking existing question set:\", error);\r\n                }\r\n            }\r\n\r\n            // If a question set exists, include the `questionSetId` in the payload\r\n            if (questionSetId) {\r\n                payload.questionSetId = questionSetId;\r\n            }\r\n\r\n            console.log(\"Saving InterviewQuestionSet with payload:\", payload);\r\n\r\n            const saveResponse = await axios.post(\r\n                \"http://localhost:8000/api/interview-questions/save-question-set\",\r\n                payload\r\n            );\r\n\r\n            console.log(\"Save response:\", saveResponse);\r\n\r\n            if (saveResponse.status === 200 || saveResponse.status === 201) {\r\n                console.log(\"Questions saved successfully:\", saveResponse.data);\r\n                setChangesSaved(true); // Mark changes as saved after successful save\r\n                setInitialSections(JSON.parse(JSON.stringify(sections))); // Deep copy\r\n                \r\n                // If there are unsaved AI generated sections, permanently mark AI as used for this candidate\r\n                if (aiGeneratedUnsaved) {\r\n                    setAiGenerateUsedMap(prev => ({\r\n                        ...prev,\r\n                        [selectedApplicant]: true\r\n                    }));\r\n                    setAiGeneratedUnsaved(false);\r\n                }\r\n                \r\n                // After saving successfully, generate actual questions if this is for a specific candidate\r\n                if (selectedApplicant !== \"all\") {\r\n                    try {\r\n                        // Call the API to generate actual questions\r\n                        setLoadingOperation(\"Generating Interview Questions\");\r\n                        \r\n                        const genResponse = await axios.post(\r\n                            `http://localhost:8000/api/interview-questions/generate-actual-questions/${selectedApplicant}`\r\n                        );\r\n                        \r\n                        if (genResponse.status === 200 || genResponse.status === 201) {\r\n                            console.log(\"Actual questions generated successfully:\", genResponse.data);\r\n                        } else {\r\n                            console.warn(\"Failed to generate actual questions after saving.\");\r\n                        }\r\n                    } catch (genError) {\r\n                        console.error(\"Error generating actual questions after saving:\", genError);\r\n                        // Don't show error modal for this, as the main save was successful\r\n                    }\r\n                }\r\n                \r\n                setShowSuccessModal(true); // Show success modal\r\n            } else {\r\n                console.error(\"Unexpected response status:\", saveResponse.status);\r\n                setErrorMessage(\"Failed to save questions. Please try again.\");\r\n                setShowErrorModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error saving questions:\", error);\r\n            let errorMsg = \"An error occurred while saving questions. Please try again.\";\r\n            \r\n            if (error.response) {\r\n                console.error(\"Error response data:\", error.response.data);\r\n                errorMsg = `Server error: ${error.response.data.detail || error.message}`;\r\n            }\r\n            \r\n            setErrorMessage(errorMsg);\r\n            setShowErrorModal(true);\r\n        } finally {\r\n            setIsLoading(false); // Hide loading animation\r\n        }\r\n    };\r\n\r\n    // Add a function to handle initiating the save process with confirmation\r\n    const handleInitiateSave = () => {\r\n        if (sections.length === 0 || !selectedApplicant) {\r\n            setErrorMessage(\"Please add at least one section with questions and select an applicant before saving.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n        \r\n        // Check if this is an \"Apply to All\" case\r\n        if (selectedApplicant === \"all\") {\r\n            // Before showing the modal, perform basic validation to prevent showing modals twice\r\n            // Check if total interview time is less than 5 minutes\r\n            const totalMinutes = totalInterviewTime.minutes + (totalInterviewTime.seconds > 0 ? 1 : 0);\r\n            if (totalMinutes < 5) {\r\n                setErrorMessage(\r\n                    `Your total interview time is less than 5 minutes (currently ${totalInterviewTime.minutes} minute${totalInterviewTime.minutes !== 1 ? 's' : ''} ${totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''}` : ''}).\r\n                    Please add more questions or increase the time limits to ensure a thorough interview.`\r\n                );\r\n                setShowErrorModal(true);\r\n                return;\r\n            }\r\n\r\n            // Also validate sections before showing the apply-to-all modal\r\n            if (!validateSections()) {\r\n                return;\r\n            }\r\n            \r\n            // Show the Apply to All confirmation modal only if validation passed\r\n            setShowApplyToAllModal(true);\r\n        } else {\r\n            // Regular case - show the standard save confirmation\r\n            setShowSaveConfirmModal(true);\r\n        }\r\n    };\r\n\r\n    // Modify handleGoBackToJobDetails to check for unsaved changes\r\n    const handleGoBackToJobDetails = () => {\r\n        // Check if there are unsaved changes\r\n        if (!changesSaved && sections.length > 0) {\r\n            // Double-check with string comparison for actual changes\r\n            const sectionsJSON = JSON.stringify(sections);\r\n            const initialSectionsJSON = JSON.stringify(initialSections);\r\n            \r\n            if (sectionsJSON !== initialSectionsJSON) {\r\n                // Show confirmation modal\r\n                setShowNavigationModal(true);\r\n            } else {\r\n                // No actual changes, navigate directly\r\n                navigateToJobDetails();\r\n            }\r\n        } else {\r\n            // No changes or changes saved, navigate directly\r\n            navigateToJobDetails();\r\n        }\r\n    };\r\n\r\n    // New function to handle actual navigation after confirmation\r\n    const navigateToJobDetails = () => {\r\n        // Show loading animation\r\n        setIsNavigatingBack(true);\r\n        \r\n        // Extract jobId from the URL query params to navigate back to job details\r\n        const jobId = queryParams.get('jobId');\r\n        \r\n        // Use React Router's navigate\r\n        setTimeout(() => {\r\n            if (jobId) {\r\n                navigate(`/dashboard`, { \r\n                    state: { \r\n                        directToJobDetails: true,\r\n                        jobId: jobId \r\n                    }\r\n                });\r\n            } else {\r\n                navigate(\"/dashboard\");\r\n            }\r\n        }, 800);\r\n    };\r\n\r\n    // Add handler for confirming navigation\r\n    const handleConfirmNavigation = () => {\r\n        setShowNavigationModal(false);\r\n        navigateToJobDetails();\r\n    };\r\n\r\n    // Add handler for canceling navigation\r\n    const handleCancelNavigation = () => {\r\n        setShowNavigationModal(false);\r\n    };\r\n\r\n    // This function gets triggered when the user selects \"Apply to All\" from the dropdown\r\n    useEffect(() => {\r\n        // Empty effect that doesn't do anything special when \"Apply to All\" is selected\r\n        // No need to try loading templates from other candidates\r\n    }, [selectedApplicant]);\r\n\r\n    // Function to apply questions to all candidates\r\n    const handleApplyToAll = async (overwriteExisting = true) => {\r\n        // First close the apply-to-all modal to prevent it from showing again\r\n        setShowApplyToAllModal(false);\r\n        \r\n        // Since we already validated in handleInitiateSave, we can proceed directly with saving\r\n        setIsLoading(true);\r\n        setLoadingOperation(\"Applying\"); // Set the loading operation\r\n        \r\n        try {\r\n            // First get all candidates for this job\r\n            const candidatesResponse = await axios.get(\r\n                `http://localhost:8000/api/candidates/applicants?jobId=${jobId}`\r\n            );\r\n            \r\n            if (!candidatesResponse.data || candidatesResponse.data.length === 0) {\r\n                setErrorMessage(\"No candidates found for this job.\");\r\n                setShowErrorModal(true);\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            \r\n            // Prepare the question set data\r\n            const questionSet = {\r\n                sections: sections.map(section => ({\r\n                    ...section,\r\n                    sectionId: section.sectionId || `sect-${Date.now()}`,\r\n                    questions: section.questions.map(question => ({\r\n                        ...question,\r\n                        questionId: question.questionId || `ques-${Date.now()}`\r\n                    }))\r\n                }))\r\n            };\r\n            \r\n            // Send request to apply to all\r\n            const payload = {\r\n                jobId: jobId,\r\n                questionSet: questionSet,\r\n                candidates: candidatesResponse.data,\r\n                overwriteExisting: overwriteExisting,\r\n                // Add a flag to force overwrite even for AI-generated content\r\n                forceOverwrite: overwriteExisting\r\n            };\r\n            \r\n            const response = await axios.post(\r\n                \"http://localhost:8000/api/interview-questions/apply-to-all\",\r\n                payload\r\n            );\r\n            \r\n            // Set status to show in completion modal\r\n            setApplyToAllStatus({\r\n                successful: response.data.successful.length,\r\n                failed: response.data.failed.length,\r\n                skipped: response.data.skipped.length,\r\n                total: candidatesResponse.data.length\r\n            });\r\n            \r\n            // Mark as saved and show success modal\r\n            setChangesSaved(true);\r\n            setShowSuccessModal(true);\r\n        } catch (error) {\r\n            console.error(\"Error applying questions to all candidates:\", error);\r\n            setErrorMessage(`Failed to apply questions to all candidates: ${error.message}`);\r\n            setShowErrorModal(true);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Function to handle the reset action - update to enable for any applicant including \"all\"\r\n    const handleResetQuestions = async () => {\r\n        // Check if no applicant is selected\r\n        if (!selectedApplicant) {\r\n            setErrorMessage(\"Please select an applicant first to reset questions.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n\r\n        // Special handling for \"Apply to All\" option\r\n        if (selectedApplicant === \"all\") {\r\n            // For \"Apply to All\", we only need to check if there are unsaved changes to reset\r\n            if (sections.length > 0) {\r\n                // Show confirmation modal\r\n                setShowUnsavedResetModal(true);\r\n            } else {\r\n                // No sections to reset\r\n                setErrorMessage(\"No interview questions to reset.\");\r\n                setShowErrorModal(true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Regular individual applicant reset logic\r\n        try {\r\n            // Check if there's a saved question set for this candidate\r\n            // eslint-disable-next-line no-unused-vars\r\n            const response = await axios.get(\r\n                `http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`\r\n            );\r\n            \r\n            // There is a saved question set - show standard reset confirmation\r\n            setShowResetConfirmModal(true);\r\n            \r\n        } catch (error) {\r\n            // If 404, no saved question set exists\r\n            if (error.response && error.response.status === 404) {\r\n                // Check if there are unsaved changes in the UI (sections exist)\r\n                if (sections.length > 0) {\r\n                    // Show unsaved reset confirmation modal\r\n                    setShowUnsavedResetModal(true);\r\n                } else {\r\n                    // No question set exists and no sections added - nothing to reset\r\n                    setErrorMessage(\"No interview questions found for this applicant.\");\r\n                    setShowErrorModal(true);\r\n                }\r\n            } else {\r\n                setErrorMessage(`Error checking question set: ${error.message || \"Unknown error\"}`);\r\n                setShowErrorModal(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Function to perform the actual reset after confirmation\r\n    const performReset = async () => {\r\n        setShowResetConfirmModal(false);\r\n        setIsLoading(true);\r\n        setLoadingOperation(\"Resetting\"); // Set the loading operation to \"Resetting\"\r\n\r\n        try {\r\n            const response = await axios.delete(\r\n                `http://localhost:8000/api/interview-questions/question-set/${selectedApplicant}`\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                // Clear the sections in the UI\r\n                setSections([]);\r\n                setChangesSaved(true);\r\n                \r\n                // Show success modal instead of error modal\r\n                setShowResetSuccessModal(true);\r\n            } else {\r\n                throw new Error(\"Unexpected response status\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error resetting questions:\", error);\r\n\r\n            // If 404, show message that there are no questions to delete\r\n            if (error.response && error.response.status === 404) {\r\n                setErrorMessage(\"No interview questions found for this applicant.\");\r\n                setShowErrorModal(true);\r\n            } else {\r\n                setErrorMessage(`Error resetting questions: ${error.message || \"Unknown error\"}`);\r\n                setShowErrorModal(true);\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const SuccessModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal success-modal\">\r\n                <div className=\"status-icon success-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">\r\n                    {selectedApplicant === \"all\" && applyToAllStatus \r\n                        ? \"Questions Applied to All Candidates\" \r\n                        : \"Questions Saved!\"}\r\n                </h3>\r\n                {selectedApplicant === \"all\" && applyToAllStatus ? (\r\n                    <div className=\"status-description\">\r\n                        <p>Applied to {applyToAllStatus.successful} out of {applyToAllStatus.total} candidates.</p>\r\n                        {applyToAllStatus.skipped > 0 && (\r\n                            <p>Skipped {applyToAllStatus.skipped} candidates with existing questions.</p>\r\n                        )}\r\n                        {applyToAllStatus.failed > 0 && (\r\n                            <p className=\"error-text\">Failed for {applyToAllStatus.failed} candidates.</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <p className=\"status-description\">Your interview questions have been saved successfully.</p>\r\n                )}\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => {\r\n                            setShowSuccessModal(false);\r\n                            if (selectedApplicant === \"all\") {\r\n                                // After applying to all, reset to empty selection\r\n                                setSelectedApplicant(\"\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        {selectedApplicant === \"all\" ? \"Continue\" : \"Add More Questions\"}\r\n                    </button>\r\n                    <button \r\n                        className=\"status-button secondary-button\" \r\n                        onClick={() => {\r\n                            // Since we know changes are saved, navigate directly\r\n                            navigateToJobDetails();\r\n                        }}\r\n                    >\r\n                        Return to Job Details\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const ErrorModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal error-modal\">\r\n                <div className=\"status-icon error-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Validation Error</h3>\r\n                <p className=\"status-description\">{errorMessage}</p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => setShowErrorModal(false)}\r\n                    >\r\n                        Try Again\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add confirmation modal component\r\n    const ConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Delete Section?</h3>\r\n                <p className=\"status-description\">Are you sure you want to delete this section? All questions in this section will be lost.</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={handleCancelSectionDelete}>\r\n                        Cancel\r\n                    </button>\r\n                    <button className=\"status-button primary-button\" onClick={handleConfirmSectionDelete}>\r\n                        Delete Section\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add SaveConfirmModal component\r\n    const SaveConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon confirm-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Save Interview Questions?</h3>\r\n                <p className=\"status-description\">\r\n                    Are you sure you want to save the changes to this set of interview questions consisting of {totalInterviewTime.minutes} minute{totalInterviewTime.minutes !== 1 ? 's' : ''} {totalInterviewTime.seconds > 0 ? `and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''} ` : ''}total interview time?\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={() => setShowSaveConfirmModal(false)}>\r\n                        Continue Editing\r\n                    </button>\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => {\r\n                            setShowSaveConfirmModal(false);\r\n                            handleSave();\r\n                        }}\r\n                    >\r\n                        Yes, Save Questions\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add NavigationConfirmModal component\r\n    const NavigationConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Unsaved Changes</h3>\r\n                <p className=\"status-description\">Are you sure you want to leave this page? All interview sections/questions will be lost.</p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={handleCancelNavigation}>\r\n                        Stay on This Page\r\n                    </button>\r\n                    <button className=\"status-button primary-button\" onClick={handleConfirmNavigation}>\r\n                        Leave Page\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Create a new modal component for Apply to All confirmation\r\n    const ApplyToAllModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Apply to All Candidates</h3>\r\n                <p className=\"status-description\">\r\n                    You are about to apply these interview questions to all candidates for this job. \r\n                    Some candidates may already have interview questions set up.\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button secondary-button\" \r\n                        onClick={() => setShowApplyToAllModal(false)}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => handleApplyToAll(true)}\r\n                        style={{ pointerEvents: 'auto', opacity: 1 }} /* Ensure button is clickable */\r\n                    >\r\n                        Proceed to Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add ResetConfirmModal component\r\n    const ResetConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Reset All Questions?</h3>\r\n                <p className=\"status-description\">\r\n                    This will permanently delete all interview questions for this applicant. This action cannot be undone.\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={() => setShowResetConfirmModal(false)}>\r\n                        Cancel\r\n                    </button>\r\n                    <button className=\"status-button danger-button\" onClick={performReset}>\r\n                        Yes, Reset All\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add ResetSuccessModal component\r\n    const ResetSuccessModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal success-modal\">\r\n                <div className=\"status-icon success-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Reset Successful</h3>\r\n                <p className=\"status-description\">Interview questions have been reset successfully!</p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={() => setShowResetSuccessModal(false)}\r\n                    >\r\n                        Continue\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add UnsavedResetModal component\r\n    const UnsavedResetModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Discard Unsaved Changes?</h3>\r\n                <p className=\"status-description\">\r\n                    You haven't saved these questions yet. Are you sure you want to discard all the sections and questions you've just created?\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={() => setShowUnsavedResetModal(false)}>\r\n                        Cancel\r\n                    </button>\r\n                    <button className=\"status-button danger-button\" onClick={() => {\r\n                        setShowUnsavedResetModal(false);\r\n                        if (selectedApplicant === \"all\") {\r\n                            // Handle Apply to All discard action - FIXED: Don't call handleApplyToAll \r\n                            resetUI(true); // Keep the selected applicant\r\n                            setChangesSaved(true); // Mark as saved after reset\r\n                            setShowResetSuccessModal(true); // Show success message\r\n                        } else {\r\n                            // Regular reset for individual candidates\r\n                            resetUI(true); // Keep the selected applicant\r\n                            setChangesSaved(true); // Mark as saved after reset\r\n                            // Show success message\r\n                            setShowResetSuccessModal(true);\r\n                        }\r\n                    }}>\r\n                        Discard Changes\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Update CandidateSwitchModal component\r\n    const CandidateSwitchModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">Unsaved Changes</h3>\r\n                <p className=\"status-description\">\r\n                    {selectedApplicant === \"all\" ? \r\n                        \"You have unsaved interview questions that will apply to all candidates. Switching to another candidate will cause your unsaved changes to be lost.\" : \r\n                        \"You have unsaved interview questions for the current candidate. Switching to another candidate will cause your unsaved changes to be lost.\"}\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button className=\"status-button secondary-button\" onClick={handleCancelCandidateSwitch}>\r\n                        Stay and Save Changes\r\n                    </button>\r\n                    <button className=\"status-button danger-button\" onClick={handleConfirmCandidateSwitch}>\r\n                        Switch Candidate\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Modify the AI Generate function to show confirmation first\r\n    const handleAIGenerate = () => {\r\n        // Check if any applicant is selected\r\n        if (!selectedApplicant) {\r\n            setErrorMessage(\"Please select an applicant first before generating AI questions.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n        \r\n        // Check if AI has already been used for this specific candidate\r\n        if (selectedApplicant !== \"all\" && aiGenerateUsedMap[selectedApplicant]) {\r\n            setErrorMessage(\"AI generation has been used up for this candidate. You can modify the existing AI-generated questions.\");\r\n            setShowErrorModal(true);\r\n            return;\r\n        }\r\n        \r\n        // Show confirmation dialog instead of generating immediately\r\n        setShowAIConfirmModal(true);\r\n    };\r\n\r\n    // New function to handle actual AI generation after confirmation\r\n    const handleConfirmAIGenerate = () => {\r\n        setShowAIConfirmModal(false);\r\n        \r\n        // AI generation code moved here from handleAIGenerate\r\n        const aiGeneratedSections = [\r\n            {\r\n                title: \"Technical Skills\",\r\n                questions: [\r\n                    { \r\n                        text: \"Can you describe your experience with our required technologies?\", \r\n                        timeLimit: 60, \r\n                        isCompulsory: true, \r\n                        isAIGenerated: true,\r\n                        // Store original values to detect if restored\r\n                        originalText: \"Can you describe your experience with our required technologies?\",\r\n                        originalTimeLimit: 60,\r\n                        originalCompulsory: true\r\n                    },\r\n                    { \r\n                        text: \"What technical challenges have you faced in your previous roles?\", \r\n                        timeLimit: 90, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"What technical challenges have you faced in your previous roles?\",\r\n                        originalTimeLimit: 90,\r\n                        originalCompulsory: false\r\n                    },\r\n                    { \r\n                        text: \"How do you stay updated with industry developments?\", \r\n                        timeLimit: 45, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"How do you stay updated with industry developments?\",\r\n                        originalTimeLimit: 45,\r\n                        originalCompulsory: false\r\n                    }\r\n                ],\r\n                randomSettings: {\r\n                    enabled: true,\r\n                    count: 1\r\n                },\r\n                isAIGenerated: true\r\n            },\r\n            {\r\n                title: \"Problem Solving\",\r\n                questions: [\r\n                    { \r\n                        text: \"Describe a complex problem you solved in your previous role.\", \r\n                        timeLimit: 120, \r\n                        isCompulsory: true, \r\n                        isAIGenerated: true,\r\n                        originalText: \"Describe a complex problem you solved in your previous role.\",\r\n                        originalTimeLimit: 120,\r\n                        originalCompulsory: true\r\n                    },\r\n                    { \r\n                        text: \"How do you approach troubleshooting technical issues?\", \r\n                        timeLimit: 60, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"How do you approach troubleshooting technical issues?\",\r\n                        originalTimeLimit: 60,\r\n                        originalCompulsory: false\r\n                    },\r\n                    { \r\n                        text: \"Tell me about a time when you had to make a decision with incomplete information.\", \r\n                        timeLimit: 90, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"Tell me about a time when you had to make a decision with incomplete information.\",\r\n                        originalTimeLimit: 90,\r\n                        originalCompulsory: false\r\n                    }\r\n                ],\r\n                randomSettings: {\r\n                    enabled: true,\r\n                    count: 1\r\n                },\r\n                isAIGenerated: true\r\n            },\r\n            {\r\n                title: \"Team Collaboration\",\r\n                questions: [\r\n                    { \r\n                        text: \"How do you handle disagreements within your team?\", \r\n                        timeLimit: 60, \r\n                        isCompulsory: true, \r\n                        isAIGenerated: true,\r\n                        originalText: \"How do you handle disagreements within your team?\",\r\n                        originalTimeLimit: 60,\r\n                        originalCompulsory: true\r\n                    },\r\n                    { \r\n                        text: \"Describe your experience working in cross-functional teams.\", \r\n                        timeLimit: 75, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"Describe your experience working in cross-functional teams.\",\r\n                        originalTimeLimit: 75,\r\n                        originalCompulsory: false\r\n                    },\r\n                    { \r\n                        text: \"How do you ensure effective communication in remote work settings?\", \r\n                        timeLimit: 60, \r\n                        isCompulsory: false, \r\n                        isAIGenerated: true,\r\n                        originalText: \"How do you ensure effective communication in remote work settings?\",\r\n                        originalTimeLimit: 60,\r\n                        originalCompulsory: false\r\n                    }\r\n                ],\r\n                randomSettings: {\r\n                    enabled: true,\r\n                    count: 1\r\n                },\r\n                isAIGenerated: true\r\n            }\r\n        ];\r\n        \r\n        // Append AI sections instead of replacing\r\n        setSections(prevSections => [...prevSections, ...aiGeneratedSections]);\r\n        \r\n        // Mark that AI has been used but not yet saved\r\n        setAiGeneratedUnsaved(true);\r\n        \r\n        // If applicant is \"all\", don't add to aiGenerateUsedMap since it's for all applicants\r\n        if (selectedApplicant !== \"all\") {\r\n            setAiGenerateUsedMap(prev => ({\r\n                ...prev,\r\n                [selectedApplicant]: true\r\n            }));\r\n        }\r\n        \r\n        // Show success message\r\n        setShowAISuccess(true);\r\n        \r\n        // Hide the success message after 3 seconds\r\n        setTimeout(() => {\r\n            setShowAISuccess(false);\r\n        }, 3000);\r\n    };\r\n\r\n    const handleStartEditingSection = (sectionIndex, currentTitle) => {\r\n        setEditingSectionIndex(sectionIndex);\r\n        setEditedSectionTitle(currentTitle);\r\n    };\r\n\r\n    const handleSaveSectionTitle = (sectionIndex) => {\r\n        if (editedSectionTitle.trim()) {\r\n            const updatedSections = [...sections];\r\n            updatedSections[sectionIndex].title = editedSectionTitle.trim();\r\n            setSections(updatedSections);\r\n        }\r\n        setEditingSectionIndex(null);\r\n    };\r\n\r\n    const handleKeyPressSectionTitle = (e, sectionIndex) => {\r\n        if (e.key === 'Enter') {\r\n            handleSaveSectionTitle(sectionIndex);\r\n        } else if (e.key === 'Escape') {\r\n            setEditingSectionIndex(null);\r\n        }\r\n    };\r\n\r\n    // Show loading when navigating back or initially fetching job details\r\n    if (isNavigatingBack || isLoading) {\r\n        return (\r\n            <div className=\"dashboard-container\" style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '80vh' \r\n            }}>\r\n                <div className=\"loading-indicator\" style={{ textAlign: 'center' }}>\r\n                    <LoadingAnimation />\r\n                    <p style={{ marginTop: '20px' }}>\r\n                        {isNavigatingBack ? \"Returning to Job Details...\" : \r\n                         `${loadingOperation} Interview Questions...`}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Create AIConfirmModal component\r\n    const AIConfirmModal = () => (\r\n        <div className=\"status-modal-overlay\" role=\"dialog\" aria-modal=\"true\">\r\n            <div className=\"status-modal\">\r\n                <div className=\"status-icon warning-icon ai-warning-icon\" aria-hidden=\"true\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon>\r\n                    </svg>\r\n                </div>\r\n                <h3 className=\"status-title\">One-Time AI Generation</h3>\r\n                <p className=\"status-description\">\r\n                AI question generation can only be used <strong>once per candidate</strong>. \r\n                Once you click '<strong>Save Changes</strong>',  you cannot use it again. \r\n                Be careful when modifying or deleting questions, as you won’t be able to regenerate them unless you delete the entire set.\r\n                </p>\r\n                <div className=\"status-buttons\">\r\n                    <button \r\n                        className=\"status-button secondary-button\" \r\n                        onClick={() => setShowAIConfirmModal(false)}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button \r\n                        className=\"status-button primary-button\" \r\n                        onClick={handleConfirmAIGenerate}\r\n                    >\r\n                        Generate Questions\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"add-interview-questions-container\">\r\n            {showSuccessModal && <SuccessModal />}\r\n            {showErrorModal && <ErrorModal />}\r\n            {showResetSuccessModal && <ResetSuccessModal />}\r\n            {showConfirmModal && <ConfirmModal />}\r\n            {showSaveConfirmModal && <SaveConfirmModal />}\r\n            {showNavigationModal && <NavigationConfirmModal />}\r\n            {showApplyToAllModal && <ApplyToAllModal />}\r\n            {showResetConfirmModal && <ResetConfirmModal />}\r\n            {showUnsavedResetModal && <UnsavedResetModal />}\r\n            {showCandidateSwitchModal && <CandidateSwitchModal />}\r\n            {showAIConfirmModal && <AIConfirmModal />}\r\n            \r\n            {/* Header section with back button and title */}\r\n            <div className=\"page-header\">\r\n                <button className=\"back-button\" onClick={handleGoBackToJobDetails}>\r\n                    <svg className=\"back-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n                    </svg>\r\n                    Back to Job Details\r\n                </button>\r\n                <div className=\"title-container\">\r\n                    <h1>Interview Questions</h1>\r\n                    {jobDetails && <p className=\"job-title-reference\">for {jobDetails.jobTitle}</p>}\r\n                </div>\r\n            </div>\r\n            \r\n            {/* Main content area */}\r\n            <div className=\"interview-content\">\r\n                {/* Controls panel */}\r\n                <div className=\"controls-panel\">\r\n                    <div className=\"applicant-selector\">\r\n                        <label htmlFor=\"applicant-select\">Select an applicant:</label>\r\n                        <div className=\"select-actions\">\r\n                            <select \r\n                                id=\"applicant-select\" \r\n                                value={selectedApplicant}\r\n                                onChange={handleApplicantChange}\r\n                                disabled={isLoadingApplicants}\r\n                                title={selectedApplicant}\r\n                            >\r\n                                <option value=\"\">-- Select applicant --</option>\r\n                                <option value=\"all\">Apply to All</option>\r\n                                {applicants.map(app => (\r\n                                    <option key={app.candidateId} value={app.candidateId} title={app.candidateId}>\r\n                                        {app.candidateId}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            \r\n                            {selectedApplicant && selectedApplicant !== \"all\" && (\r\n                                <button \r\n                                    className=\"view-profile-button\" \r\n                                    onClick={handleViewProfile}\r\n                                    aria-label=\"View applicant profile\"\r\n                                >\r\n                                    View Profile\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"ai-generate-button-container\">\r\n                        {showAISuccess && (\r\n                            <div className=\"ai-success-message\">\r\n                                <span>✓ AI-generated sections added successfully!</span>\r\n                            </div>\r\n                        )}\r\n                        {/* Only show butterfly divs and AI button when an applicant is selected AND it's not \"Apply to All\" */}\r\n                        {selectedApplicant && selectedApplicant !== \"all\" && (\r\n                            <>\r\n                                {/* Only show butterfly animations when the button hasn't been used yet for specific applicants */}\r\n                                {!aiGenerateUsedMap[selectedApplicant] && (\r\n                                    <>\r\n                                        <div className=\"butterfly\"></div>\r\n                                        <div className=\"butterfly\"></div>\r\n                                        <div className=\"butterfly\"></div>\r\n                                        <div className=\"butterfly\"></div>\r\n                                    </>\r\n                                )}\r\n                                <button \r\n                                    className={`ai-generate-button ${\r\n                                        aiGenerateUsedMap[selectedApplicant] ? 'used' : ''\r\n                                    }`} \r\n                                    onClick={handleAIGenerate}\r\n                                    title={aiGenerateUsedMap[selectedApplicant] ? \r\n                                          \"AI generation has already been used for this candidate\" : \r\n                                          \"Generate interview questions with AI\"}\r\n                                >\r\n                                    <svg className=\"ai-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                                    </svg>\r\n                                    {aiGenerateUsedMap[selectedApplicant] ? \r\n                                      \"AI Sections Added\" : \r\n                                      \"AI Generate Questions\"}\r\n                                </button>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                \r\n                {/* Section creator - Only show if an applicant is selected */}\r\n                {selectedApplicant && (\r\n                    <div className=\"section-creator\">\r\n                        <h2>Add New Section</h2>\r\n                        <div className=\"section-input-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"section-title-input\"\r\n                                placeholder=\"Enter section title (e.g., Technical Skills, Work Experience)\"\r\n                                value={newSectionTitle}\r\n                                onChange={(e) => setNewSectionTitle(e.target.value)}\r\n                                onKeyPress={(e) => e.key === \"Enter\" && handleAddSection()}\r\n                            />\r\n                            <button className=\"add-section-button\" onClick={handleAddSection}>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"add-icon\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\r\n                                </svg>\r\n                                Add Section\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Sections container or message prompting to select applicant */}\r\n                {!selectedApplicant ? (\r\n                    <div className=\"no-sections applicant-select-prompt\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"empty-icon\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.75 3.104v5.714a2.25 2.25 0 01-.659 1.591L5 14.5M9.75 3.104c-.251.023-.501.05-.75.082m.75-.082a24.301 24.301 0 014.5 0m0 0v5.714c0 .597.237 1.17.659 1.591L19.8 15.3M14.25 3.104c.251.023.501.05.75.082M19.8 15.3l-1.57.393A9.065 9.065 0 0112 15a9.065 9.065 0 00-6.23-.693L5 14.5m14.8.8l1.402 1.402c1.232 1.232.65 3.318-1.067 3.611A48.309 48.309 0 0112 21c-2.773 0-5.491-.235-8.135-.687-1.718-.293-2.3-2.379-1.067-3.61L5 14.5\" />\r\n                        </svg>\r\n                        <p>Please select an applicant to get started.</p>\r\n                        <p>You'll be able to create interview questions after selecting an applicant.</p>\r\n                    </div>\r\n                ) : sections.length === 0 ? (\r\n                    <div className=\"no-sections\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"empty-icon\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8 9h8M8 13h6M8 17h4M19 3H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2z\"></path>\r\n                        </svg>\r\n                        <p>No interview question sections added yet.</p>\r\n                        <p>Add a section to get started or use AI Generate.</p>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"sections-container\">\r\n                        {sections.map((section, sectionIndex) => (\r\n                            <div key={sectionIndex} className={`section-card ${section.isAIGenerated ? 'ai-generated-section' : ''}`}>\r\n                                <div className=\"section-header\">\r\n                                    {editingSectionIndex === sectionIndex ? (\r\n                                        <div className=\"section-title-edit-container\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"section-title-input-edit\"\r\n                                                value={editedSectionTitle}\r\n                                                onChange={(e) => setEditedSectionTitle(e.target.value)}\r\n                                                onBlur={() => handleSaveSectionTitle(sectionIndex)}\r\n                                                onKeyDown={(e) => handleKeyPressSectionTitle(e, sectionIndex)}\r\n                                                autoFocus\r\n                                            />\r\n                                            <div className=\"edit-actions\">\r\n                                                <button \r\n                                                    className=\"save-edit-button\"\r\n                                                    onClick={() => handleSaveSectionTitle(sectionIndex)}\r\n                                                    title=\"Save title\"\r\n                                                >\r\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                                        <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n                                                    </svg>\r\n                                                </button>\r\n                                                <button \r\n                                                    className=\"cancel-edit-button\"\r\n                                                    onClick={() => setEditingSectionIndex(null)}\r\n                                                    title=\"Cancel edit\"\r\n                                                >\r\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                                                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                                                    </svg>\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div className=\"section-title-editable\">\r\n                                            <h2 className=\"section-title\">{section.title}</h2>\r\n                                            <button \r\n                                                className=\"edit-title-button\"\r\n                                                onClick={() => handleStartEditingSection(sectionIndex, section.title)}\r\n                                                aria-label={`Edit section ${section.title}`}\r\n                                            >\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                                    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n                                                    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n                                                </svg>\r\n                                            </button>\r\n                                        </div>\r\n                                    )}\r\n                                    <button \r\n                                        className=\"remove-section-button\"\r\n                                        onClick={() => handleRemoveSection(sectionIndex)}\r\n                                        aria-label={`Remove section ${section.title}`}\r\n                                    >\r\n                                        <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                                        </svg>\r\n                                    </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"section-random-settings\">\r\n                                    <div className=\"random-toggle\">\r\n                                        <label className=\"random-label\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={section.randomSettings.enabled}\r\n                                                onChange={(e) => handleSectionRandomSettingsChange(sectionIndex, e.target.checked)}\r\n                                                className=\"random-checkbox\"\r\n                                            />\r\n                                            <span>Enable random question selection</span>\r\n                                        </label>\r\n                                        \r\n                                        {section.questions.filter(q => !q.isCompulsory).length < 2 && (\r\n                                            <span className=\"random-disabled-note\">\r\n                                                (Requires at least 2 non-compulsory questions)\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    \r\n                                    {section.randomSettings.enabled && (\r\n                                        <div className=\"random-count-selector\">\r\n                                            <label htmlFor={`random-count-${sectionIndex}`}>\r\n                                                <span>Select</span>\r\n                                                <input\r\n                                                    id={`random-count-${sectionIndex}`}\r\n                                                    type=\"number\"\r\n                                                    min=\"1\"\r\n                                                    max={Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1)}\r\n                                                    value={section.randomSettings.count}\r\n                                                    onChange={(e) => handleRandomCountChange(sectionIndex, e.target.value)}\r\n                                                    className={`random-count-input ${\r\n                                                        section.randomSettings.count > Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1) ? 'invalid' : ''\r\n                                                    }`}\r\n                                                />\r\n                                                <span>out of {section.questions.filter(q => !q.isCompulsory).length} non-compulsory questions</span>\r\n                                            </label>\r\n                                            \r\n                                            {section.randomSettings.count > Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1) && (\r\n                                                <div className=\"random-count-warning\">\r\n                                                    <svg className=\"warning-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                                                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                                                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                                                    </svg>\r\n                                                    <span>You can select at most {Math.max(1, section.questions.filter(q => !q.isCompulsory).length - 1)} questions to maintain randomness</span>\r\n                                                </div>\r\n                                            )}\r\n                                            \r\n                                            <div className=\"random-help-text\">\r\n                                                <span>Compulsory questions always appear. Random questions will be selected from the remaining pool.</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                \r\n                                <div className=\"questions-container\">\r\n                                    {section.questions.map((question, questionIndex) => (\r\n                                        <div \r\n                                            key={questionIndex} \r\n                                            className={`question-item ${question.isCompulsory ? 'compulsory-item' : 'optional-item'} ${question.isAIGenerated ? 'ai-generated-question' : ''}`}\r\n                                        >\r\n                                            <div className=\"question-content\">\r\n                                                <div className={`question-header ${question.isAIGenerated ? 'ai-generated-header' : ''}`}>\r\n                                                    <div className=\"question-number\">{questionIndex + 1}</div>\r\n                                                    <div className=\"question-type-indicator\">\r\n                                                        {question.isCompulsory ? \r\n                                                            <span className=\"compulsory-badge\">Compulsory</span> : \r\n                                                            <span className=\"optional-badge\">Optional</span>\r\n                                                        }\r\n                                                        \r\n                                                        {/* AI Badge */}\r\n                                                        {question.isAIGenerated && (\r\n                                                            <span className={`ai-badge ${question.isAIModified ? 'ai-modified' : ''}`}>\r\n                                                                {question.isAIModified ? 'AI Generated (Modified)' : 'AI Generated'}\r\n                                                            </span>\r\n                                                        )}\r\n                                                    </div>\r\n                                                    <button \r\n                                                        className=\"remove-question-button\"\r\n                                                        onClick={() => handleRemoveQuestion(sectionIndex, questionIndex)}\r\n                                                        aria-label=\"Remove question\"\r\n                                                    >\r\n                                                        <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                                                        </svg>\r\n                                                    </button>\r\n                                                </div>\r\n                                                \r\n                                                <textarea\r\n                                                    className={`question-textarea ${question.isCompulsory ? 'compulsory' : 'optional'} ${question.isAIGenerated ? 'ai-generated-textarea' : ''}`}\r\n                                                    placeholder=\"Enter interview question\"\r\n                                                    value={question.text}\r\n                                                    onChange={(e) => handleQuestionChange(sectionIndex, questionIndex, e.target.value)}\r\n                                                />\r\n                                                \r\n                                                <div className={`question-controls ${question.isAIGenerated ? 'ai-generated-controls' : ''}`}>\r\n                                                    <div className=\"question-time-control\">\r\n                                                        <svg className=\"time-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                                                            <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                                                        </svg>\r\n                                                        <label htmlFor={`time-limit-${sectionIndex}-${questionIndex}`}>\r\n                                                            Time Limit:\r\n                                                        </label>\r\n                                                        <input\r\n                                                            id={`time-limit-${sectionIndex}-${questionIndex}`}\r\n                                                            type=\"number\"\r\n                                                            min=\"1\"\r\n                                                            max=\"300\"\r\n                                                            value={question.timeLimit}\r\n                                                            onChange={(e) => \r\n                                                                handleQuestionTimeChange(sectionIndex, questionIndex, e.target.value)\r\n                                                            }\r\n                                                            className=\"time-input\"\r\n                                                        />\r\n                                                        <span className=\"time-unit\">seconds</span>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"question-compulsory-control\">\r\n                                                        <label className=\"compulsory-label\">\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={question.isCompulsory}\r\n                                                                onChange={(e) => \r\n                                                                    handleQuestionCompulsoryChange(sectionIndex, questionIndex, e.target.checked)\r\n                                                                }\r\n                                                                className=\"compulsory-checkbox\"\r\n                                                            />\r\n                                                            Make compulsory\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                \r\n                                <button\r\n                                    className=\"add-question-button\"\r\n                                    onClick={() => handleAddQuestion(sectionIndex)}\r\n                                >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"add-q-icon\">\r\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\r\n                                    </svg>\r\n                                    Add Question\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                \r\n                {/* Only show the interview time summary if an applicant is selected */}\r\n                {selectedApplicant && (\r\n                    <div className=\"interview-stats-summary\">\r\n                        <div className=\"stats-item time-stats\">\r\n                            <div className=\"stats-icon\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                                    <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                                </svg>\r\n                            </div>\r\n                            <div className=\"stats-content\">\r\n                                <span className=\"stats-label\">Total Interview Time:</span>\r\n                                <span className=\"stats-value\">\r\n                                    {totalInterviewTime.minutes} minute{totalInterviewTime.minutes !== 1 ? 's' : ''} \r\n                                    {totalInterviewTime.seconds > 0 ? ` and ${totalInterviewTime.seconds} second${totalInterviewTime.seconds !== 1 ? 's' : ''}` : ''}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"stats-item question-stats\">\r\n                            <div className=\"stats-icon\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                    <path d=\"M8 9h8M8 13h6M8 17h4M19 3H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2z\"></path>\r\n                                </svg>\r\n                            </div>\r\n                            <div className=\"stats-content\">\r\n                                <span className=\"stats-label\">Total Effective Questions Set For Interview:</span>\r\n                                <span className=\"stats-value\">\r\n                                    {/* Always display the effectiveQuestions count, with a fallback to 0 */}\r\n                                    {totalInterviewTime.effectiveQuestions || 0}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Save button container - only show if an applicant is selected */}\r\n                {selectedApplicant && (\r\n                    <div className=\"save-container\">\r\n                        <div className=\"action-buttons\">\r\n                            <button \r\n                                className=\"reset-button\" \r\n                                onClick={handleResetQuestions}\r\n                                disabled={!selectedApplicant}\r\n                                title={!selectedApplicant ? \"Select an applicant first\" : \r\n                                      \"Delete all questions for this applicant\"}\r\n                            >\r\n                                Reset All Questions\r\n                            </button>\r\n                            <button \r\n                                className=\"save-button\" \r\n                                onClick={handleInitiateSave}\r\n                                disabled={sections.length === 0 || !selectedApplicant}\r\n                            >\r\n                                Save Questions\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddInterviewQuestions;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAO,6BAA6B;AACpC,OAAO,oBAAoB,CAAC,CAAC;AAC7B,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC3B,oBACIH,OAAA;IAAKI,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAC9BL,OAAA;MAAKI,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7BL,OAAA;QAAKI,SAAS,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3BT,OAAA;QAAKI,SAAS,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACC,EAAA,GATIP,gBAAgB;AAWtB,MAAMQ,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC4B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC8B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC/D;EACA,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACoC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACrE;EACA,MAAM,CAACsC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACwC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAChE;EACA,MAAM,CAAC0C,cAAc,EAAEC,iBAAiB,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC4C,YAAY,EAAEC,eAAe,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACpD;EACA,MAAM,CAAC8C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACgD,eAAe,EAAEC,kBAAkB,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EAC5D;EACA,MAAM,CAACkD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACoD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrD,QAAQ,CAAC;IAAEsD,OAAO,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAE,CAAC,CAAC;EACxF;EACA,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGzD,QAAQ,CAAC,KAAK,CAAC;EACrE;EACA,MAAM,CAAC0D,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3D,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D;EACA,MAAM,CAAC4D,aAAa,EAAEC,gBAAgB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACzD;EACA,MAAM,CAAC8D,YAAY,EAAEC,eAAe,CAAC,GAAG/D,QAAQ,CAAC,IAAI,CAAC;EACtD;EACA,MAAM,CAACgE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;EACvE;EACA,MAAM,CAACkE,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnE,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACoE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrE,QAAQ,CAAC,IAAI,CAAC;EAC9D;EACA,MAAM,CAACsE,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGvE,QAAQ,CAAC,KAAK,CAAC;EACzE;EACA,MAAM,CAACwE,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGzE,QAAQ,CAAC,KAAK,CAAC;EACzE;EACA,MAAM,CAAC0E,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3E,QAAQ,CAAC,QAAQ,CAAC;EAClE;EACA,MAAM,CAAC4E,wBAAwB,EAAEC,2BAA2B,CAAC,GAAG7E,QAAQ,CAAC,KAAK,CAAC;EAC/E,MAAM,CAAC8E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG/E,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACgF,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGjF,QAAQ,CAAC,KAAK,CAAC;EACzE;EACA,MAAM,CAACkF,eAAe,EAAEC,kBAAkB,CAAC,GAAGnF,QAAQ,CAAC,EAAE,CAAC;EAC1D;EACA,MAAM,CAACoF,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrF,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACsF,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvF,QAAQ,CAAC,KAAK,CAAC;;EAEnE;EACA,MAAMwF,QAAQ,GAAGrF,WAAW,CAAC,CAAC;EAC9B,MAAMsF,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,KAAK,GAAGH,WAAW,CAACI,GAAG,CAAC,OAAO,CAAC;;EAEtC;EACA,MAAMC,QAAQ,GAAG1F,WAAW,CAAC,CAAC;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACZ,MAAM8F,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAACH,KAAK,EAAE;MAEZjE,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACA,MAAMqE,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCL,KAAK,EAAE,CAAC;QACvE,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC5E,aAAa,CAAC2E,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD,CAAC,SAAS;QACN3E,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDoE,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;;EAEX;EACA3F,SAAS,CAAC,MAAM;IACZ,MAAMuG,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAACZ,KAAK,EAAE;MAEZvD,sBAAsB,CAAC,IAAI,CAAC;MAC5B,IAAI;QACA,MAAM2D,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAyDL,KAAK,EAAE,CAAC;QAC9F,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QACjD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCpE,aAAa,CAACmE,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACNjE,sBAAsB,CAAC,KAAK,CAAC;MACjC;IACJ,CAAC;IAEDmE,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACZ,KAAK,CAAC,CAAC;EAEX,MAAMa,OAAO,GAAGA,CAACC,qBAAqB,GAAG,KAAK,KAAK;IAC/C;IACArF,WAAW,CAAC,EAAE,CAAC;IACfE,kBAAkB,CAAC,EAAE,CAAC;IACtB,IAAI,CAACmF,qBAAqB,EAAE;MACxBvE,oBAAoB,CAAC,EAAE,CAAC;IAC5B,CAAC,MAAM,IAAID,iBAAiB,EAAE;MAC1B;MACAyB,oBAAoB,CAACgD,IAAI,IAAI;QACzB,MAAMC,MAAM,GAAG;UAAC,GAAGD;QAAI,CAAC;QACxB,OAAOC,MAAM,CAAC1E,iBAAiB,CAAC;QAChC,OAAO0E,MAAM;MACjB,CAAC,CAAC;IACN;IACArE,sBAAsB,CAAC,IAAI,CAAC;IAC5BE,qBAAqB,CAAC,EAAE,CAAC;IACzBE,iBAAiB,CAAC,KAAK,CAAC;IACxBE,eAAe,CAAC,EAAE,CAAC;IACnBE,mBAAmB,CAAC,KAAK,CAAC;IAC1B;IACAsC,qBAAqB,CAAC,KAAK,CAAC;EAChC,CAAC;;EAED;EACApF,SAAS,CAAC,MAAM;IACZ,MAAM4G,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI,CAACjB,KAAK,IAAI,CAAC1D,iBAAiB,EAAE;MAElC,IAAI;QACA,MAAM8D,QAAQ,GAAG,MAAM3F,KAAK,CAACwF,GAAG,CAC5B,8DAA8D3D,iBAAiB,EACnF,CAAC;QACD,MAAMkE,IAAI,GAAGJ,QAAQ,CAACI,IAAI;QAC1B,IAAIA,IAAI,EAAE;UACN/E,WAAW,CAAC+E,IAAI,CAAChF,QAAQ,CAAC;UAC1B6C,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC/BF,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B;MACJ,CAAC,CAAC,OAAOuC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;QAEvD;QACA,IAAIA,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;UACjD;UACAzF,WAAW,CAAC,EAAE,CAAC;UACf4C,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC/BF,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B;MACJ;IACJ,CAAC;IAED8C,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACjB,KAAK,EAAE1D,iBAAiB,CAAC,CAAC;;EAE9B;EACAjC,SAAS,CAAC,MAAM;IACZ,MAAM4G,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI,CAACjB,KAAK,IAAI,CAAC1D,iBAAiB,EAAE;QAC9BuE,OAAO,CAAC,CAAC,CAAC,CAAC;QACX;MACJ;;MAEA;MACA,IAAIvE,iBAAiB,KAAK,KAAK,EAAE;QAC7B;QACAb,WAAW,CAAC,EAAE,CAAC;QACf4C,uBAAuB,CAAC,IAAI,CAAC;QAC7BF,eAAe,CAAC,IAAI,CAAC;QACrBoB,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB;MACJ;;MAEA;MACA9D,WAAW,CAAC,EAAE,CAAC;MAEf,IAAI;QACA,MAAM2E,QAAQ,GAAG,MAAM3F,KAAK,CAACwF,GAAG,CAC5B,8DAA8D3D,iBAAiB,EACnF,CAAC;QACD,MAAMkE,IAAI,GAAGJ,QAAQ,CAACI,IAAI;QAC1B,IAAIA,IAAI,EAAE;UACN;UACA,MAAMW,iBAAiB,GAAGX,IAAI,CAAChF,QAAQ,CAAC4F,GAAG,CAACC,OAAO,KAAK;YACpD,GAAGA,OAAO;YACVC,SAAS,EAAED,OAAO,CAACC,SAAS,CAACF,GAAG,CAACG,QAAQ,IAAI;cACzC;cACA,MAAMC,iBAAiB,GAAG;gBAAE,GAAGD;cAAS,CAAC;cACzC,IAAIC,iBAAiB,CAACC,aAAa,IAAID,iBAAiB,CAACE,YAAY,EAAE;gBACnE;gBACAF,iBAAiB,CAACE,YAAY,GAAG,IAAI;cACzC;cACA,OAAOF,iBAAiB;YAC5B,CAAC;UACL,CAAC,CAAC,CAAC;UAEH/F,WAAW,CAAC0F,iBAAiB,CAAC;UAC9B5B,kBAAkB,CAACoC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACV,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEnE;UACA,IAAIX,IAAI,CAACsB,gBAAgB,EAAE;YACvB;YACA/D,oBAAoB,CAACgD,IAAI,KAAK;cAC1B,GAAGA,IAAI;cACP,CAACzE,iBAAiB,GAAG;YACzB,CAAC,CAAC,CAAC;UACP;QACJ,CAAC,MAAM;UACH;UACAb,WAAW,CAAC,EAAE,CAAC;UACf8D,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5B;MACJ,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;QAEvD;QACA,IAAIA,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;UACjDP,OAAO,CAACoB,GAAG,CAAC,wEAAwE,CAAC;UACrFtG,WAAW,CAAC,EAAE,CAAC;UACf8D,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;;UAExB;UACAxB,oBAAoB,CAACgD,IAAI,IAAI;YACzB,MAAMC,MAAM,GAAG;cAAC,GAAGD;YAAI,CAAC;YACxB,OAAOC,MAAM,CAAC1E,iBAAiB,CAAC;YAChC,OAAO0E,MAAM;UACjB,CAAC,CAAC;QACN,CAAC,MAAM;UACH;UACA/D,eAAe,CAAC,4BAA4ByD,KAAK,CAACsB,OAAO,EAAE,CAAC;UAC5DjF,iBAAiB,CAAC,IAAI,CAAC;QAC3B;MACJ;IACJ,CAAC;IAEDkE,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACjB,KAAK,EAAE1D,iBAAiB,CAAC,CAAC;;EAE9B;EACAjC,SAAS,CAAC,MAAM;IACZ;IACA,MAAM4H,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;MAC/C,IAAI;QACA;QACA,IAAI,CAACD,SAAS,IAAI,CAACC,SAAS,EAAE,OAAO,IAAI;QACzC,IAAI,CAACD,SAAS,IAAI,CAACC,SAAS,EAAE,OAAO,KAAK;;QAE1C;QACA,IAAID,SAAS,CAACE,MAAM,KAAKD,SAAS,CAACC,MAAM,EAAE,OAAO,KAAK;;QAEvD;QACA,IAAIF,SAAS,CAACE,MAAM,KAAK,CAAC,IAAID,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;;QAEjE;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;UAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;UACvC,MAAMC,QAAQ,GAAGT,SAAS,CAACG,CAAC,CAAC;UAC7B,MAAMO,QAAQ,GAAGT,SAAS,CAACE,CAAC,CAAC;;UAE7B;UACA,IAAIM,QAAQ,CAACE,KAAK,KAAKD,QAAQ,CAACC,KAAK,EAAE,OAAO,KAAK;UACnD,IAAI,EAAAP,qBAAA,GAAAK,QAAQ,CAACG,cAAc,cAAAR,qBAAA,uBAAvBA,qBAAA,CAAyBS,OAAO,QAAAR,qBAAA,GAAKK,QAAQ,CAACE,cAAc,cAAAP,qBAAA,uBAAvBA,qBAAA,CAAyBQ,OAAO,GAAE,OAAO,KAAK;UACvF,IAAI,CAAAP,sBAAA,GAAAG,QAAQ,CAACG,cAAc,cAAAN,sBAAA,eAAvBA,sBAAA,CAAyBO,OAAO,IAChC,EAAAN,sBAAA,GAAAE,QAAQ,CAACG,cAAc,cAAAL,sBAAA,uBAAvBA,sBAAA,CAAyBO,KAAK,QAAAN,sBAAA,GAAKE,QAAQ,CAACE,cAAc,cAAAJ,sBAAA,uBAAvBA,sBAAA,CAAyBM,KAAK,GAAE,OAAO,KAAK;;UAEnF;UACA,IAAIL,QAAQ,CAACrB,SAAS,CAACc,MAAM,KAAKQ,QAAQ,CAACtB,SAAS,CAACc,MAAM,EAAE,OAAO,KAAK;UAEzE,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACrB,SAAS,CAACc,MAAM,EAAEa,CAAC,EAAE,EAAE;YAChD,MAAMC,SAAS,GAAGP,QAAQ,CAACrB,SAAS,CAAC2B,CAAC,CAAC;YACvC,MAAME,SAAS,GAAGhB,SAAS,CAACE,CAAC,CAAC,CAACf,SAAS,CAAC2B,CAAC,CAAC;YAE3C,IAAIC,SAAS,CAACE,IAAI,KAAKD,SAAS,CAACC,IAAI,EAAE,OAAO,KAAK;YACnD,IAAIF,SAAS,CAACG,SAAS,KAAKF,SAAS,CAACE,SAAS,EAAE,OAAO,KAAK;YAC7D,IAAIH,SAAS,CAACI,YAAY,KAAKH,SAAS,CAACG,YAAY,EAAE,OAAO,KAAK;UACvE;QACJ;;QAEA;QACA,OAAO,IAAI;MACf,CAAC,CAAC,OAAO5C,KAAK,EAAE;QACZ;QACAC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,OAAO,KAAK;MAChB;IACJ,CAAC;;IAED;IACA,IAAI,CAACtC,oBAAoB,EAAE;MACvB;MACA,MAAMmF,YAAY,GAAG5B,IAAI,CAACE,SAAS,CAACrG,QAAQ,CAAC;MAC7C,MAAMgI,mBAAmB,GAAG7B,IAAI,CAACE,SAAS,CAACvC,eAAe,CAAC;;MAE3D;MACA,MAAMmE,UAAU,GAAGF,YAAY,KAAKC,mBAAmB;;MAEvD;MACA,IAAItF,YAAY,KAAKuF,UAAU,EAAE;QAC7BtF,eAAe,CAAC,CAACsF,UAAU,CAAC;MAChC;IACJ,CAAC,MAAM;MACH;MACApF,uBAAuB,CAAC,KAAK,CAAC;IAClC;EACJ,CAAC,EAAE,CAAC7C,QAAQ,EAAE8D,eAAe,EAAElB,oBAAoB,EAAEF,YAAY,CAAC,CAAC;;EAEnE;EACA7D,SAAS,CAAC,MAAM;IACZ;IACA0D,oBAAoB,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1D,SAAS,CAAC,MAAM;IACZ,OAAO,MAAM;MACT;MACAoF,qBAAqB,CAAC,KAAK,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAACnD,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAMoH,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAIhI,eAAe,CAACiI,IAAI,CAAC,CAAC,EAAE;MACxB;MACA,MAAMC,UAAU,GAAG;QACff,KAAK,EAAEnH,eAAe;QACtB4F,SAAS,EAAE,CAAC;UACR8B,IAAI,EAAE,EAAE;UACRC,SAAS,EAAE,EAAE;UACbC,YAAY,EAAE;QAClB,CAAC,CAAC;QACFR,cAAc,EAAE;UACZC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACX;MACJ,CAAC;MAEDvH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEoI,UAAU,CAAC,CAAC;MACtCjI,kBAAkB,CAAC,EAAE,CAAC;MACtB;MACA;IACJ;EACJ,CAAC;EAED,MAAMkI,mBAAmB,GAAIC,YAAY,IAAK;IAC1C;IACA,IAAItI,QAAQ,CAACsI,YAAY,CAAC,CAACxC,SAAS,CAACc,MAAM,GAAG,CAAC,EAAE;MAC7C/E,kBAAkB,CAACyG,YAAY,CAAC;MAChC3G,mBAAmB,CAAC,IAAI,CAAC;IAC7B,CAAC,MAAM;MACH;MACA4G,aAAa,CAACD,YAAY,CAAC;IAC/B;EACJ,CAAC;;EAED;EACA,MAAMC,aAAa,GAAID,YAAY,IAAK;IACpC,MAAME,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrCwI,eAAe,CAACC,MAAM,CAACH,YAAY,EAAE,CAAC,CAAC;IACvCrI,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;;EAED;EACA,MAAME,4BAA4B,GAAGA,CAAA,KAAM;IACvCjF,2BAA2B,CAAC,KAAK,CAAC;IAClC1C,oBAAoB,CAAC2C,kBAAkB,CAAC;IACxCC,qBAAqB,CAAC,IAAI,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMgF,2BAA2B,GAAGA,CAAA,KAAM;IACtClF,2BAA2B,CAAC,KAAK,CAAC;IAClCE,qBAAqB,CAAC,IAAI,CAAC;;IAE3B;IACA5B,uBAAuB,CAAC,IAAI,CAAC;EACjC,CAAC;;EAED;EACA,MAAM6G,qBAAqB,GAAIC,CAAC,IAAK;IACjC,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;;IAE/B;IACA,IAAI,CAACtG,YAAY,IAAI1C,QAAQ,CAAC4G,MAAM,GAAG,CAAC,IAAI9F,iBAAiB,EAAE;MAC3D;MACA,MAAMiH,YAAY,GAAG5B,IAAI,CAACE,SAAS,CAACrG,QAAQ,CAAC;MAC7C,MAAMgI,mBAAmB,GAAG7B,IAAI,CAACE,SAAS,CAACvC,eAAe,CAAC;;MAE3D;MACA,IAAIiE,YAAY,KAAKC,mBAAmB,EAAE;QACtC;QACArE,qBAAqB,CAACmF,QAAQ,CAAC;QAC/BrF,2BAA2B,CAAC,IAAI,CAAC;MACrC,CAAC,MAAM;QACH;QACA1C,oBAAoB,CAAC+H,QAAQ,CAAC;QAC9B;QACAnG,eAAe,CAAC,IAAI,CAAC;MACzB;IACJ,CAAC,MAAM;MACH;MACA5B,oBAAoB,CAAC+H,QAAQ,CAAC;IAClC;EACJ,CAAC;;EAED;EACA,MAAMG,0BAA0B,GAAGA,CAAA,KAAM;IACrC,IAAIrH,eAAe,KAAK,IAAI,EAAE;MAC1B2G,aAAa,CAAC3G,eAAe,CAAC;MAC9BC,kBAAkB,CAAC,IAAI,CAAC;IAC5B;IACAF,mBAAmB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMuH,yBAAyB,GAAGA,CAAA,KAAM;IACpCrH,kBAAkB,CAAC,IAAI,CAAC;IACxBF,mBAAmB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMwH,iBAAiB,GAAIb,YAAY,IAAK;IACxC,MAAME,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC;IACAwI,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACsD,IAAI,CAAC;MACzCxB,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,EAAE;MACbC,YAAY,EAAE;IAClB,CAAC,CAAC;IACF7H,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMa,oBAAoB,GAAGA,CAACf,YAAY,EAAEgB,aAAa,EAAEN,KAAK,KAAK;IACjE,MAAMR,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC,MAAM+F,QAAQ,GAAGyC,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACwD,aAAa,CAAC;;IAEvE;IACA,IAAIvD,QAAQ,CAACE,aAAa,EAAE;MACxB;MACA,IAAI,CAACF,QAAQ,CAACwD,YAAY,IAAI,CAACxD,QAAQ,CAACG,YAAY,EAAE;QAClDH,QAAQ,CAACwD,YAAY,GAAGxD,QAAQ,CAAC6B,IAAI;MACzC;;MAEA;MACA,IAAI7B,QAAQ,CAACwD,YAAY,IAAIP,KAAK,KAAKjD,QAAQ,CAACwD,YAAY,EAAE;QAC1D;QACAxD,QAAQ,CAACG,YAAY,GAAG,KAAK;MACjC,CAAC,MAAM,IAAIH,QAAQ,CAAC6B,IAAI,KAAKoB,KAAK,EAAE;QAChC;QACAjD,QAAQ,CAACG,YAAY,GAAG,IAAI;MAChC;IACJ;IAEAH,QAAQ,CAAC6B,IAAI,GAAGoB,KAAK;IACrB/I,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMgB,wBAAwB,GAAGA,CAAClB,YAAY,EAAEgB,aAAa,EAAEN,KAAK,KAAK;IACrE,MAAMR,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC;IACA,MAAM6H,SAAS,GAAG4B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEC,QAAQ,CAACX,KAAK,CAAC,IAAI,CAAC,CAAC;IACnD,MAAMjD,QAAQ,GAAGyC,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACwD,aAAa,CAAC;;IAEvE;IACA,IAAIvD,QAAQ,CAACE,aAAa,IAAI,CAACF,QAAQ,CAAC6D,iBAAiB,IAAI,CAAC7D,QAAQ,CAACG,YAAY,EAAE;MACjFH,QAAQ,CAAC6D,iBAAiB,GAAG7D,QAAQ,CAAC8B,SAAS;IACnD;;IAEA;IACA,IAAI9B,QAAQ,CAACE,aAAa,EAAE;MACxB;MACA,IAAIF,QAAQ,CAAC6D,iBAAiB,IAAI/B,SAAS,KAAK9B,QAAQ,CAAC6D,iBAAiB,EAAE;QACxE;QACA,MAAMC,cAAc,GAAG,CAAC9D,QAAQ,CAACwD,YAAY,IAAIxD,QAAQ,CAAC6B,IAAI,KAAK7B,QAAQ,CAACwD,YAAY;QACxF,MAAMO,oBAAoB,GAAG,CAAC/D,QAAQ,CAACgE,cAAc,CAAC,oBAAoB,CAAC,IAAIhE,QAAQ,CAAC+B,YAAY,KAAK/B,QAAQ,CAACiE,kBAAkB;QAEpI,IAAIH,cAAc,IAAIC,oBAAoB,EAAE;UACxC/D,QAAQ,CAACG,YAAY,GAAG,KAAK;QACjC;MACJ,CAAC,MAAM,IAAIH,QAAQ,CAAC8B,SAAS,KAAKA,SAAS,EAAE;QACzC9B,QAAQ,CAACG,YAAY,GAAG,IAAI;MAChC;IACJ;IAEAH,QAAQ,CAAC8B,SAAS,GAAGA,SAAS;IAC9B5H,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMyB,8BAA8B,GAAGA,CAAC3B,YAAY,EAAEgB,aAAa,EAAExB,YAAY,KAAK;IAClF,MAAMU,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC,MAAM+F,QAAQ,GAAGyC,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACwD,aAAa,CAAC;;IAEvE;IACA,IAAIvD,QAAQ,CAACE,aAAa,IAAI,CAACF,QAAQ,CAACgE,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAChE,QAAQ,CAACG,YAAY,EAAE;MACpGH,QAAQ,CAACiE,kBAAkB,GAAGjE,QAAQ,CAAC+B,YAAY;IACvD;;IAEA;IACA,IAAI/B,QAAQ,CAACE,aAAa,EAAE;MACxB,IAAIF,QAAQ,CAACgE,cAAc,CAAC,oBAAoB,CAAC,IAAIjC,YAAY,KAAK/B,QAAQ,CAACiE,kBAAkB,EAAE;QAC/F;QACA,MAAMH,cAAc,GAAG,CAAC9D,QAAQ,CAACwD,YAAY,IAAIxD,QAAQ,CAAC6B,IAAI,KAAK7B,QAAQ,CAACwD,YAAY;QACxF,MAAMW,cAAc,GAAG,CAACnE,QAAQ,CAAC6D,iBAAiB,IAAI7D,QAAQ,CAAC8B,SAAS,KAAK9B,QAAQ,CAAC6D,iBAAiB;QAEvG,IAAIC,cAAc,IAAIK,cAAc,EAAE;UAClCnE,QAAQ,CAACG,YAAY,GAAG,KAAK;QACjC;MACJ,CAAC,MAAM,IAAIH,QAAQ,CAAC+B,YAAY,KAAKA,YAAY,EAAE;QAC/C/B,QAAQ,CAACG,YAAY,GAAG,IAAI;MAChC;IACJ;IAEAH,QAAQ,CAAC+B,YAAY,GAAGA,YAAY;;IAEpC;IACA,MAAMqC,kBAAkB,GAAG3B,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;;IAEtG;IACA,IAAIkB,YAAY,IAAIqC,kBAAkB,GAAG,CAAC,IAAI3B,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,EAAE;MAChGiB,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,GAAG,KAAK;IAChE;;IAEA;IACA,IAAI,CAACO,YAAY,IAAIqC,kBAAkB,IAAI,CAAC,IAAI,CAAC3B,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,EAAE;MACnGiB,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,GAAG,IAAI;MAC3D;MACA,MAAM+C,UAAU,GAAGb,IAAI,CAACC,GAAG,CAAC,CAAC,EAAES,kBAAkB,GAAG,CAAC,CAAC;MACtD,MAAMI,YAAY,GAAGd,IAAI,CAACe,GAAG,CAACf,IAAI,CAACgB,KAAK,CAACN,kBAAkB,GAAG,CAAC,CAAC,EAAEG,UAAU,CAAC;MAC7E9B,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACE,KAAK,GAAGiC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEa,YAAY,CAAC;IAClF;IAEAtK,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMkC,iCAAiC,GAAGA,CAACpC,YAAY,EAAEf,OAAO,KAAK;IACjE,MAAMiB,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC,MAAMmK,kBAAkB,GAAG3B,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;;IAEtG;IACA,IAAIW,OAAO,IAAI4C,kBAAkB,GAAG,CAAC,EAAE;MACnC;MACA1I,eAAe,CACX;AAChB,sBAAsB+G,eAAe,CAACF,YAAY,CAAC,CAACjB,KAAK,qBAAqB8C,kBAAkB,2BAA2BA,kBAAkB,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,GAClJ,CAAC;MACD5I,iBAAiB,CAAC,IAAI,CAAC;MACvB,OAAO,CAAC;IACZ;;IAEA;IACAiH,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,GAAGA,OAAO;;IAE9D;IACA;IACA,IAAIA,OAAO,EAAE;MACT,MAAM+C,UAAU,GAAGb,IAAI,CAACC,GAAG,CAAC,CAAC,EAAES,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;MACxD,MAAMI,YAAY,GAAGd,IAAI,CAACe,GAAG,CAACf,IAAI,CAACgB,KAAK,CAACN,kBAAkB,GAAG,CAAC,CAAC,EAAEG,UAAU,CAAC;MAC7E9B,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACE,KAAK,GAAGiC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEa,YAAY,CAAC;IAClF,CAAC,MAAM;MACH;MACA/B,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,GAAG0C,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACF,GAAG,CAACG,QAAQ,IAAI;QAC9F;QACA,MAAM4E,eAAe,GAAG;UAAE,GAAG5E;QAAS,CAAC;;QAEvC;QACA,IAAI,CAACA,QAAQ,CAAC+B,YAAY,EAAE;UACxB;UACA,IAAI/B,QAAQ,CAACE,aAAa,IAAI,CAACF,QAAQ,CAACgE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YAC1EY,eAAe,CAACX,kBAAkB,GAAGjE,QAAQ,CAAC+B,YAAY;UAC9D;;UAEA;UACA,IAAI/B,QAAQ,CAACE,aAAa,EAAE;YACxB0E,eAAe,CAACzE,YAAY,GAAG,IAAI;UACvC;;UAEA;UACAyE,eAAe,CAAC7C,YAAY,GAAG,IAAI;QACvC;QAEA,OAAO6C,eAAe;MAC1B,CAAC,CAAC;IACN;IAEA1K,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMoC,uBAAuB,GAAGA,CAACtC,YAAY,EAAEd,KAAK,KAAK;IACrD,MAAMgB,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;IACrC,MAAMmK,kBAAkB,GAAG3B,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;;IAEtG;IACA;IACA,MAAMiE,WAAW,GAAGlB,QAAQ,CAACnC,KAAK,CAAC,IAAI,CAAC;IACxC,MAAM8C,UAAU,GAAGb,IAAI,CAACC,GAAG,CAAC,CAAC,EAAES,kBAAkB,GAAG,CAAC,CAAC;IACtD,MAAMW,UAAU,GAAGrB,IAAI,CAACe,GAAG,CAACK,WAAW,EAAEP,UAAU,CAAC;IAEpD9B,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACE,KAAK,GAAGsD,UAAU;IAC/DtC,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACyD,YAAY,GAAGD,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAIR,UAAU;IAEtGrK,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAMwC,oBAAoB,GAAGA,CAAC1C,YAAY,EAAEgB,aAAa,KAAK;IAC1D,MAAMd,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;;IAErC;IACA,MAAMiL,eAAe,GAAG,CAACzC,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACwD,aAAa,CAAC,CAACxB,YAAY;;IAE5F;IACAU,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAAC2C,MAAM,CAACa,aAAa,EAAE,CAAC,CAAC;;IAEhE;IACA,IAAI2B,eAAe,EAAE;MACjB,MAAMC,2BAA2B,GAAG1C,eAAe,CAACF,YAAY,CAAC,CAACxC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;;MAE/G;MACA,IAAIsE,2BAA2B,GAAG,CAAC,IAAI1C,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,EAAE;QACzFiB,eAAe,CAACF,YAAY,CAAC,CAAChB,cAAc,CAACC,OAAO,GAAG,KAAK;;QAE5D;QACA;MACJ;IACJ;IAEAtH,WAAW,CAACuI,eAAe,CAAC;EAChC,CAAC;EAED,MAAM2C,iBAAiB,GAAGA,CAAA,KAAM;IAC5B;IACAhG,OAAO,CAACoB,GAAG,CAAC,6BAA6B,EAAEzF,iBAAiB,CAAC;IAC7D;EACJ,CAAC;EAED,MAAMsK,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACA,KAAK,IAAIvE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7G,QAAQ,CAAC4G,MAAM,EAAEC,CAAC,EAAE,EAAE;MACtC,MAAMhB,OAAO,GAAG7F,QAAQ,CAAC6G,CAAC,CAAC;MAC3B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,OAAO,CAACC,SAAS,CAACc,MAAM,EAAEa,CAAC,EAAE,EAAE;QAC/C,IAAI,CAAC5B,OAAO,CAACC,SAAS,CAAC2B,CAAC,CAAC,CAACG,IAAI,CAACO,IAAI,CAAC,CAAC,EAAE;UACnC1G,eAAe,CACX,0EAA0EoE,OAAO,CAACwB,KAAK,YAC3F,CAAC;UACD9F,iBAAiB,CAAC,IAAI,CAAC;UACvB,OAAO,KAAK;QAChB;MACJ;;MAEA;MACA,IAAIsE,OAAO,CAACyB,cAAc,CAACC,OAAO,EAAE;QAChC,MAAM4C,kBAAkB,GAAGtE,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;QAChF,MAAMyE,aAAa,GAAGxF,OAAO,CAACyB,cAAc,CAACE,KAAK;QAClD,MAAM8C,UAAU,GAAGb,IAAI,CAACC,GAAG,CAAC,CAAC,EAAES,kBAAkB,GAAG,CAAC,CAAC;;QAEtD;QACA,IAAIA,kBAAkB,GAAG,CAAC,EAAE;UACxB1I,eAAe,CACX;AACxB,+BAA+BoE,OAAO,CAACwB,KAAK,sBAAsB8C,kBAAkB,2BAA2BA,kBAAkB,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,GAC9H,CAAC;UACD5I,iBAAiB,CAAC,IAAI,CAAC;UACvB,OAAO,KAAK;QAChB;;QAEA;QACA,IAAI8J,aAAa,IAAI,CAAC,IAAIA,aAAa,GAAGf,UAAU,EAAE;UAClD7I,eAAe,CACX,OAAOoE,OAAO,CAACwB,KAAK,2CAA2CiD,UAAU,oBAC7E,CAAC;UACD/I,iBAAiB,CAAC,IAAI,CAAC;UACvB,OAAO,KAAK;QAChB;MACJ,CAAC,MAAM;QACH;QACA,MAAM4I,kBAAkB,GAAGtE,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM;QAChF,IAAIuD,kBAAkB,KAAK,CAAC,EAAE;UAC1B1I,eAAe,CACX,QAAQoE,OAAO,CAACwB,KAAK;AAC7C,4IACoB,CAAC;UACD9F,iBAAiB,CAAC,IAAI,CAAC;UACvB,OAAO,KAAK;QAChB;MACJ;IACJ;IACA,OAAO,IAAI;EACf,CAAC;;EAED;EACA1C,SAAS,CAAC,MAAM;IACZ,IAAIyM,YAAY,GAAG,CAAC;IACpB,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAIC,kBAAkB,GAAG,CAAC;IAE1BxL,QAAQ,CAACyL,OAAO,CAAC5F,OAAO,IAAI;MACxB;MACA0F,cAAc,IAAI1F,OAAO,CAACC,SAAS,CAACc,MAAM;;MAE1C;MACA;MACA,IAAIf,OAAO,CAACyB,cAAc,CAACC,OAAO,EAAE;QAChC;QACA,MAAMmE,mBAAmB,GAAG7F,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACvC,YAAY,CAAC;QACzE0D,kBAAkB,IAAIE,mBAAmB,CAAC9E,MAAM;;QAEhD;QACA,IAAIf,OAAO,CAACyB,cAAc,CAACE,KAAK,GAAG,CAAC,EAAE;UAClCgE,kBAAkB,IAAI3F,OAAO,CAACyB,cAAc,CAACE,KAAK;QACtD;;QAEA;QACA,MAAMmE,cAAc,GAAGD,mBAAmB,CACrCE,MAAM,CAAC,CAACC,GAAG,EAAExB,CAAC,KAAKwB,GAAG,IAAIxB,CAAC,CAACxC,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;;QAEpD;QACA,MAAMiE,sBAAsB,GAAGjG,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC;QAC7E,MAAMiE,WAAW,GAAGlG,OAAO,CAACyB,cAAc,CAACE,KAAK;QAEhD,IAAIsE,sBAAsB,CAAClF,MAAM,GAAG,CAAC,IAAImF,WAAW,GAAG,CAAC,EAAE;UACtD;UACA,MAAMC,kBAAkB,GAAGF,sBAAsB,CAACF,MAAM,CAAC,CAACC,GAAG,EAAExB,CAAC,KAAKwB,GAAG,IAAIxB,CAAC,CAACxC,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGiE,sBAAsB,CAAClF,MAAM;UACjI;UACA0E,YAAY,IAAIK,cAAc,GAAIK,kBAAkB,GAAGD,WAAY;QACvE,CAAC,MAAM;UACHT,YAAY,IAAIK,cAAc;QAClC;MACJ,CAAC,MAAM;QACH;QACA9F,OAAO,CAACC,SAAS,CAAC2F,OAAO,CAAC1F,QAAQ,IAAI;UAClCuF,YAAY,IAAIvF,QAAQ,CAAC8B,SAAS,IAAI,CAAC;QAC3C,CAAC,CAAC;QACF;QACA2D,kBAAkB,IAAI3F,OAAO,CAACC,SAAS,CAACc,MAAM;MAClD;IACJ,CAAC,CAAC;;IAEF;IACA,MAAM1E,OAAO,GAAGuH,IAAI,CAACgB,KAAK,CAACa,YAAY,GAAG,EAAE,CAAC;IAC7C,MAAMnJ,OAAO,GAAGmJ,YAAY,GAAG,EAAE;IAEjCrJ,qBAAqB,CAAC;MAClBC,OAAO;MACPC,OAAO;MACPoJ,cAAc;MACdC;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACxL,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMiM,6BAA6B,GAAG,MAAAA,CAAA,KAAY;IAC9C,IAAI,CAACnL,iBAAiB,IAAIA,iBAAiB,KAAK,KAAK,EAAE;MACnDW,eAAe,CAAC,+DAA+D,CAAC;MAChFF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;IAEAhB,YAAY,CAAC,IAAI,CAAC;IAClBgD,mBAAmB,CAAC,YAAY,CAAC;IAEjC,IAAI;MACA;MACA,MAAMqB,QAAQ,GAAG,MAAM3F,KAAK,CAACiN,IAAI,CAC7B,2EAA2EpL,iBAAiB,EAChG,CAAC;MAED,IAAI8D,QAAQ,CAACc,MAAM,KAAK,GAAG,IAAId,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;QACpDP,OAAO,CAACoB,GAAG,CAAC,0CAA0C,EAAE3B,QAAQ,CAACI,IAAI,CAAC;QACtE;QACA;MACJ,CAAC,MAAM;QACHG,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEN,QAAQ,CAACc,MAAM,CAAC;QAC7DjE,eAAe,CAAC,wDAAwD,CAAC;QACzEF,iBAAiB,CAAC,IAAI,CAAC;MAC3B;IACJ,CAAC,CAAC,OAAO2D,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,IAAIiH,QAAQ,GAAG,iEAAiE;MAEhF,IAAIjH,KAAK,CAACN,QAAQ,EAAE;QAChBO,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACN,QAAQ,CAACI,IAAI,CAAC;QAC1DmH,QAAQ,GAAG,iBAAiBjH,KAAK,CAACN,QAAQ,CAACI,IAAI,CAACoH,MAAM,IAAIlH,KAAK,CAACsB,OAAO,EAAE;MAC7E;MAEA/E,eAAe,CAAC0K,QAAQ,CAAC;MACzB5K,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,SAAS;MACNhB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAM8L,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B;IACA,MAAMC,YAAY,GAAGtK,kBAAkB,CAACE,OAAO,IAAIF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5F,IAAImK,YAAY,GAAG,CAAC,EAAE;MAClB7K,eAAe,CACX,+DAA+DO,kBAAkB,CAACE,OAAO,UAAUF,kBAAkB,CAACE,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,OAAOH,kBAAkB,CAACG,OAAO,UAAUH,kBAAkB,CAACG,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE;AACjS,sGACY,CAAC;MACDZ,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;;IAEA;IACA,IAAI,CAAC6J,gBAAgB,CAAC,CAAC,EAAE;MACrB;IACJ;IAEA,IAAIpL,QAAQ,CAAC4G,MAAM,KAAK,CAAC,IAAI,CAAC9F,iBAAiB,EAAE;MAC7CW,eAAe,CAAC,uFAAuF,CAAC;MACxGF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;IAEAhB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBgD,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;;IAE/B,IAAI;MACA;MACA,MAAMgJ,aAAa,GAAGvM,QAAQ,CAAC4F,GAAG,CAACC,OAAO,KAAK;QAC3C,GAAGA,OAAO;QACV2G,SAAS,EAAE3G,OAAO,CAAC2G,SAAS,IAAI,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAAE;QACtD5G,SAAS,EAAED,OAAO,CAACC,SAAS,CAACF,GAAG,CAACG,QAAQ,IAAI;UACzC;UACA,MAAMC,iBAAiB,GAAG;YACtB,GAAGD,QAAQ;YACX4G,UAAU,EAAE5G,QAAQ,CAAC4G,UAAU,IAAI,QAAQF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAE;UAC7D,CAAC;;UAED;UACA,IAAI1G,iBAAiB,CAACC,aAAa,IAAID,iBAAiB,CAACE,YAAY,EAAE;YACnEF,iBAAiB,CAACE,YAAY,GAAG,IAAI;UACzC;UAEA,OAAOF,iBAAiB;QAC5B,CAAC;MACL,CAAC,CAAC,CAAC,CAACoE,MAAM,CAACvE,OAAO,IAAIA,OAAO,CAACC,SAAS,CAACc,MAAM,GAAG,CAAC,CAAC;MAEnD,MAAMgG,OAAO,GAAG;QACZC,aAAa,EAAE/L,iBAAiB;QAAE;QAClCgM,WAAW,EAAEhM,iBAAiB,KAAK,KAAK,GAAG,KAAK,GAAGA,iBAAiB;QACpEd,QAAQ,EAAEuM,aAAa;QACvB;QACAjG,gBAAgB,EAAExF,iBAAiB,KAAK,KAAK,KACxCwB,iBAAiB,CAACxB,iBAAiB,CAAC,IAAIkD,kBAAkB;MACnE,CAAC;;MAED;MACA,IAAI+I,aAAa,GAAG,IAAI;MACxB,IAAI;QACA,MAAMC,aAAa,GAAG,MAAM/N,KAAK,CAACwF,GAAG,CACjC,8DAA8D3D,iBAAiB,EACnF,CAAC;QACD,IAAIkM,aAAa,CAAChI,IAAI,EAAE;UACpB+H,aAAa,GAAGC,aAAa,CAAChI,IAAI,CAAC+H,aAAa,CAAC,CAAC;UAClD5H,OAAO,CAACoB,GAAG,CAAC,sCAAsC,EAAEwG,aAAa,CAAC;QACtE;MACJ,CAAC,CAAC,OAAO7H,KAAK,EAAE;QACZ;QACA,IAAIA,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;UACjDP,OAAO,CAACoB,GAAG,CAAC,wDAAwD,CAAC;QACzE,CAAC,MAAM;UACHpB,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QACjE;MACJ;;MAEA;MACA,IAAI6H,aAAa,EAAE;QACfH,OAAO,CAACG,aAAa,GAAGA,aAAa;MACzC;MAEA5H,OAAO,CAACoB,GAAG,CAAC,2CAA2C,EAAEqG,OAAO,CAAC;MAEjE,MAAMK,YAAY,GAAG,MAAMhO,KAAK,CAACiN,IAAI,CACjC,iEAAiE,EACjEU,OACJ,CAAC;MAEDzH,OAAO,CAACoB,GAAG,CAAC,gBAAgB,EAAE0G,YAAY,CAAC;MAE3C,IAAIA,YAAY,CAACvH,MAAM,KAAK,GAAG,IAAIuH,YAAY,CAACvH,MAAM,KAAK,GAAG,EAAE;QAC5DP,OAAO,CAACoB,GAAG,CAAC,+BAA+B,EAAE0G,YAAY,CAACjI,IAAI,CAAC;QAC/DrC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QACvBoB,kBAAkB,CAACoC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACrG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;QAE1D;QACA,IAAIgE,kBAAkB,EAAE;UACpBzB,oBAAoB,CAACgD,IAAI,KAAK;YAC1B,GAAGA,IAAI;YACP,CAACzE,iBAAiB,GAAG;UACzB,CAAC,CAAC,CAAC;UACHmD,qBAAqB,CAAC,KAAK,CAAC;QAChC;;QAEA;QACA,IAAInD,iBAAiB,KAAK,KAAK,EAAE;UAC7B,IAAI;YACA;YACAyC,mBAAmB,CAAC,gCAAgC,CAAC;YAErD,MAAM2J,WAAW,GAAG,MAAMjO,KAAK,CAACiN,IAAI,CAChC,2EAA2EpL,iBAAiB,EAChG,CAAC;YAED,IAAIoM,WAAW,CAACxH,MAAM,KAAK,GAAG,IAAIwH,WAAW,CAACxH,MAAM,KAAK,GAAG,EAAE;cAC1DP,OAAO,CAACoB,GAAG,CAAC,0CAA0C,EAAE2G,WAAW,CAAClI,IAAI,CAAC;YAC7E,CAAC,MAAM;cACHG,OAAO,CAACgI,IAAI,CAAC,mDAAmD,CAAC;YACrE;UACJ,CAAC,CAAC,OAAOC,QAAQ,EAAE;YACfjI,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEkI,QAAQ,CAAC;YAC1E;UACJ;QACJ;QAEA3M,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACH0E,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAE+H,YAAY,CAACvH,MAAM,CAAC;QACjEjE,eAAe,CAAC,6CAA6C,CAAC;QAC9DF,iBAAiB,CAAC,IAAI,CAAC;MAC3B;IACJ,CAAC,CAAC,OAAO2D,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,IAAIiH,QAAQ,GAAG,6DAA6D;MAE5E,IAAIjH,KAAK,CAACN,QAAQ,EAAE;QAChBO,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACN,QAAQ,CAACI,IAAI,CAAC;QAC1DmH,QAAQ,GAAG,iBAAiBjH,KAAK,CAACN,QAAQ,CAACI,IAAI,CAACoH,MAAM,IAAIlH,KAAK,CAACsB,OAAO,EAAE;MAC7E;MAEA/E,eAAe,CAAC0K,QAAQ,CAAC;MACzB5K,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,SAAS;MACNhB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAM8M,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,IAAIrN,QAAQ,CAAC4G,MAAM,KAAK,CAAC,IAAI,CAAC9F,iBAAiB,EAAE;MAC7CW,eAAe,CAAC,uFAAuF,CAAC;MACxGF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;;IAEA;IACA,IAAIT,iBAAiB,KAAK,KAAK,EAAE;MAC7B;MACA;MACA,MAAMwL,YAAY,GAAGtK,kBAAkB,CAACE,OAAO,IAAIF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1F,IAAImK,YAAY,GAAG,CAAC,EAAE;QAClB7K,eAAe,CACX,+DAA+DO,kBAAkB,CAACE,OAAO,UAAUF,kBAAkB,CAACE,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,OAAOH,kBAAkB,CAACG,OAAO,UAAUH,kBAAkB,CAACG,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE;AACpS,0GACgB,CAAC;QACDZ,iBAAiB,CAAC,IAAI,CAAC;QACvB;MACJ;;MAEA;MACA,IAAI,CAAC6J,gBAAgB,CAAC,CAAC,EAAE;QACrB;MACJ;;MAEA;MACArI,sBAAsB,CAAC,IAAI,CAAC;IAChC,CAAC,MAAM;MACH;MACAhB,uBAAuB,CAAC,IAAI,CAAC;IACjC;EACJ,CAAC;;EAED;EACA,MAAMuL,wBAAwB,GAAGA,CAAA,KAAM;IACnC;IACA,IAAI,CAAC5K,YAAY,IAAI1C,QAAQ,CAAC4G,MAAM,GAAG,CAAC,EAAE;MACtC;MACA,MAAMmB,YAAY,GAAG5B,IAAI,CAACE,SAAS,CAACrG,QAAQ,CAAC;MAC7C,MAAMgI,mBAAmB,GAAG7B,IAAI,CAACE,SAAS,CAACvC,eAAe,CAAC;MAE3D,IAAIiE,YAAY,KAAKC,mBAAmB,EAAE;QACtC;QACA3F,sBAAsB,CAAC,IAAI,CAAC;MAChC,CAAC,MAAM;QACH;QACAkL,oBAAoB,CAAC,CAAC;MAC1B;IACJ,CAAC,MAAM;MACH;MACAA,oBAAoB,CAAC,CAAC;IAC1B;EACJ,CAAC;;EAED;EACA,MAAMA,oBAAoB,GAAGA,CAAA,KAAM;IAC/B;IACA5M,mBAAmB,CAAC,IAAI,CAAC;;IAEzB;IACA,MAAM6D,KAAK,GAAGH,WAAW,CAACI,GAAG,CAAC,OAAO,CAAC;;IAEtC;IACA+I,UAAU,CAAC,MAAM;MACb,IAAIhJ,KAAK,EAAE;QACPE,QAAQ,CAAC,YAAY,EAAE;UACnB+I,KAAK,EAAE;YACHC,kBAAkB,EAAE,IAAI;YACxBlJ,KAAK,EAAEA;UACX;QACJ,CAAC,CAAC;MACN,CAAC,MAAM;QACHE,QAAQ,CAAC,YAAY,CAAC;MAC1B;IACJ,CAAC,EAAE,GAAG,CAAC;EACX,CAAC;;EAED;EACA,MAAMiJ,uBAAuB,GAAGA,CAAA,KAAM;IAClCtL,sBAAsB,CAAC,KAAK,CAAC;IAC7BkL,oBAAoB,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMK,sBAAsB,GAAGA,CAAA,KAAM;IACjCvL,sBAAsB,CAAC,KAAK,CAAC;EACjC,CAAC;;EAED;EACAxD,SAAS,CAAC,MAAM;IACZ;IACA;EAAA,CACH,EAAE,CAACiC,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAM+M,gBAAgB,GAAG,MAAAA,CAAOC,iBAAiB,GAAG,IAAI,KAAK;IACzD;IACA/K,sBAAsB,CAAC,KAAK,CAAC;;IAE7B;IACAxC,YAAY,CAAC,IAAI,CAAC;IAClBgD,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC;;IAEjC,IAAI;MACA;MACA,MAAMwK,kBAAkB,GAAG,MAAM9O,KAAK,CAACwF,GAAG,CACtC,yDAAyDD,KAAK,EAClE,CAAC;MAED,IAAI,CAACuJ,kBAAkB,CAAC/I,IAAI,IAAI+I,kBAAkB,CAAC/I,IAAI,CAAC4B,MAAM,KAAK,CAAC,EAAE;QAClEnF,eAAe,CAAC,mCAAmC,CAAC;QACpDF,iBAAiB,CAAC,IAAI,CAAC;QACvBhB,YAAY,CAAC,KAAK,CAAC;QACnB;MACJ;;MAEA;MACA,MAAMyN,WAAW,GAAG;QAChBhO,QAAQ,EAAEA,QAAQ,CAAC4F,GAAG,CAACC,OAAO,KAAK;UAC/B,GAAGA,OAAO;UACV2G,SAAS,EAAE3G,OAAO,CAAC2G,SAAS,IAAI,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACpD5G,SAAS,EAAED,OAAO,CAACC,SAAS,CAACF,GAAG,CAACG,QAAQ,KAAK;YAC1C,GAAGA,QAAQ;YACX4G,UAAU,EAAE5G,QAAQ,CAAC4G,UAAU,IAAI,QAAQF,IAAI,CAACC,GAAG,CAAC,CAAC;UACzD,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC;;MAED;MACA,MAAME,OAAO,GAAG;QACZpI,KAAK,EAAEA,KAAK;QACZwJ,WAAW,EAAEA,WAAW;QACxBC,UAAU,EAAEF,kBAAkB,CAAC/I,IAAI;QACnC8I,iBAAiB,EAAEA,iBAAiB;QACpC;QACAI,cAAc,EAAEJ;MACpB,CAAC;MAED,MAAMlJ,QAAQ,GAAG,MAAM3F,KAAK,CAACiN,IAAI,CAC7B,4DAA4D,EAC5DU,OACJ,CAAC;;MAED;MACA3J,mBAAmB,CAAC;QAChBkL,UAAU,EAAEvJ,QAAQ,CAACI,IAAI,CAACmJ,UAAU,CAACvH,MAAM;QAC3CwH,MAAM,EAAExJ,QAAQ,CAACI,IAAI,CAACoJ,MAAM,CAACxH,MAAM;QACnCyH,OAAO,EAAEzJ,QAAQ,CAACI,IAAI,CAACqJ,OAAO,CAACzH,MAAM;QACrC0H,KAAK,EAAEP,kBAAkB,CAAC/I,IAAI,CAAC4B;MACnC,CAAC,CAAC;;MAEF;MACAjE,eAAe,CAAC,IAAI,CAAC;MACrBlC,mBAAmB,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOyE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnEzD,eAAe,CAAC,gDAAgDyD,KAAK,CAACsB,OAAO,EAAE,CAAC;MAChFjF,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,SAAS;MACNhB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAMgO,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC;IACA,IAAI,CAACzN,iBAAiB,EAAE;MACpBW,eAAe,CAAC,sDAAsD,CAAC;MACvEF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;;IAEA;IACA,IAAIT,iBAAiB,KAAK,KAAK,EAAE;MAC7B;MACA,IAAId,QAAQ,CAAC4G,MAAM,GAAG,CAAC,EAAE;QACrB;QACA/C,wBAAwB,CAAC,IAAI,CAAC;MAClC,CAAC,MAAM;QACH;QACApC,eAAe,CAAC,kCAAkC,CAAC;QACnDF,iBAAiB,CAAC,IAAI,CAAC;MAC3B;MACA;IACJ;;IAEA;IACA,IAAI;MACA;MACA;MACA,MAAMqD,QAAQ,GAAG,MAAM3F,KAAK,CAACwF,GAAG,CAC5B,8DAA8D3D,iBAAiB,EACnF,CAAC;;MAED;MACAqC,wBAAwB,CAAC,IAAI,CAAC;IAElC,CAAC,CAAC,OAAO+B,KAAK,EAAE;MACZ;MACA,IAAIA,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;QACjD;QACA,IAAI1F,QAAQ,CAAC4G,MAAM,GAAG,CAAC,EAAE;UACrB;UACA/C,wBAAwB,CAAC,IAAI,CAAC;QAClC,CAAC,MAAM;UACH;UACApC,eAAe,CAAC,kDAAkD,CAAC;UACnEF,iBAAiB,CAAC,IAAI,CAAC;QAC3B;MACJ,CAAC,MAAM;QACHE,eAAe,CAAC,gCAAgCyD,KAAK,CAACsB,OAAO,IAAI,eAAe,EAAE,CAAC;QACnFjF,iBAAiB,CAAC,IAAI,CAAC;MAC3B;IACJ;EACJ,CAAC;;EAED;EACA,MAAMiN,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7BrL,wBAAwB,CAAC,KAAK,CAAC;IAC/B5C,YAAY,CAAC,IAAI,CAAC;IAClBgD,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;;IAElC,IAAI;MACA,MAAMqB,QAAQ,GAAG,MAAM3F,KAAK,CAACwP,MAAM,CAC/B,8DAA8D3N,iBAAiB,EACnF,CAAC;MAED,IAAI8D,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;QACzB;QACAzF,WAAW,CAAC,EAAE,CAAC;QACf0C,eAAe,CAAC,IAAI,CAAC;;QAErB;QACAU,wBAAwB,CAAC,IAAI,CAAC;MAClC,CAAC,MAAM;QACH,MAAM,IAAI0B,KAAK,CAAC,4BAA4B,CAAC;MACjD;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;MAElD;MACA,IAAIA,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;QACjDjE,eAAe,CAAC,kDAAkD,CAAC;QACnEF,iBAAiB,CAAC,IAAI,CAAC;MAC3B,CAAC,MAAM;QACHE,eAAe,CAAC,8BAA8ByD,KAAK,CAACsB,OAAO,IAAI,eAAe,EAAE,CAAC;QACjFjF,iBAAiB,CAAC,IAAI,CAAC;MAC3B;IACJ,CAAC,SAAS;MACNhB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMmO,YAAY,GAAGA,CAAA,kBACjBvP,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACvCL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAAoC;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpDT,OAAA;YAAUiQ,MAAM,EAAC;UAAuB;YAAA3P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EACvBsB,iBAAiB,KAAK,KAAK,IAAIkC,gBAAgB,GAC1C,qCAAqC,GACrC;MAAkB;QAAAvD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,EACJkB,iBAAiB,KAAK,KAAK,IAAIkC,gBAAgB,gBAC5C7D,OAAA;QAAKI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBAC/BL,OAAA;UAAAK,QAAA,GAAG,aAAW,EAACwD,gBAAgB,CAACmL,UAAU,EAAC,UAAQ,EAACnL,gBAAgB,CAACsL,KAAK,EAAC,cAAY;QAAA;UAAA7O,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC1FoD,gBAAgB,CAACqL,OAAO,GAAG,CAAC,iBACzBlP,OAAA;UAAAK,QAAA,GAAG,UAAQ,EAACwD,gBAAgB,CAACqL,OAAO,EAAC,sCAAoC;QAAA;UAAA5O,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAC/E,EACAoD,gBAAgB,CAACoL,MAAM,GAAG,CAAC,iBACxBjP,OAAA;UAAGI,SAAS,EAAC,YAAY;UAAAC,QAAA,GAAC,aAAW,EAACwD,gBAAgB,CAACoL,MAAM,EAAC,cAAY;QAAA;UAAA3O,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAChF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,gBAENT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAsD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC9F,eACDT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEA,CAAA,KAAM;YACX5O,mBAAmB,CAAC,KAAK,CAAC;YAC1B,IAAIK,iBAAiB,KAAK,KAAK,EAAE;cAC7B;cACAC,oBAAoB,CAAC,EAAE,CAAC;YAC5B;UACJ,CAAE;UAAAvB,QAAA,EAEDsB,iBAAiB,KAAK,KAAK,GAAG,UAAU,GAAG;QAAoB;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC,eACTT,OAAA;UACII,SAAS,EAAC,gCAAgC;UAC1C8P,OAAO,EAAEA,CAAA,KAAM;YACX;YACA9B,oBAAoB,CAAC,CAAC;UAC1B,CAAE;UAAA/N,QAAA,EACL;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;EAED,MAAM0P,UAAU,GAAGA,CAAA,kBACfnQ,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACrCL,OAAA;QAAKI,SAAS,EAAC,wBAAwB;QAAC,eAAY,MAAM;QAAAC,QAAA,eACtDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAQoQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,CAAC,EAAC;UAAI;YAAAhQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eACxCT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAEgC;MAAY;QAAA/B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC3BL,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEA,CAAA,KAAM9N,iBAAiB,CAAC,KAAK,CAAE;UAAA/B,QAAA,EAC3C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAMkQ,YAAY,GAAGA,CAAA,kBACjB3Q,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAA0F;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1GT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAyF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC/HT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAEnG,yBAA0B;UAAA1J,QAAA,EAAC;QAEvF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQI,SAAS,EAAC,8BAA8B;UAAC8P,OAAO,EAAEpG,0BAA2B;UAAAzJ,QAAA,EAAC;QAEtF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAMmQ,gBAAgB,GAAGA,CAAA,kBACrB5Q,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAQoQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,CAAC,EAAC;UAAI;YAAAhQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eACxCT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3DT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,GAAC,6FAC6D,EAACwC,kBAAkB,CAACE,OAAO,EAAC,SAAO,EAACF,kBAAkB,CAACE,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAC,GAAC,EAACF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,OAAOH,kBAAkB,CAACG,OAAO,UAAUH,kBAAkB,CAACG,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAC,uBACjT;MAAA;QAAA1C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAEA,CAAA,KAAMtN,uBAAuB,CAAC,KAAK,CAAE;UAAAvC,QAAA,EAAC;QAElG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEA,CAAA,KAAM;YACXtN,uBAAuB,CAAC,KAAK,CAAC;YAC9BsK,UAAU,CAAC,CAAC;UAChB,CAAE;UAAA7M,QAAA,EACL;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAMoQ,sBAAsB,GAAGA,CAAA,kBAC3B7Q,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAA0F;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1GT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAwF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9HT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAEzB,sBAAuB;UAAApO,QAAA,EAAC;QAEpF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQI,SAAS,EAAC,8BAA8B;UAAC8P,OAAO,EAAE1B,uBAAwB;UAAAnO,QAAA,EAAC;QAEnF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAMqQ,eAAe,GAAGA,CAAA,kBACpB9Q,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAQoQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,CAAC,EAAC;UAAI;YAAAhQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eACxCT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAGlC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UACII,SAAS,EAAC,gCAAgC;UAC1C8P,OAAO,EAAEA,CAAA,KAAMtM,sBAAsB,CAAC,KAAK,CAAE;UAAAvD,QAAA,EAChD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEA,CAAA,KAAMxB,gBAAgB,CAAC,IAAI,CAAE;UACtCqC,KAAK,EAAE;YAAEC,aAAa,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAE,CAAE,CAAC;UAAA5Q,QAAA,EACjD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAMyQ,iBAAiB,GAAGA,CAAA,kBACtBlR,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAA0F;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1GT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAElC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAEA,CAAA,KAAMlM,wBAAwB,CAAC,KAAK,CAAE;UAAA3D,QAAA,EAAC;QAEnG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQI,SAAS,EAAC,6BAA6B;UAAC8P,OAAO,EAAEb,YAAa;UAAAhP,QAAA,EAAC;QAEvE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAM0Q,iBAAiB,GAAGA,CAAA,kBACtBnR,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACvCL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAAoC;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpDT,OAAA;YAAUiQ,MAAM,EAAC;UAAuB;YAAA3P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAiD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvFT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC3BL,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEA,CAAA,KAAMhM,wBAAwB,CAAC,KAAK,CAAE;UAAA7D,QAAA,EAClD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAM2Q,iBAAiB,GAAGA,CAAA,kBACtBpR,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAA0F;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1GT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1DT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAElC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAEA,CAAA,KAAMxL,wBAAwB,CAAC,KAAK,CAAE;UAAArE,QAAA,EAAC;QAEnG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQI,SAAS,EAAC,6BAA6B;UAAC8P,OAAO,EAAEA,CAAA,KAAM;YAC3DxL,wBAAwB,CAAC,KAAK,CAAC;YAC/B,IAAI/C,iBAAiB,KAAK,KAAK,EAAE;cAC7B;cACAuE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;cACf1C,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;cACvBU,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;YACpC,CAAC,MAAM;cACH;cACAgC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;cACf1C,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;cACvB;cACAU,wBAAwB,CAAC,IAAI,CAAC;YAClC;UACJ,CAAE;UAAA7D,QAAA,EAAC;QAEH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAM4Q,oBAAoB,GAAGA,CAAA,kBACzBrR,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0BAA0B;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,gBACtJL,OAAA;YAAMgQ,CAAC,EAAC;UAA0F;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1GT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,GAAG;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5CT,OAAA;YAAMuQ,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,IAAI;YAACC,EAAE,EAAC,OAAO;YAACC,EAAE,EAAC;UAAI;YAAApQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAC5BsB,iBAAiB,KAAK,KAAK,GACxB,oJAAoJ,GACpJ;MAA4I;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjJ,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAQI,SAAS,EAAC,gCAAgC;UAAC8P,OAAO,EAAE1G,2BAA4B;UAAAnJ,QAAA,EAAC;QAEzF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQI,SAAS,EAAC,6BAA6B;UAAC8P,OAAO,EAAE3G,4BAA6B;UAAAlJ,QAAA,EAAC;QAEvF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;;EAED;EACA,MAAM6Q,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACA,IAAI,CAAC3P,iBAAiB,EAAE;MACpBW,eAAe,CAAC,kEAAkE,CAAC;MACnFF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;;IAEA;IACA,IAAIT,iBAAiB,KAAK,KAAK,IAAIwB,iBAAiB,CAACxB,iBAAiB,CAAC,EAAE;MACrEW,eAAe,CAAC,wGAAwG,CAAC;MACzHF,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACJ;;IAEA;IACA4C,qBAAqB,CAAC,IAAI,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMuM,uBAAuB,GAAGA,CAAA,KAAM;IAClCvM,qBAAqB,CAAC,KAAK,CAAC;;IAE5B;IACA,MAAMwM,mBAAmB,GAAG,CACxB;MACItJ,KAAK,EAAE,kBAAkB;MACzBvB,SAAS,EAAE,CACP;QACI8B,IAAI,EAAE,kEAAkE;QACxEC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,IAAI;QAClB7B,aAAa,EAAE,IAAI;QACnB;QACAsD,YAAY,EAAE,kEAAkE;QAChFK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,kEAAkE;QACxEC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,kEAAkE;QAChFK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,qDAAqD;QAC3DC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,qDAAqD;QACnEK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,CACJ;MACD1C,cAAc,EAAE;QACZC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACX,CAAC;MACDvB,aAAa,EAAE;IACnB,CAAC,EACD;MACIoB,KAAK,EAAE,iBAAiB;MACxBvB,SAAS,EAAE,CACP;QACI8B,IAAI,EAAE,8DAA8D;QACpEC,SAAS,EAAE,GAAG;QACdC,YAAY,EAAE,IAAI;QAClB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,8DAA8D;QAC5EK,iBAAiB,EAAE,GAAG;QACtBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,uDAAuD;QAC7DC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,uDAAuD;QACrEK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,mFAAmF;QACzFC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,mFAAmF;QACjGK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,CACJ;MACD1C,cAAc,EAAE;QACZC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACX,CAAC;MACDvB,aAAa,EAAE;IACnB,CAAC,EACD;MACIoB,KAAK,EAAE,oBAAoB;MAC3BvB,SAAS,EAAE,CACP;QACI8B,IAAI,EAAE,mDAAmD;QACzDC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,IAAI;QAClB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,mDAAmD;QACjEK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,6DAA6D;QACnEC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,6DAA6D;QAC3EK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,EACD;QACIpC,IAAI,EAAE,oEAAoE;QAC1EC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,KAAK;QACnB7B,aAAa,EAAE,IAAI;QACnBsD,YAAY,EAAE,oEAAoE;QAClFK,iBAAiB,EAAE,EAAE;QACrBI,kBAAkB,EAAE;MACxB,CAAC,CACJ;MACD1C,cAAc,EAAE;QACZC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACX,CAAC;MACDvB,aAAa,EAAE;IACnB,CAAC,CACJ;;IAED;IACAhG,WAAW,CAAC2Q,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE,GAAGD,mBAAmB,CAAC,CAAC;;IAEtE;IACA1M,qBAAqB,CAAC,IAAI,CAAC;;IAE3B;IACA,IAAInD,iBAAiB,KAAK,KAAK,EAAE;MAC7ByB,oBAAoB,CAACgD,IAAI,KAAK;QAC1B,GAAGA,IAAI;QACP,CAACzE,iBAAiB,GAAG;MACzB,CAAC,CAAC,CAAC;IACP;;IAEA;IACA2B,gBAAgB,CAAC,IAAI,CAAC;;IAEtB;IACA+K,UAAU,CAAC,MAAM;MACb/K,gBAAgB,CAAC,KAAK,CAAC;IAC3B,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAED,MAAMoO,yBAAyB,GAAGA,CAACvI,YAAY,EAAEwI,YAAY,KAAK;IAC9D3P,sBAAsB,CAACmH,YAAY,CAAC;IACpCjH,qBAAqB,CAACyP,YAAY,CAAC;EACvC,CAAC;EAED,MAAMC,sBAAsB,GAAIzI,YAAY,IAAK;IAC7C,IAAIlH,kBAAkB,CAAC+G,IAAI,CAAC,CAAC,EAAE;MAC3B,MAAMK,eAAe,GAAG,CAAC,GAAGxI,QAAQ,CAAC;MACrCwI,eAAe,CAACF,YAAY,CAAC,CAACjB,KAAK,GAAGjG,kBAAkB,CAAC+G,IAAI,CAAC,CAAC;MAC/DlI,WAAW,CAACuI,eAAe,CAAC;IAChC;IACArH,sBAAsB,CAAC,IAAI,CAAC;EAChC,CAAC;EAED,MAAM6P,0BAA0B,GAAGA,CAACnI,CAAC,EAAEP,YAAY,KAAK;IACpD,IAAIO,CAAC,CAACoI,GAAG,KAAK,OAAO,EAAE;MACnBF,sBAAsB,CAACzI,YAAY,CAAC;IACxC,CAAC,MAAM,IAAIO,CAAC,CAACoI,GAAG,KAAK,QAAQ,EAAE;MAC3B9P,sBAAsB,CAAC,IAAI,CAAC;IAChC;EACJ,CAAC;;EAED;EACA,IAAIT,gBAAgB,IAAIJ,SAAS,EAAE;IAC/B,oBACInB,OAAA;MAAKI,SAAS,EAAC,qBAAqB;MAAC2Q,KAAK,EAAE;QACxCgB,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,SAAS,EAAE;MACf,CAAE;MAAA7R,QAAA,eACEL,OAAA;QAAKI,SAAS,EAAC,mBAAmB;QAAC2Q,KAAK,EAAE;UAAEoB,SAAS,EAAE;QAAS,CAAE;QAAA9R,QAAA,gBAC9DL,OAAA,CAACG,gBAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACpBT,OAAA;UAAG+Q,KAAK,EAAE;YAAEqB,SAAS,EAAE;UAAO,CAAE;UAAA/R,QAAA,EAC3BkB,gBAAgB,GAAG,6BAA6B,GAChD,GAAG4C,gBAAgB;QAAyB;UAAA7D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;;EAEA;EACA,MAAM4R,cAAc,GAAGA,CAAA,kBACnBrS,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAACoP,IAAI,EAAC,QAAQ;IAAC,cAAW,MAAM;IAAAnP,QAAA,eACjEL,OAAA;MAAKI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBL,OAAA;QAAKI,SAAS,EAAC,0CAA0C;QAAC,eAAY,MAAM;QAAAC,QAAA,eACxEL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAA1P,QAAA,eACtJL,OAAA;YAASiQ,MAAM,EAAC;UAAwC;YAAA3P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAU;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNT,OAAA;QAAII,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxDT,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,GAAC,0CACM,eAAAL,OAAA;UAAAK,QAAA,EAAQ;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,sBAC3D,eAAAT,OAAA;UAAAK,QAAA,EAAQ;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gKAE7C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJT,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UACII,SAAS,EAAC,gCAAgC;UAC1C8P,OAAO,EAAEA,CAAA,KAAMlL,qBAAqB,CAAC,KAAK,CAAE;UAAA3E,QAAA,EAC/C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACII,SAAS,EAAC,8BAA8B;UACxC8P,OAAO,EAAEqB,uBAAwB;UAAAlR,QAAA,EACpC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACR;EAED,oBACIT,OAAA;IAAKI,SAAS,EAAC,mCAAmC;IAAAC,QAAA,GAC7CgB,gBAAgB,iBAAIrB,OAAA,CAACuP,YAAY;MAAAjP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpC0B,cAAc,iBAAInC,OAAA,CAACmQ,UAAU;MAAA7P,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAChCwD,qBAAqB,iBAAIjE,OAAA,CAACmR,iBAAiB;MAAA7Q,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9C8B,gBAAgB,iBAAIvC,OAAA,CAAC2Q,YAAY;MAAArQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpCkC,oBAAoB,iBAAI3C,OAAA,CAAC4Q,gBAAgB;MAAAtQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5CwC,mBAAmB,iBAAIjD,OAAA,CAAC6Q,sBAAsB;MAAAvQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjDkD,mBAAmB,iBAAI3D,OAAA,CAAC8Q,eAAe;MAAAxQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC1CsD,qBAAqB,iBAAI/D,OAAA,CAACkR,iBAAiB;MAAA5Q,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9CgE,qBAAqB,iBAAIzE,OAAA,CAACoR,iBAAiB;MAAA9Q,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9C4D,wBAAwB,iBAAIrE,OAAA,CAACqR,oBAAoB;MAAA/Q,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpDsE,kBAAkB,iBAAI/E,OAAA,CAACqS,cAAc;MAAA/R,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGzCT,OAAA;MAAKI,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxBL,OAAA;QAAQI,SAAS,EAAC,aAAa;QAAC8P,OAAO,EAAE/B,wBAAyB;QAAA9N,QAAA,gBAC9DL,OAAA;UAAKI,SAAS,EAAC,WAAW;UAACuP,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACF,OAAO,EAAC,WAAW;UAACD,KAAK,EAAC,4BAA4B;UAAApP,QAAA,eAC/GL,OAAA;YAAM8P,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACF,WAAW,EAAC,GAAG;YAACG,CAAC,EAAC;UAAiB;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7F,CAAC,uBAEV;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTT,OAAA;QAAKI,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5BL,OAAA;UAAAK,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC3BQ,UAAU,iBAAIjB,OAAA;UAAGI,SAAS,EAAC,qBAAqB;UAAAC,QAAA,GAAC,MAAI,EAACY,UAAU,CAACqR,QAAQ;QAAA;UAAAhS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGNT,OAAA;MAAKI,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAE9BL,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BL,OAAA;UAAKI,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBAC/BL,OAAA;YAAOuS,OAAO,EAAC,kBAAkB;YAAAlS,QAAA,EAAC;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC9DT,OAAA;YAAKI,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC3BL,OAAA;cACIwS,EAAE,EAAC,kBAAkB;cACrB3I,KAAK,EAAElI,iBAAkB;cACzB8Q,QAAQ,EAAEhJ,qBAAsB;cAChCiJ,QAAQ,EAAE7Q,mBAAoB;cAC9BqG,KAAK,EAAEvG,iBAAkB;cAAAtB,QAAA,gBAEzBL,OAAA;gBAAQ6J,KAAK,EAAC,EAAE;gBAAAxJ,QAAA,EAAC;cAAsB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAChDT,OAAA;gBAAQ6J,KAAK,EAAC,KAAK;gBAAAxJ,QAAA,EAAC;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACxCgB,UAAU,CAACgF,GAAG,CAACkM,GAAG,iBACf3S,OAAA;gBAA8B6J,KAAK,EAAE8I,GAAG,CAAChF,WAAY;gBAACzF,KAAK,EAAEyK,GAAG,CAAChF,WAAY;gBAAAtN,QAAA,EACxEsS,GAAG,CAAChF;cAAW,GADPgF,GAAG,CAAChF,WAAW;gBAAArN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEpB,CACX,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,EAERkB,iBAAiB,IAAIA,iBAAiB,KAAK,KAAK,iBAC7C3B,OAAA;cACII,SAAS,EAAC,qBAAqB;cAC/B8P,OAAO,EAAElE,iBAAkB;cAC3B,cAAW,wBAAwB;cAAA3L,QAAA,EACtC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACX;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENT,OAAA;UAAKI,SAAS,EAAC,8BAA8B;UAAAC,QAAA,GACxCgD,aAAa,iBACVrD,OAAA;YAAKI,SAAS,EAAC,oBAAoB;YAAAC,QAAA,eAC/BL,OAAA;cAAAK,QAAA,EAAM;YAA2C;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD,CACR,EAEAkB,iBAAiB,IAAIA,iBAAiB,KAAK,KAAK,iBAC7C3B,OAAA,CAAAE,SAAA;YAAAG,QAAA,GAEK,CAAC8C,iBAAiB,CAACxB,iBAAiB,CAAC,iBAClC3B,OAAA,CAAAE,SAAA;cAAAG,QAAA,gBACIL,OAAA;gBAAKI,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACjCT,OAAA;gBAAKI,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACjCT,OAAA;gBAAKI,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACjCT,OAAA;gBAAKI,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,eACnC,CACL,eACDT,OAAA;cACII,SAAS,EAAE,sBACP+C,iBAAiB,CAACxB,iBAAiB,CAAC,GAAG,MAAM,GAAG,EAAE,EACnD;cACHuO,OAAO,EAAEoB,gBAAiB;cAC1BpJ,KAAK,EAAE/E,iBAAiB,CAACxB,iBAAiB,CAAC,GACrC,wDAAwD,GACxD,sCAAuC;cAAAtB,QAAA,gBAE7CL,OAAA;gBAAKI,SAAS,EAAC,SAAS;gBAACuP,IAAI,EAAC,MAAM;gBAACC,MAAM,EAAC,cAAc;gBAACF,OAAO,EAAC,WAAW;gBAACD,KAAK,EAAC,4BAA4B;gBAAApP,QAAA,eAC7GL,OAAA;kBAAM8P,aAAa,EAAC,OAAO;kBAACC,cAAc,EAAC,OAAO;kBAACF,WAAW,EAAC,GAAG;kBAACG,CAAC,EAAC;gBAA4B;kBAAA1P,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACxG,CAAC,EACL0C,iBAAiB,CAACxB,iBAAiB,CAAC,GACnC,mBAAmB,GACnB,uBAAuB;YAAA;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrB,CAAC;UAAA,eACX,CACL;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAGLkB,iBAAiB,iBACd3B,OAAA;QAAKI,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5BL,OAAA;UAAAK,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBT,OAAA;UAAKI,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAChCL,OAAA;YACI4S,IAAI,EAAC,MAAM;YACXxS,SAAS,EAAC,qBAAqB;YAC/ByS,WAAW,EAAC,+DAA+D;YAC3EhJ,KAAK,EAAE9I,eAAgB;YACvB0R,QAAQ,EAAG/I,CAAC,IAAK1I,kBAAkB,CAAC0I,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;YACpDiJ,UAAU,EAAGpJ,CAAC,IAAKA,CAAC,CAACoI,GAAG,KAAK,OAAO,IAAI/I,gBAAgB,CAAC;UAAE;YAAAzI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC,eACFT,OAAA;YAAQI,SAAS,EAAC,oBAAoB;YAAC8P,OAAO,EAAEnH,gBAAiB;YAAA1I,QAAA,gBAC7DL,OAAA;cAAKyP,KAAK,EAAC,4BAA4B;cAACE,IAAI,EAAC,MAAM;cAACD,OAAO,EAAC,WAAW;cAACG,WAAW,EAAC,KAAK;cAACD,MAAM,EAAC,cAAc;cAACxP,SAAS,EAAC,UAAU;cAAAC,QAAA,eAChIL,OAAA;gBAAM8P,aAAa,EAAC,OAAO;gBAACC,cAAc,EAAC,OAAO;gBAACC,CAAC,EAAC;cAAwB;gBAAA1P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/E,CAAC,eAEV;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACR,EAGA,CAACkB,iBAAiB,gBACf3B,OAAA;QAAKI,SAAS,EAAC,qCAAqC;QAAAC,QAAA,gBAChDL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACE,IAAI,EAAC,MAAM;UAACD,OAAO,EAAC,WAAW;UAACG,WAAW,EAAC,KAAK;UAACD,MAAM,EAAC,cAAc;UAACxP,SAAS,EAAC,YAAY;UAAAC,QAAA,eAClIL,OAAA;YAAM8P,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,CAAC,EAAC;UAAya;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChe,CAAC,eACNT,OAAA;UAAAK,QAAA,EAAG;QAA0C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACjDT,OAAA;UAAAK,QAAA,EAAG;QAA0E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF,CAAC,GACNI,QAAQ,CAAC4G,MAAM,KAAK,CAAC,gBACrBzH,OAAA;QAAKI,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACxBL,OAAA;UAAKyP,KAAK,EAAC,4BAA4B;UAACE,IAAI,EAAC,MAAM;UAACD,OAAO,EAAC,WAAW;UAACG,WAAW,EAAC,KAAK;UAACD,MAAM,EAAC,cAAc;UAACxP,SAAS,EAAC,YAAY;UAAAC,QAAA,eAClIL,OAAA;YAAM8P,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,CAAC,EAAC;UAAwF;YAAA1P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpJ,CAAC,eACNT,OAAA;UAAAK,QAAA,EAAG;QAAyC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAChDT,OAAA;UAAAK,QAAA,EAAG;QAAgD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,gBAENT,OAAA;QAAKI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAC9BQ,QAAQ,CAAC4F,GAAG,CAAC,CAACC,OAAO,EAAEyC,YAAY,kBAChCnJ,OAAA;UAAwBI,SAAS,EAAE,gBAAgBsG,OAAO,CAACI,aAAa,GAAG,sBAAsB,GAAG,EAAE,EAAG;UAAAzG,QAAA,gBACrGL,OAAA;YAAKI,SAAS,EAAC,gBAAgB;YAAAC,QAAA,GAC1B0B,mBAAmB,KAAKoH,YAAY,gBACjCnJ,OAAA;cAAKI,SAAS,EAAC,8BAA8B;cAAAC,QAAA,gBACzCL,OAAA;gBACI4S,IAAI,EAAC,MAAM;gBACXxS,SAAS,EAAC,0BAA0B;gBACpCyJ,KAAK,EAAE5H,kBAAmB;gBAC1BwQ,QAAQ,EAAG/I,CAAC,IAAKxH,qBAAqB,CAACwH,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;gBACvDkJ,MAAM,EAAEA,CAAA,KAAMnB,sBAAsB,CAACzI,YAAY,CAAE;gBACnD6J,SAAS,EAAGtJ,CAAC,IAAKmI,0BAA0B,CAACnI,CAAC,EAAEP,YAAY,CAAE;gBAC9D8J,SAAS;cAAA;gBAAA3S,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACZ,CAAC,eACFT,OAAA;gBAAKI,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBACzBL,OAAA;kBACII,SAAS,EAAC,kBAAkB;kBAC5B8P,OAAO,EAAEA,CAAA,KAAM0B,sBAAsB,CAACzI,YAAY,CAAE;kBACpDjB,KAAK,EAAC,YAAY;kBAAA7H,QAAA,eAElBL,OAAA;oBAAKyP,KAAK,EAAC,4BAA4B;oBAACC,OAAO,EAAC,WAAW;oBAACC,IAAI,EAAC,MAAM;oBAACC,MAAM,EAAC,cAAc;oBAACC,WAAW,EAAC,GAAG;oBAACC,aAAa,EAAC,OAAO;oBAACC,cAAc,EAAC,OAAO;oBAAA1P,QAAA,eACtJL,OAAA;sBAAUiQ,MAAM,EAAC;oBAAgB;sBAAA3P,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAW;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5C;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC,eACTT,OAAA;kBACII,SAAS,EAAC,oBAAoB;kBAC9B8P,OAAO,EAAEA,CAAA,KAAMlO,sBAAsB,CAAC,IAAI,CAAE;kBAC5CkG,KAAK,EAAC,aAAa;kBAAA7H,QAAA,eAEnBL,OAAA;oBAAKyP,KAAK,EAAC,4BAA4B;oBAACC,OAAO,EAAC,WAAW;oBAACC,IAAI,EAAC,MAAM;oBAACC,MAAM,EAAC,cAAc;oBAACC,WAAW,EAAC,GAAG;oBAACC,aAAa,EAAC,OAAO;oBAACC,cAAc,EAAC,OAAO;oBAAA1P,QAAA,gBACtJL,OAAA;sBAAMuQ,EAAE,EAAC,IAAI;sBAACC,EAAE,EAAC,GAAG;sBAACC,EAAE,EAAC,GAAG;sBAACC,EAAE,EAAC;oBAAI;sBAAApQ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO,CAAC,eAC3CT,OAAA;sBAAMuQ,EAAE,EAAC,GAAG;sBAACC,EAAE,EAAC,GAAG;sBAACC,EAAE,EAAC,IAAI;sBAACC,EAAE,EAAC;oBAAI;sBAAApQ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC1C;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACR,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,gBAENT,OAAA;cAAKI,SAAS,EAAC,wBAAwB;cAAAC,QAAA,gBACnCL,OAAA;gBAAII,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAEqG,OAAO,CAACwB;cAAK;gBAAA5H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClDT,OAAA;gBACII,SAAS,EAAC,mBAAmB;gBAC7B8P,OAAO,EAAEA,CAAA,KAAMwB,yBAAyB,CAACvI,YAAY,EAAEzC,OAAO,CAACwB,KAAK,CAAE;gBACtE,cAAY,gBAAgBxB,OAAO,CAACwB,KAAK,EAAG;gBAAA7H,QAAA,eAE5CL,OAAA;kBAAKyP,KAAK,EAAC,4BAA4B;kBAACC,OAAO,EAAC,WAAW;kBAACC,IAAI,EAAC,MAAM;kBAACC,MAAM,EAAC,cAAc;kBAACC,WAAW,EAAC,GAAG;kBAACC,aAAa,EAAC,OAAO;kBAACC,cAAc,EAAC,OAAO;kBAAA1P,QAAA,gBACtJL,OAAA;oBAAMgQ,CAAC,EAAC;kBAA4D;oBAAA1P,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC,eAC5ET,OAAA;oBAAMgQ,CAAC,EAAC;kBAAyD;oBAAA1P,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxE;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CACR,eACDT,OAAA;cACII,SAAS,EAAC,uBAAuB;cACjC8P,OAAO,EAAEA,CAAA,KAAMhH,mBAAmB,CAACC,YAAY,CAAE;cACjD,cAAY,kBAAkBzC,OAAO,CAACwB,KAAK,EAAG;cAAA7H,QAAA,eAE9CL,OAAA;gBAAK2P,IAAI,EAAC,MAAM;gBAACC,MAAM,EAAC,cAAc;gBAACF,OAAO,EAAC,WAAW;gBAACD,KAAK,EAAC,4BAA4B;gBAAApP,QAAA,eACzFL,OAAA;kBAAM8P,aAAa,EAAC,OAAO;kBAACC,cAAc,EAAC,OAAO;kBAACF,WAAW,EAAC,GAAG;kBAACG,CAAC,EAAC;gBAAsB;kBAAA1P,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClG;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eAENT,OAAA;YAAKI,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACpCL,OAAA;cAAKI,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC1BL,OAAA;gBAAOI,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBAC3BL,OAAA;kBACI4S,IAAI,EAAC,UAAU;kBACfM,OAAO,EAAExM,OAAO,CAACyB,cAAc,CAACC,OAAQ;kBACxCqK,QAAQ,EAAG/I,CAAC,IAAK6B,iCAAiC,CAACpC,YAAY,EAAEO,CAAC,CAACE,MAAM,CAACsJ,OAAO,CAAE;kBACnF9S,SAAS,EAAC;gBAAiB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC9B,CAAC,eACFT,OAAA;kBAAAK,QAAA,EAAM;gBAAgC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1C,CAAC,EAEPiG,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,GAAG,CAAC,iBACtDzH,OAAA;gBAAMI,SAAS,EAAC,sBAAsB;gBAAAC,QAAA,EAAC;cAEvC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CACT;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,EAELiG,OAAO,CAACyB,cAAc,CAACC,OAAO,iBAC3BpI,OAAA;cAAKI,SAAS,EAAC,uBAAuB;cAAAC,QAAA,gBAClCL,OAAA;gBAAOuS,OAAO,EAAE,gBAAgBpJ,YAAY,EAAG;gBAAA9I,QAAA,gBAC3CL,OAAA;kBAAAK,QAAA,EAAM;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACnBT,OAAA;kBACIwS,EAAE,EAAE,gBAAgBrJ,YAAY,EAAG;kBACnCyJ,IAAI,EAAC,QAAQ;kBACbvH,GAAG,EAAC,GAAG;kBACPd,GAAG,EAAED,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAE;kBAC5EoC,KAAK,EAAEnD,OAAO,CAACyB,cAAc,CAACE,KAAM;kBACpCoK,QAAQ,EAAG/I,CAAC,IAAK+B,uBAAuB,CAACtC,YAAY,EAAEO,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;kBACvEzJ,SAAS,EAAE,sBACPsG,OAAO,CAACyB,cAAc,CAACE,KAAK,GAAGiC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,EAAE;gBACvH;kBAAAnH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACN,CAAC,eACFT,OAAA;kBAAAK,QAAA,GAAM,SAAO,EAACqG,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,EAAC,2BAAyB;gBAAA;kBAAAnH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjG,CAAC,EAEPiG,OAAO,CAACyB,cAAc,CAACE,KAAK,GAAGiC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAC,iBAClGzH,OAAA;gBAAKI,SAAS,EAAC,sBAAsB;gBAAAC,QAAA,gBACjCL,OAAA;kBAAKI,SAAS,EAAC,cAAc;kBAACqP,KAAK,EAAC,4BAA4B;kBAACC,OAAO,EAAC,WAAW;kBAACC,IAAI,EAAC,MAAM;kBAACC,MAAM,EAAC,cAAc;kBAACC,WAAW,EAAC,GAAG;kBAAAxP,QAAA,gBAClIL,OAAA;oBAAMgQ,CAAC,EAAC;kBAA0F;oBAAA1P,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC,eAC1GT,OAAA;oBAAMuQ,EAAE,EAAC,IAAI;oBAACC,EAAE,EAAC,GAAG;oBAACC,EAAE,EAAC,IAAI;oBAACC,EAAE,EAAC;kBAAI;oBAAApQ,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC,eAC5CT,OAAA;oBAAMuQ,EAAE,EAAC,IAAI;oBAACC,EAAE,EAAC,IAAI;oBAACC,EAAE,EAAC,OAAO;oBAACC,EAAE,EAAC;kBAAI;oBAAApQ,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC/C,CAAC,eACNT,OAAA;kBAAAK,QAAA,GAAM,yBAAuB,EAACiK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,OAAO,CAACC,SAAS,CAACsE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvC,YAAY,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAC,EAAC,mCAAiC;gBAAA;kBAAAnH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5I,CACR,eAEDT,OAAA;gBAAKI,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,eAC7BL,OAAA;kBAAAK,QAAA,EAAM;gBAA8F;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1G,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CACR;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eAENT,OAAA;YAAKI,SAAS,EAAC,qBAAqB;YAAAC,QAAA,EAC/BqG,OAAO,CAACC,SAAS,CAACF,GAAG,CAAC,CAACG,QAAQ,EAAEuD,aAAa,kBAC3CnK,OAAA;cAEII,SAAS,EAAE,iBAAiBwG,QAAQ,CAAC+B,YAAY,GAAG,iBAAiB,GAAG,eAAe,IAAI/B,QAAQ,CAACE,aAAa,GAAG,uBAAuB,GAAG,EAAE,EAAG;cAAAzG,QAAA,eAEnJL,OAAA;gBAAKI,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,gBAC7BL,OAAA;kBAAKI,SAAS,EAAE,mBAAmBwG,QAAQ,CAACE,aAAa,GAAG,qBAAqB,GAAG,EAAE,EAAG;kBAAAzG,QAAA,gBACrFL,OAAA;oBAAKI,SAAS,EAAC,iBAAiB;oBAAAC,QAAA,EAAE8J,aAAa,GAAG;kBAAC;oBAAA7J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC,eAC1DT,OAAA;oBAAKI,SAAS,EAAC,yBAAyB;oBAAAC,QAAA,GACnCuG,QAAQ,CAAC+B,YAAY,gBAClB3I,OAAA;sBAAMI,SAAS,EAAC,kBAAkB;sBAAAC,QAAA,EAAC;oBAAU;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,gBACpDT,OAAA;sBAAMI,SAAS,EAAC,gBAAgB;sBAAAC,QAAA,EAAC;oBAAQ;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,EAInDmG,QAAQ,CAACE,aAAa,iBACnB9G,OAAA;sBAAMI,SAAS,EAAE,YAAYwG,QAAQ,CAACG,YAAY,GAAG,aAAa,GAAG,EAAE,EAAG;sBAAA1G,QAAA,EACrEuG,QAAQ,CAACG,YAAY,GAAG,yBAAyB,GAAG;oBAAc;sBAAAzG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACjE,CACT;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC,eACNT,OAAA;oBACII,SAAS,EAAC,wBAAwB;oBAClC8P,OAAO,EAAEA,CAAA,KAAMrE,oBAAoB,CAAC1C,YAAY,EAAEgB,aAAa,CAAE;oBACjE,cAAW,iBAAiB;oBAAA9J,QAAA,eAE5BL,OAAA;sBAAK2P,IAAI,EAAC,MAAM;sBAACC,MAAM,EAAC,cAAc;sBAACF,OAAO,EAAC,WAAW;sBAACD,KAAK,EAAC,4BAA4B;sBAAApP,QAAA,eACzFL,OAAA;wBAAM8P,aAAa,EAAC,OAAO;wBAACC,cAAc,EAAC,OAAO;wBAACF,WAAW,EAAC,GAAG;wBAACG,CAAC,EAAC;sBAAsB;wBAAA1P,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAO;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClG;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACF,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACR,CAAC,eAENT,OAAA;kBACII,SAAS,EAAE,qBAAqBwG,QAAQ,CAAC+B,YAAY,GAAG,YAAY,GAAG,UAAU,IAAI/B,QAAQ,CAACE,aAAa,GAAG,uBAAuB,GAAG,EAAE,EAAG;kBAC7I+L,WAAW,EAAC,0BAA0B;kBACtChJ,KAAK,EAAEjD,QAAQ,CAAC6B,IAAK;kBACrBgK,QAAQ,EAAG/I,CAAC,IAAKQ,oBAAoB,CAACf,YAAY,EAAEgB,aAAa,EAAET,CAAC,CAACE,MAAM,CAACC,KAAK;gBAAE;kBAAAvJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtF,CAAC,eAEFT,OAAA;kBAAKI,SAAS,EAAE,qBAAqBwG,QAAQ,CAACE,aAAa,GAAG,uBAAuB,GAAG,EAAE,EAAG;kBAAAzG,QAAA,gBACzFL,OAAA;oBAAKI,SAAS,EAAC,uBAAuB;oBAAAC,QAAA,gBAClCL,OAAA;sBAAKI,SAAS,EAAC,WAAW;sBAACqP,KAAK,EAAC,4BAA4B;sBAACC,OAAO,EAAC,WAAW;sBAACC,IAAI,EAAC,MAAM;sBAACC,MAAM,EAAC,cAAc;sBAACC,WAAW,EAAC,GAAG;sBAAAxP,QAAA,gBAC/HL,OAAA;wBAAQoQ,EAAE,EAAC,IAAI;wBAACC,EAAE,EAAC,IAAI;wBAACC,CAAC,EAAC;sBAAI;wBAAAhQ,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAS,CAAC,eACxCT,OAAA;wBAAUiQ,MAAM,EAAC;sBAAkB;wBAAA3P,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAW,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC9C,CAAC,eACNT,OAAA;sBAAOuS,OAAO,EAAE,cAAcpJ,YAAY,IAAIgB,aAAa,EAAG;sBAAA9J,QAAA,EAAC;oBAE/D;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO,CAAC,eACRT,OAAA;sBACIwS,EAAE,EAAE,cAAcrJ,YAAY,IAAIgB,aAAa,EAAG;sBAClDyI,IAAI,EAAC,QAAQ;sBACbvH,GAAG,EAAC,GAAG;sBACPd,GAAG,EAAC,KAAK;sBACTV,KAAK,EAAEjD,QAAQ,CAAC8B,SAAU;sBAC1B+J,QAAQ,EAAG/I,CAAC,IACRW,wBAAwB,CAAClB,YAAY,EAAEgB,aAAa,EAAET,CAAC,CAACE,MAAM,CAACC,KAAK,CACvE;sBACDzJ,SAAS,EAAC;oBAAY;sBAAAE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACzB,CAAC,eACFT,OAAA;sBAAMI,SAAS,EAAC,WAAW;sBAAAC,QAAA,EAAC;oBAAO;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACzC,CAAC,eAENT,OAAA;oBAAKI,SAAS,EAAC,6BAA6B;oBAAAC,QAAA,eACxCL,OAAA;sBAAOI,SAAS,EAAC,kBAAkB;sBAAAC,QAAA,gBAC/BL,OAAA;wBACI4S,IAAI,EAAC,UAAU;wBACfM,OAAO,EAAEtM,QAAQ,CAAC+B,YAAa;wBAC/B8J,QAAQ,EAAG/I,CAAC,IACRoB,8BAA8B,CAAC3B,YAAY,EAAEgB,aAAa,EAAET,CAAC,CAACE,MAAM,CAACsJ,OAAO,CAC/E;wBACD9S,SAAS,EAAC;sBAAqB;wBAAAE,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAClC,CAAC,mBAEN;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACP,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACL,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL;YAAC,GA1ED0J,aAAa;cAAA7J,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA2EjB,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eAENT,OAAA;YACII,SAAS,EAAC,qBAAqB;YAC/B8P,OAAO,EAAEA,CAAA,KAAMlG,iBAAiB,CAACb,YAAY,CAAE;YAAA9I,QAAA,gBAE/CL,OAAA;cAAKyP,KAAK,EAAC,4BAA4B;cAACE,IAAI,EAAC,MAAM;cAACD,OAAO,EAAC,WAAW;cAACG,WAAW,EAAC,KAAK;cAACD,MAAM,EAAC,cAAc;cAACxP,SAAS,EAAC,YAAY;cAAAC,QAAA,eAClIL,OAAA;gBAAM8P,aAAa,EAAC,OAAO;gBAACC,cAAc,EAAC,OAAO;gBAACC,CAAC,EAAC;cAAwB;gBAAA1P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/E,CAAC,gBAEV;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GA9MH0I,YAAY;UAAA7I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA+MjB,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR,EAGAkB,iBAAiB,iBACd3B,OAAA;QAAKI,SAAS,EAAC,yBAAyB;QAAAC,QAAA,gBACpCL,OAAA;UAAKI,SAAS,EAAC,uBAAuB;UAAAC,QAAA,gBAClCL,OAAA;YAAKI,SAAS,EAAC,YAAY;YAAAC,QAAA,eACvBL,OAAA;cAAKyP,KAAK,EAAC,4BAA4B;cAACC,OAAO,EAAC,WAAW;cAACC,IAAI,EAAC,MAAM;cAACC,MAAM,EAAC,cAAc;cAACC,WAAW,EAAC,GAAG;cAAAxP,QAAA,gBACzGL,OAAA;gBAAQoQ,EAAE,EAAC,IAAI;gBAACC,EAAE,EAAC,IAAI;gBAACC,CAAC,EAAC;cAAI;gBAAAhQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eACxCT,OAAA;gBAAUiQ,MAAM,EAAC;cAAkB;gBAAA3P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAW,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACNT,OAAA;YAAKI,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC1BL,OAAA;cAAMI,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC1DT,OAAA;cAAMI,SAAS,EAAC,aAAa;cAAAC,QAAA,GACxBwC,kBAAkB,CAACE,OAAO,EAAC,SAAO,EAACF,kBAAkB,CAACE,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAC9EF,kBAAkB,CAACG,OAAO,GAAG,CAAC,GAAG,QAAQH,kBAAkB,CAACG,OAAO,UAAUH,kBAAkB,CAACG,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE;YAAA;cAAA1C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9H,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENT,OAAA;UAAKI,SAAS,EAAC,2BAA2B;UAAAC,QAAA,gBACtCL,OAAA;YAAKI,SAAS,EAAC,YAAY;YAAAC,QAAA,eACvBL,OAAA;cAAKyP,KAAK,EAAC,4BAA4B;cAACC,OAAO,EAAC,WAAW;cAACC,IAAI,EAAC,MAAM;cAACC,MAAM,EAAC,cAAc;cAACC,WAAW,EAAC,GAAG;cAAAxP,QAAA,eACzGL,OAAA;gBAAMgQ,CAAC,EAAC;cAAwF;gBAAA1P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACNT,OAAA;YAAKI,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC1BL,OAAA;cAAMI,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAA4C;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACjFT,OAAA;cAAMI,SAAS,EAAC,aAAa;cAAAC,QAAA,EAExBwC,kBAAkB,CAACwJ,kBAAkB,IAAI;YAAC;cAAA/L,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACR,EAGAkB,iBAAiB,iBACd3B,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC3BL,OAAA;UAAKI,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC3BL,OAAA;YACII,SAAS,EAAC,cAAc;YACxB8P,OAAO,EAAEd,oBAAqB;YAC9BsD,QAAQ,EAAE,CAAC/Q,iBAAkB;YAC7BuG,KAAK,EAAE,CAACvG,iBAAiB,GAAG,2BAA2B,GACjD,yCAA0C;YAAAtB,QAAA,EACnD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTT,OAAA;YACII,SAAS,EAAC,aAAa;YACvB8P,OAAO,EAAEhC,kBAAmB;YAC5BwE,QAAQ,EAAE7R,QAAQ,CAAC4G,MAAM,KAAK,CAAC,IAAI,CAAC9F,iBAAkB;YAAAtB,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACG,EAAA,CAxnEID,qBAAqB;EAAA,QAqDNf,WAAW,EAKXC,WAAW;AAAA;AAAAsT,GAAA,GA1D1BxS,qBAAqB;AA0nE3B,eAAeA,qBAAqB;AAAC,IAAAD,EAAA,EAAAyS,GAAA;AAAAC,YAAA,CAAA1S,EAAA;AAAA0S,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}