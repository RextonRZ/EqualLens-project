{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruizh\\\\OneDrive\\\\Desktop\\\\EqualLens-project-1\\\\equallens-project\\\\src\\\\components\\\\pages\\\\InterviewQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../pageloading.css';\n\n// LoadingAnimation component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-animation\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"seesaw-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ball\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = LoadingAnimation;\nfunction InterviewQuestions() {\n  _s();\n  const {\n    interviewId,\n    linkCode\n  } = useParams();\n  const navigate = useNavigate();\n\n  // State for questions and navigation\n  const [loading, setLoading] = useState(true);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [completed, setCompleted] = useState(false);\n  const [interviewComplete, setInterviewComplete] = useState(false);\n  const [error, setError] = useState(null);\n  const [sectionTitle, setSectionTitle] = useState('');\n\n  // Timer state\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [timerActive, setTimerActive] = useState(false);\n  const [maxTimeLimit, setMaxTimeLimit] = useState(0);\n  const timerIntervalRef = useRef(null);\n\n  // Recording state\n  const [recording, setRecording] = useState(false);\n  const [recorded, setRecorded] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [videoBlob, setVideoBlob] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  // Media recorder refs\n  const mediaRecorderRef = useRef(null);\n  const videoRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  // Fetch interview questions on component mount\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        setLoading(true);\n\n        // Call API to get questions\n        const response = await fetch(`http://localhost:8000/api/interviews/questions/${interviewId}/${linkCode}`);\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.detail || 'Failed to fetch interview questions');\n        }\n        const questionsData = await response.json();\n        console.log(\"Raw API response:\", questionsData);\n        if (!questionsData || questionsData.length === 0) {\n          throw new Error('No questions found for this interview');\n        }\n        const Questions = questionsData.map(q => ({\n          questionId: q.questionId,\n          question: q.question,\n          timeLimit: q.timeLimit,\n          sectionTitle: q.sectionTitle\n        }));\n        setQuestions(Questions);\n        if (Questions.length > 0) {\n          setSectionTitle(Questions[0].sectionTitle);\n        }\n        const initialTimeLimit = Questions[0].timeLimit;\n        setTimeRemaining(initialTimeLimit);\n        setMaxTimeLimit(initialTimeLimit);\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n\n    // Cleanup function to ensure all media is stopped\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n      }\n    };\n  }, [interviewId, linkCode]);\n\n  // Update section title when question changes\n  useEffect(() => {\n    if (questions.length > 0 && currentQuestionIndex < questions.length) {\n      setSectionTitle(questions[currentQuestionIndex].sectionTitle);\n    }\n  }, [currentQuestionIndex, questions]);\n\n  // Setup media recorder when needed\n  const setupMediaRecorder = async () => {\n    if (streamRef.current) {\n      // If there's an existing stream, stop all tracks\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    try {\n      // Request camera and microphone permissions\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n\n      // Display preview\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        // Preview is mirrored with CSS for natural view\n        videoRef.current.style.transform = \"scaleX(-1)\";\n      }\n\n      // Create media recorder\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'video/webm'\n      });\n      mediaRecorderRef.current = mediaRecorder;\n\n      // Setup event handlers\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: 'video/webm'\n        });\n        setVideoBlob(blob);\n\n        // Create URL for preview\n        const videoURL = URL.createObjectURL(blob);\n        if (videoRef.current) {\n          videoRef.current.srcObject = null;\n          videoRef.current.src = videoURL;\n          videoRef.current.controls = true;\n          // Playback is not mirrored to show the correct orientation\n          videoRef.current.style.transform = \"none\";\n        }\n        setRecorded(true);\n        setRecording(false);\n      };\n      return true;\n    } catch (error) {\n      console.error(\"Error setting up media recorder:\", error);\n      setError(`Error accessing camera/microphone: ${error.message}`);\n      return false;\n    }\n  };\n\n  // Timer effect\n  useEffect(() => {\n    if (timerActive && timeRemaining > 0) {\n      timerIntervalRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            clearInterval(timerIntervalRef.current);\n            stopRecording();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n      }\n    };\n  }, [timerActive]);\n  const startRecording = async () => {\n    // Reset recording state\n    chunksRef.current = [];\n    setRecorded(false);\n    setTimeRemaining(maxTimeLimit);\n\n    // Setup media recorder if not already done\n    const success = await setupMediaRecorder();\n    if (!success) return;\n\n    // Start recording\n    mediaRecorderRef.current.start();\n    setRecording(true);\n\n    // Start timer\n    setTimerActive(true);\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n\n    // Stop timer\n    setTimerActive(false);\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n\n    // Mark question as completed\n    setRecording(false);\n    setRecorded(false);\n    chunksRef.current = [];\n  };\n  const uploadRecording = async () => {\n    if (!videoBlob) return;\n    try {\n      setUploading(true);\n      setUploadProgress(0);\n\n      // Convert blob to base64\n      const reader = new FileReader();\n      reader.readAsDataURL(videoBlob);\n      reader.onloadend = async () => {\n        const base64data = reader.result;\n\n        // Simulate progress for better UX\n        const progressInterval = setInterval(() => {\n          setUploadProgress(prev => {\n            if (prev >= 90) {\n              clearInterval(progressInterval);\n              return 90;\n            }\n            return prev + 10;\n          });\n        }, 300);\n        try {\n          // Prepare response data\n          const responseData = {\n            interviewId,\n            linkCode,\n            questionId: getCurrentQuestion().questionId,\n            videoResponse: base64data\n          };\n\n          // Submit to API\n          const response = await fetch('http://localhost:8000/api/interviews/submit-response', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(responseData)\n          });\n          clearInterval(progressInterval);\n          if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || 'Failed to upload recording');\n          }\n\n          // Upload complete\n          setUploadProgress(100);\n\n          // Get the response\n          const result = await response.json();\n\n          // Wait a moment and move to next question\n          setTimeout(() => {\n            moveToNextQuestion();\n          }, 1000);\n        } catch (error) {\n          console.error(\"Error uploading recording:\", error);\n          clearInterval(progressInterval);\n          setError(`Error uploading recording: ${error.message}`);\n          setUploading(false);\n        }\n      };\n    } catch (error) {\n      console.error(\"Error preparing recording:\", error);\n      setError(`Error preparing recording: ${error.message}`);\n      setUploading(false);\n    }\n  };\n  const getCurrentQuestion = () => {\n    return questions[currentQuestionIndex] || {\n      question: 'Loading...'\n    };\n  };\n  const moveToNextQuestion = () => {\n    // Stop current media\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n\n    // Reset state\n    setCompleted(false);\n    setRecorded(false);\n    setUploading(false);\n    setUploadProgress(0);\n    if (currentQuestionIndex < questions.length - 1) {\n      // Move to next question\n      setCurrentQuestionIndex(prev => prev + 1);\n\n      // Set timer for next question using its original time limit\n      const nextTimeLimit = questions[currentQuestionIndex + 1].timeLimit;\n      setTimeRemaining(nextTimeLimit);\n      setMaxTimeLimit(nextTimeLimit);\n    } else {\n      // All questions completed\n      completeInterview();\n    }\n  };\n  const completeInterview = async () => {\n    try {\n      setLoading(true);\n\n      // Call API to mark interview as complete\n      const response = await fetch('http://localhost:8000/api/interviews/complete-interview', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          interview_id: interviewId,\n          link_code: linkCode\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to complete interview');\n      }\n\n      // Set completed state\n      setInterviewComplete(true);\n    } catch (error) {\n      console.error(\"Error completing interview:\", error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format time in MM:SS\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n\n  // Get progress percentage\n  const getProgressPercentage = () => {\n    return `${Math.round(currentQuestionIndex / questions.length * 100)}%`;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '80vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginTop: '30px',\n          color: '#333'\n        },\n        children: \"Loading interview questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '600px',\n        margin: '40px auto',\n        padding: '30px',\n        textAlign: 'center',\n        backgroundColor: '#fff',\n        borderRadius: '8px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '80px',\n          height: '80px',\n          backgroundColor: '#ffdddd',\n          borderRadius: '50%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: '0 auto 20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"40\",\n          height: \"40\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"#e53935\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"15\",\n            y1: \"9\",\n            x2: \"9\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"9\",\n            y1: \"9\",\n            x2: \"15\",\n            y2: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: '#e53935',\n          marginBottom: '20px'\n        },\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#555',\n          fontSize: '18px',\n          marginBottom: '30px'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          backgroundColor: '#ef402d',\n          color: 'white',\n          border: 'none',\n          padding: '12px 30px',\n          borderRadius: '4px',\n          fontSize: '16px',\n          cursor: 'pointer'\n        },\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this);\n  }\n  if (interviewComplete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '800px',\n        margin: '40px auto',\n        padding: '30px',\n        backgroundColor: '#fff',\n        borderRadius: '8px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100px',\n          height: '100px',\n          backgroundColor: '#e8f5e9',\n          borderRadius: '50%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: '0 auto 20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"50\",\n          height: \"50\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"#4caf50\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: '#333',\n          fontSize: '32px',\n          marginBottom: '20px'\n        },\n        children: \"Interview Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#555',\n          fontSize: '18px',\n          marginBottom: '30px'\n        },\n        children: \"Thank you for completing your interview. Your responses have been recorded.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#555',\n          fontSize: '16px',\n          marginBottom: '20px'\n        },\n        children: \"Our team will review your responses and contact you regarding next steps.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '20px',\n          backgroundColor: '#f5f5f5',\n          borderRadius: '8px',\n          marginBottom: '30px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: '#333',\n            marginBottom: '15px'\n          },\n          children: \"What happens next?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#555',\n            marginBottom: '10px'\n          },\n          children: \"1. Our hiring team will review your interview responses.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#555',\n            marginBottom: '10px'\n          },\n          children: \"2. You'll receive feedback within 5-7 business days.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#555'\n          },\n          children: \"3. If selected, you'll be invited for the next stage in the interview process.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#777',\n          fontSize: '14px'\n        },\n        children: \"If you have any questions, please contact our hiring team at support@equallens.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '900px',\n      margin: '40px auto',\n      padding: '30px',\n      backgroundColor: '#fff',\n      borderRadius: '8px',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          marginBottom: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#666',\n            fontSize: '14px'\n          },\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#666',\n            fontSize: '14px'\n          },\n          children: [getProgressPercentage(), \" Complete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '8px',\n          backgroundColor: '#f1f1f1',\n          borderRadius: '4px',\n          overflow: 'hidden'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: '100%',\n            width: getProgressPercentage(),\n            backgroundColor: '#ef402d',\n            borderRadius: '4px',\n            transition: 'width 0.3s ease'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 13\n    }, this), sectionTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#e3f2fd',\n        padding: '15px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        borderLeft: '4px solid #2196f3'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: '#0d47a1',\n          margin: 0,\n          fontSize: '18px',\n          fontWeight: '500'\n        },\n        children: sectionTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f9f9f9',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: '#333',\n          marginBottom: '10px',\n          fontSize: '20px'\n        },\n        children: [\"Question \", currentQuestionIndex + 1, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#333',\n          fontSize: '18px',\n          lineHeight: '1.6'\n        },\n        children: getCurrentQuestion().question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          marginTop: '15px',\n          padding: '8px 15px',\n          backgroundColor: timerActive ? '#fff8e1' : '#f5f5f5',\n          borderRadius: '20px',\n          width: 'fit-content'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"16\",\n          height: \"16\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: timerActive ? '#f57c00' : '#666',\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"12 6 12 12 16 14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: '5px',\n            color: timerActive ? '#f57c00' : '#666',\n            fontWeight: timerActive ? 'bold' : 'normal'\n          },\n          children: [\"Time limit: \", formatTime(timeRemaining)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        border: '1px solid #eee',\n        borderRadius: '8px',\n        marginBottom: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          width: '100%',\n          paddingBottom: '56.25%',\n          /* 16:9 aspect ratio */\n          backgroundColor: '#000',\n          borderRadius: '8px',\n          overflow: 'hidden',\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: !recorded // Only mute during recording preview\n          ,\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover'\n            // CSS transform is applied to video display via JavaScript instead of here\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 21\n        }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '15px',\n            left: '15px',\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\n            color: 'white',\n            padding: '5px 10px',\n            borderRadius: '4px',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: 'inline-block',\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#f44336',\n              borderRadius: '50%',\n              marginRight: '8px',\n              animation: 'pulse 1.5s infinite'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Recording... \", formatTime(timeRemaining)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n            children: `\n                                @keyframes pulse {\n                                    0% { opacity: 1; }\n                                    50% { opacity: 0.5; }\n                                    100% { opacity: 1; }\n                                }\n                            `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 25\n        }, this), uploading && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            color: 'white'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '15px',\n              fontSize: '18px'\n            },\n            children: \"Uploading your response...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '70%',\n              maxWidth: '300px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%',\n                height: '8px',\n                backgroundColor: 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '4px',\n                overflow: 'hidden'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '100%',\n                  width: `${uploadProgress}%`,\n                  backgroundColor: '#4caf50',\n                  borderRadius: '4px',\n                  transition: 'width 0.3s ease'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center',\n                marginTop: '8px'\n              },\n              children: [uploadProgress, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '15px',\n          marginTop: '20px'\n        },\n        children: [!recording && !recorded && !completed && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRecording,\n          style: {\n            backgroundColor: '#ef402d',\n            color: 'white',\n            border: 'none',\n            padding: '12px 30px',\n            borderRadius: '4px',\n            fontSize: '16px',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"16\",\n            height: \"16\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"12\",\n              cy: \"12\",\n              r: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"12\",\n              cy: \"12\",\n              r: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 29\n          }, this), \"Start Recording\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 25\n        }, this), recording && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopRecording,\n          style: {\n            backgroundColor: '#e53935',\n            color: 'white',\n            border: 'none',\n            padding: '12px 30px',\n            borderRadius: '4px',\n            fontSize: '16px',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"16\",\n            height: \"16\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: \"6\",\n              y: \"6\",\n              width: \"12\",\n              height: \"12\",\n              rx: \"2\",\n              ry: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 29\n          }, this), \"Stop Recording\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 25\n        }, this), recorded && !uploading && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setRecorded(false);\n            },\n            style: {\n              backgroundColor: '#f5f5f5',\n              color: '#333',\n              border: 'none',\n              padding: '12px 20px',\n              borderRadius: '4px',\n              fontSize: '16px',\n              cursor: 'pointer'\n            },\n            children: \"Record Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: uploadRecording,\n            style: {\n              backgroundColor: '#4caf50',\n              color: 'white',\n              border: 'none',\n              padding: '12px 30px',\n              borderRadius: '4px',\n              fontSize: '16px',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"16\",\n              height: \"16\",\n              viewBox: \"0 0 24 24\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n                points: \"22 4 12 14.01 9 11.01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 33\n            }, this), \"Submit Response\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), completed && !recorded && !uploading && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: '#4caf50'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '10px',\n              fontSize: '16px'\n            },\n            children: \"Time's up! Your response has been automatically recorded.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: uploadRecording,\n            style: {\n              backgroundColor: '#4caf50',\n              color: 'white',\n              border: 'none',\n              padding: '12px 30px',\n              borderRadius: '4px',\n              fontSize: '16px',\n              cursor: 'pointer'\n            },\n            children: \"Submit Response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f9f9f9',\n        padding: '20px',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: '#333',\n          marginBottom: '15px',\n          fontSize: '18px'\n        },\n        children: \"Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          color: '#555',\n          paddingLeft: '20px',\n          lineHeight: '1.5'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click \\\"Start Recording\\\" when you're ready to answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"You have \", formatTime(getCurrentQuestion().timeLimit), \" to respond\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Recording will automatically stop when time is up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Review your recording before submitting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you're satisfied with your answer, click \\\"Submit Response\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewQuestions, \"Vz1AMOCty9KngdIC396og9d9V8A=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c2 = InterviewQuestions;\nexport default InterviewQuestions;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingAnimation\");\n$RefreshReg$(_c2, \"InterviewQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingAnimation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","InterviewQuestions","_s","interviewId","linkCode","navigate","loading","setLoading","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","completed","setCompleted","interviewComplete","setInterviewComplete","error","setError","sectionTitle","setSectionTitle","timeRemaining","setTimeRemaining","timerActive","setTimerActive","maxTimeLimit","setMaxTimeLimit","timerIntervalRef","recording","setRecording","recorded","setRecorded","uploading","setUploading","videoBlob","setVideoBlob","uploadProgress","setUploadProgress","mediaRecorderRef","videoRef","streamRef","chunksRef","fetchQuestions","response","fetch","ok","errorData","json","Error","detail","questionsData","console","log","length","Questions","map","q","questionId","question","timeLimit","initialTimeLimit","message","current","getTracks","forEach","track","stop","clearInterval","setupMediaRecorder","stream","navigator","mediaDevices","getUserMedia","video","audio","srcObject","style","transform","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","blob","Blob","type","videoURL","URL","createObjectURL","src","controls","setInterval","prev","stopRecording","startRecording","success","start","state","uploadRecording","reader","FileReader","readAsDataURL","onloadend","base64data","result","progressInterval","responseData","getCurrentQuestion","videoResponse","method","headers","body","JSON","stringify","setTimeout","moveToNextQuestion","nextTimeLimit","completeInterview","interview_id","link_code","formatTime","seconds","minutes","Math","floor","remainingSeconds","getProgressPercentage","round","display","flexDirection","alignItems","justifyContent","minHeight","marginTop","color","maxWidth","margin","padding","textAlign","backgroundColor","borderRadius","boxShadow","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","marginBottom","fontSize","onClick","window","location","reload","border","cursor","d","points","overflow","transition","borderLeft","fontWeight","lineHeight","marginLeft","position","paddingBottom","ref","autoPlay","playsInline","muted","top","left","objectFit","marginRight","animation","gap","x","y","rx","ry","paddingLeft","_c2","$RefreshReg$"],"sources":["C:/Users/ruizh/OneDrive/Desktop/EqualLens-project-1/equallens-project/src/components/pages/InterviewQuestion.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../pageloading.css';\r\n\r\n// LoadingAnimation component\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-animation\">\r\n            <div className=\"seesaw-container\">\r\n                <div className=\"bar\"></div>\r\n                <div className=\"ball\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction InterviewQuestions() {\r\n    const { interviewId, linkCode } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    // State for questions and navigation\r\n    const [loading, setLoading] = useState(true);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [interviewComplete, setInterviewComplete] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [sectionTitle, setSectionTitle] = useState('');\r\n\r\n    // Timer state\r\n    const [timeRemaining, setTimeRemaining] = useState(0);\r\n    const [timerActive, setTimerActive] = useState(false);\r\n    const [maxTimeLimit, setMaxTimeLimit] = useState(0);\r\n    const timerIntervalRef = useRef(null);\r\n\r\n    // Recording state\r\n    const [recording, setRecording] = useState(false);\r\n    const [recorded, setRecorded] = useState(false);\r\n    const [uploading, setUploading] = useState(false);\r\n    const [videoBlob, setVideoBlob] = useState(null);\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n    // Media recorder refs\r\n    const mediaRecorderRef = useRef(null);\r\n    const videoRef = useRef(null);\r\n    const streamRef = useRef(null);\r\n    const chunksRef = useRef([]);\r\n\r\n    // Fetch interview questions on component mount\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                setLoading(true);\r\n\r\n                // Call API to get questions\r\n                const response = await fetch(\r\n                    `http://localhost:8000/api/interviews/questions/${interviewId}/${linkCode}`\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    const errorData = await response.json();\r\n                    throw new Error(errorData.detail || 'Failed to fetch interview questions');\r\n                }\r\n\r\n                const questionsData = await response.json();\r\n                console.log(\"Raw API response:\", questionsData);\r\n\r\n                if (!questionsData || questionsData.length === 0) {\r\n                    throw new Error('No questions found for this interview');\r\n                }\r\n\r\n                const Questions = questionsData.map(q => ({\r\n                    questionId: q.questionId,\r\n                    question: q.question,\r\n                    timeLimit: q.timeLimit,\r\n                    sectionTitle: q.sectionTitle\r\n                }));\r\n\r\n                setQuestions(Questions);\r\n\r\n                if (Questions.length > 0) {\r\n                    setSectionTitle(Questions[0].sectionTitle);\r\n                }\r\n\r\n                const initialTimeLimit = Questions[0].timeLimit;\r\n                setTimeRemaining(initialTimeLimit);\r\n                setMaxTimeLimit(initialTimeLimit);\r\n\r\n            } catch (error) {\r\n                console.error(\"Error fetching questions:\", error);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n\r\n        // Cleanup function to ensure all media is stopped\r\n        return () => {\r\n            if (streamRef.current) {\r\n                streamRef.current.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            if (timerIntervalRef.current) {\r\n                clearInterval(timerIntervalRef.current);\r\n            }\r\n        };\r\n    }, [interviewId, linkCode]);\r\n\r\n    // Update section title when question changes\r\n    useEffect(() => {\r\n        if (questions.length > 0 && currentQuestionIndex < questions.length) {\r\n            setSectionTitle(questions[currentQuestionIndex].sectionTitle);\r\n        }\r\n    }, [currentQuestionIndex, questions]);\r\n\r\n\r\n    // Setup media recorder when needed\r\n    const setupMediaRecorder = async () => {\r\n        if (streamRef.current) {\r\n            // If there's an existing stream, stop all tracks\r\n            streamRef.current.getTracks().forEach(track => track.stop());\r\n        }\r\n\r\n        try {\r\n            // Request camera and microphone permissions\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                video: true,\r\n                audio: true\r\n            });\r\n\r\n            streamRef.current = stream;\r\n\r\n            // Display preview\r\n            if (videoRef.current) {\r\n                videoRef.current.srcObject = stream;\r\n                // Preview is mirrored with CSS for natural view\r\n                videoRef.current.style.transform = \"scaleX(-1)\";\r\n            }\r\n\r\n            // Create media recorder\r\n            const mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });\r\n            mediaRecorderRef.current = mediaRecorder;\r\n\r\n            // Setup event handlers\r\n            mediaRecorder.ondataavailable = (event) => {\r\n                if (event.data.size > 0) {\r\n                    chunksRef.current.push(event.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.onstop = () => {\r\n                const blob = new Blob(chunksRef.current, { type: 'video/webm' });\r\n                setVideoBlob(blob);\r\n\r\n                // Create URL for preview\r\n                const videoURL = URL.createObjectURL(blob);\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = null;\r\n                    videoRef.current.src = videoURL;\r\n                    videoRef.current.controls = true;\r\n                    // Playback is not mirrored to show the correct orientation\r\n                    videoRef.current.style.transform = \"none\";\r\n                }\r\n\r\n                setRecorded(true);\r\n                setRecording(false);\r\n            };\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error setting up media recorder:\", error);\r\n            setError(`Error accessing camera/microphone: ${error.message}`);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // Timer effect\r\n    useEffect(() => {\r\n        if (timerActive && timeRemaining > 0) {\r\n            timerIntervalRef.current = setInterval(() => {\r\n                setTimeRemaining(prev => {\r\n                    if (prev <= 1) {\r\n                        clearInterval(timerIntervalRef.current);\r\n                        stopRecording();\r\n                        return 0;\r\n                    }\r\n                    return prev - 1;\r\n                });\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            if (timerIntervalRef.current) {\r\n                clearInterval(timerIntervalRef.current);\r\n            }\r\n        };\r\n    }, [timerActive]);\r\n\r\n    const startRecording = async () => {\r\n        // Reset recording state\r\n        chunksRef.current = [];\r\n        setRecorded(false);\r\n        setTimeRemaining(maxTimeLimit)\r\n\r\n        // Setup media recorder if not already done\r\n        const success = await setupMediaRecorder();\r\n        if (!success) return;\r\n\r\n        // Start recording\r\n        mediaRecorderRef.current.start();\r\n        setRecording(true);\r\n\r\n        // Start timer\r\n        setTimerActive(true);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n            mediaRecorderRef.current.stop();\r\n        }\r\n\r\n        // Stop timer\r\n        setTimerActive(false);\r\n\r\n        if (streamRef.current) {\r\n            streamRef.current.getTracks().forEach(track => track.stop());\r\n        }\r\n\r\n        // Mark question as completed\r\n        setRecording(false);\r\n        setRecorded(false);\r\n        chunksRef.current = [];\r\n    };\r\n\r\n    const uploadRecording = async () => {\r\n        if (!videoBlob) return;\r\n\r\n        try {\r\n            setUploading(true);\r\n            setUploadProgress(0);\r\n\r\n            // Convert blob to base64\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(videoBlob);\r\n            reader.onloadend = async () => {\r\n                const base64data = reader.result;\r\n\r\n                // Simulate progress for better UX\r\n                const progressInterval = setInterval(() => {\r\n                    setUploadProgress(prev => {\r\n                        if (prev >= 90) {\r\n                            clearInterval(progressInterval);\r\n                            return 90;\r\n                        }\r\n                        return prev + 10;\r\n                    });\r\n                }, 300);\r\n\r\n                try {\r\n                    // Prepare response data\r\n                    const responseData = {\r\n                        interviewId,\r\n                        linkCode,\r\n                        questionId: getCurrentQuestion().questionId,\r\n                        videoResponse: base64data\r\n                    };\r\n\r\n                    // Submit to API\r\n                    const response = await fetch('http://localhost:8000/api/interviews/submit-response', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(responseData)\r\n                    });\r\n\r\n                    clearInterval(progressInterval);\r\n\r\n                    if (!response.ok) {\r\n                        const errorData = await response.json();\r\n                        throw new Error(errorData.detail || 'Failed to upload recording');\r\n                    }\r\n\r\n                    // Upload complete\r\n                    setUploadProgress(100);\r\n\r\n                    // Get the response\r\n                    const result = await response.json();\r\n\r\n                    // Wait a moment and move to next question\r\n                    setTimeout(() => {\r\n                        moveToNextQuestion();\r\n                    }, 1000);\r\n\r\n                } catch (error) {\r\n                    console.error(\"Error uploading recording:\", error);\r\n                    clearInterval(progressInterval);\r\n                    setError(`Error uploading recording: ${error.message}`);\r\n                    setUploading(false);\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            console.error(\"Error preparing recording:\", error);\r\n            setError(`Error preparing recording: ${error.message}`);\r\n            setUploading(false);\r\n        }\r\n    };\r\n\r\n    const getCurrentQuestion = () => {\r\n        return questions[currentQuestionIndex] || { question: 'Loading...' };\r\n    };\r\n\r\n    const moveToNextQuestion = () => {\r\n        // Stop current media\r\n        if (streamRef.current) {\r\n            streamRef.current.getTracks().forEach(track => track.stop());\r\n        }\r\n\r\n        // Reset state\r\n        setCompleted(false);\r\n        setRecorded(false);\r\n        setUploading(false);\r\n        setUploadProgress(0);\r\n\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            // Move to next question\r\n            setCurrentQuestionIndex(prev => prev + 1);\r\n\r\n            // Set timer for next question using its original time limit\r\n            const nextTimeLimit = questions[currentQuestionIndex + 1].timeLimit;\r\n            setTimeRemaining(nextTimeLimit);\r\n            setMaxTimeLimit(nextTimeLimit);\r\n        } else {\r\n            // All questions completed\r\n            completeInterview();\r\n        }\r\n    };\r\n\r\n    const completeInterview = async () => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            // Call API to mark interview as complete\r\n            const response = await fetch('http://localhost:8000/api/interviews/complete-interview', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    interview_id: interviewId,\r\n                    link_code: linkCode\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.detail || 'Failed to complete interview');\r\n            }\r\n\r\n            // Set completed state\r\n            setInterviewComplete(true);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error completing interview:\", error);\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Format time in MM:SS\r\n    const formatTime = (seconds) => {\r\n        const minutes = Math.floor(seconds / 60);\r\n        const remainingSeconds = seconds % 60;\r\n        return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n    };\r\n\r\n    // Get progress percentage\r\n    const getProgressPercentage = () => {\r\n        return `${Math.round(((currentQuestionIndex) / questions.length) * 100)}%`;\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '80vh' }}>\r\n                <LoadingAnimation />\r\n                <h2 style={{ marginTop: '30px', color: '#333' }}>Loading interview questions...</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div style={{\r\n                maxWidth: '600px',\r\n                margin: '40px auto',\r\n                padding: '30px',\r\n                textAlign: 'center',\r\n                backgroundColor: '#fff',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\r\n            }}>\r\n                <div style={{\r\n                    width: '80px',\r\n                    height: '80px',\r\n                    backgroundColor: '#ffdddd',\r\n                    borderRadius: '50%',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    margin: '0 auto 20px'\r\n                }}>\r\n                    <svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#e53935\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n                        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n                    </svg>\r\n                </div>\r\n                <h2 style={{ color: '#e53935', marginBottom: '20px' }}>Error</h2>\r\n                <p style={{ color: '#555', fontSize: '18px', marginBottom: '30px' }}>\r\n                    {error}\r\n                </p>\r\n                <button\r\n                    onClick={() => window.location.reload()}\r\n                    style={{\r\n                        backgroundColor: '#ef402d',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        padding: '12px 30px',\r\n                        borderRadius: '4px',\r\n                        fontSize: '16px',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    Try Again\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (interviewComplete) {\r\n        return (\r\n            <div style={{\r\n                maxWidth: '800px',\r\n                margin: '40px auto',\r\n                padding: '30px',\r\n                backgroundColor: '#fff',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\r\n                textAlign: 'center'\r\n            }}>\r\n                <div style={{\r\n                    width: '100px',\r\n                    height: '100px',\r\n                    backgroundColor: '#e8f5e9',\r\n                    borderRadius: '50%',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    margin: '0 auto 20px'\r\n                }}>\r\n                    <svg width=\"50\" height=\"50\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#4caf50\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                    </svg>\r\n                </div>\r\n                <h1 style={{ color: '#333', fontSize: '32px', marginBottom: '20px' }}>Interview Complete!</h1>\r\n                <p style={{ color: '#555', fontSize: '18px', marginBottom: '30px' }}>\r\n                    Thank you for completing your interview. Your responses have been recorded.\r\n                </p>\r\n                <p style={{ color: '#555', fontSize: '16px', marginBottom: '20px' }}>\r\n                    Our team will review your responses and contact you regarding next steps.\r\n                </p>\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f5f5f5',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '30px'\r\n                }}>\r\n                    <h3 style={{ color: '#333', marginBottom: '15px' }}>What happens next?</h3>\r\n                    <p style={{ color: '#555', marginBottom: '10px' }}>\r\n                        1. Our hiring team will review your interview responses.\r\n                    </p>\r\n                    <p style={{ color: '#555', marginBottom: '10px' }}>\r\n                        2. You'll receive feedback within 5-7 business days.\r\n                    </p>\r\n                    <p style={{ color: '#555' }}>\r\n                        3. If selected, you'll be invited for the next stage in the interview process.\r\n                    </p>\r\n                </div>\r\n                <p style={{ color: '#777', fontSize: '14px' }}>\r\n                    If you have any questions, please contact our hiring team at support@equallens.com\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            maxWidth: '900px',\r\n            margin: '40px auto',\r\n            padding: '30px',\r\n            backgroundColor: '#fff',\r\n            borderRadius: '8px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\r\n        }}>\r\n            {/* Progress bar */}\r\n            <div style={{ marginBottom: '30px' }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                    <span style={{ color: '#666', fontSize: '14px' }}>\r\n                        Question {currentQuestionIndex + 1} of {questions.length}\r\n                    </span>\r\n                    <span style={{ color: '#666', fontSize: '14px' }}>\r\n                        {getProgressPercentage()} Complete\r\n                    </span>\r\n                </div>\r\n                <div style={{\r\n                    height: '8px',\r\n                    backgroundColor: '#f1f1f1',\r\n                    borderRadius: '4px',\r\n                    overflow: 'hidden'\r\n                }}>\r\n                    <div style={{\r\n                        height: '100%',\r\n                        width: getProgressPercentage(),\r\n                        backgroundColor: '#ef402d',\r\n                        borderRadius: '4px',\r\n                        transition: 'width 0.3s ease'\r\n                    }} />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Section Title */}\r\n            {sectionTitle && (\r\n                <div style={{\r\n                    backgroundColor: '#e3f2fd',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    borderLeft: '4px solid #2196f3'\r\n                }}>\r\n                    <h2 style={{\r\n                        color: '#0d47a1',\r\n                        margin: 0,\r\n                        fontSize: '18px',\r\n                        fontWeight: '500'\r\n                    }}>\r\n                        {sectionTitle}\r\n                    </h2>\r\n                </div>\r\n            )}\r\n\r\n            {/* Question */}\r\n            <div style={{\r\n                backgroundColor: '#f9f9f9',\r\n                padding: '20px',\r\n                borderRadius: '8px',\r\n                marginBottom: '20px'\r\n            }}>\r\n                <h2 style={{ color: '#333', marginBottom: '10px', fontSize: '20px' }}>\r\n                    Question {currentQuestionIndex + 1}:\r\n                </h2>\r\n                <p style={{ color: '#333', fontSize: '18px', lineHeight: '1.6' }}>\r\n                    {getCurrentQuestion().question}\r\n                </p>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    marginTop: '15px',\r\n                    padding: '8px 15px',\r\n                    backgroundColor: timerActive ? '#fff8e1' : '#f5f5f5',\r\n                    borderRadius: '20px',\r\n                    width: 'fit-content'\r\n                }}>\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke={timerActive ? '#f57c00' : '#666'} strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                    </svg>\r\n                    <span style={{\r\n                        marginLeft: '5px',\r\n                        color: timerActive ? '#f57c00' : '#666',\r\n                        fontWeight: timerActive ? 'bold' : 'normal'\r\n                    }}>\r\n                        Time limit: {formatTime(timeRemaining)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Video recording area */}\r\n            <div style={{\r\n                padding: '20px',\r\n                border: '1px solid #eee',\r\n                borderRadius: '8px',\r\n                marginBottom: '30px'\r\n            }}>\r\n                <div style={{\r\n                    position: 'relative',\r\n                    width: '100%',\r\n                    paddingBottom: '56.25%', /* 16:9 aspect ratio */\r\n                    backgroundColor: '#000',\r\n                    borderRadius: '8px',\r\n                    overflow: 'hidden',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    <video\r\n                        ref={videoRef}\r\n                        autoPlay\r\n                        playsInline\r\n                        muted={!recorded} // Only mute during recording preview\r\n                        style={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            objectFit: 'cover',\r\n                            // CSS transform is applied to video display via JavaScript instead of here\r\n                        }}\r\n                    />\r\n\r\n                    {recording && (\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            top: '15px',\r\n                            left: '15px',\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                            color: 'white',\r\n                            padding: '5px 10px',\r\n                            borderRadius: '4px',\r\n                            display: 'flex',\r\n                            alignItems: 'center'\r\n                        }}>\r\n                            <span style={{\r\n                                display: 'inline-block',\r\n                                width: '12px',\r\n                                height: '12px',\r\n                                backgroundColor: '#f44336',\r\n                                borderRadius: '50%',\r\n                                marginRight: '8px',\r\n                                animation: 'pulse 1.5s infinite'\r\n                            }} />\r\n                            <span>Recording... {formatTime(timeRemaining)}</span>\r\n                            <style>{`\r\n                                @keyframes pulse {\r\n                                    0% { opacity: 1; }\r\n                                    50% { opacity: 0.5; }\r\n                                    100% { opacity: 1; }\r\n                                }\r\n                            `}</style>\r\n                        </div>\r\n                    )}\r\n\r\n                    {uploading && (\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            color: 'white'\r\n                        }}>\r\n                            <p style={{ marginBottom: '15px', fontSize: '18px' }}>Uploading your response...</p>\r\n                            <div style={{ width: '70%', maxWidth: '300px' }}>\r\n                                <div style={{\r\n                                    width: '100%',\r\n                                    height: '8px',\r\n                                    backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n                                    borderRadius: '4px',\r\n                                    overflow: 'hidden'\r\n                                }}>\r\n                                    <div style={{\r\n                                        height: '100%',\r\n                                        width: `${uploadProgress}%`,\r\n                                        backgroundColor: '#4caf50',\r\n                                        borderRadius: '4px',\r\n                                        transition: 'width 0.3s ease'\r\n                                    }} />\r\n                                </div>\r\n                                <div style={{ textAlign: 'center', marginTop: '8px' }}>\r\n                                    {uploadProgress}%\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    gap: '15px',\r\n                    marginTop: '20px'\r\n                }}>\r\n                    {!recording && !recorded && !completed && (\r\n                        <button\r\n                            onClick={startRecording}\r\n                            style={{\r\n                                backgroundColor: '#ef402d',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                padding: '12px 30px',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                cursor: 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '8px'\r\n                            }}\r\n                        >\r\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                                <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\r\n                            </svg>\r\n                            Start Recording\r\n                        </button>\r\n                    )}\r\n\r\n                    {recording && (\r\n                        <button\r\n                            onClick={stopRecording}\r\n                            style={{\r\n                                backgroundColor: '#e53935',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                padding: '12px 30px',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                cursor: 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '8px'\r\n                            }}\r\n                        >\r\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                <rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\" ry=\"2\"></rect>\r\n                            </svg>\r\n                            Stop Recording\r\n                        </button>\r\n                    )}\r\n\r\n                    {recorded && !uploading && (\r\n                        <>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setRecorded(false);\r\n                                }}\r\n                                style={{\r\n                                    backgroundColor: '#f5f5f5',\r\n                                    color: '#333',\r\n                                    border: 'none',\r\n                                    padding: '12px 20px',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '16px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Record Again\r\n                            </button>\r\n\r\n                            <button\r\n                                onClick={uploadRecording}\r\n                                style={{\r\n                                    backgroundColor: '#4caf50',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    padding: '12px 30px',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '16px',\r\n                                    cursor: 'pointer',\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    gap: '8px'\r\n                                }}\r\n                            >\r\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                                    <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                                </svg>\r\n                                Submit Response\r\n                            </button>\r\n                        </>\r\n                    )}\r\n\r\n                    {completed && !recorded && !uploading && (\r\n                        <div style={{ textAlign: 'center', color: '#4caf50' }}>\r\n                            <p style={{ marginBottom: '10px', fontSize: '16px' }}>\r\n                                Time's up! Your response has been automatically recorded.\r\n                            </p>\r\n                            <button\r\n                                onClick={uploadRecording}\r\n                                style={{\r\n                                    backgroundColor: '#4caf50',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    padding: '12px 30px',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '16px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Submit Response\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Instructions */}\r\n            <div style={{\r\n                backgroundColor: '#f9f9f9',\r\n                padding: '20px',\r\n                borderRadius: '8px'\r\n            }}>\r\n                <h3 style={{ color: '#333', marginBottom: '15px', fontSize: '18px' }}>Instructions:</h3>\r\n                <ul style={{ color: '#555', paddingLeft: '20px', lineHeight: '1.5' }}>\r\n                    <li>Click \"Start Recording\" when you're ready to answer</li>\r\n                    <li>You have {formatTime(getCurrentQuestion().timeLimit)} to respond</li>\r\n                    <li>Recording will automatically stop when time is up</li>\r\n                    <li>Review your recording before submitting</li>\r\n                    <li>When you're satisfied with your answer, click \"Submit Response\"</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}